-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mac_ip_encode_top is
port (
    s_axis_ip_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    s_axis_ip_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_ip_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_ip_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_arp_lookup_reply_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    m_axis_ip_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axis_ip_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_ip_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_ip_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_arp_lookup_request_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    myMacAddress : IN STD_LOGIC_VECTOR (47 downto 0);
    regSubNetMask : IN STD_LOGIC_VECTOR (31 downto 0);
    regDefaultGateway : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axis_ip_TVALID : IN STD_LOGIC;
    s_axis_ip_TREADY : OUT STD_LOGIC;
    m_axis_ip_TVALID : OUT STD_LOGIC;
    m_axis_ip_TREADY : IN STD_LOGIC;
    m_axis_arp_lookup_request_V_TVALID : OUT STD_LOGIC;
    m_axis_arp_lookup_request_V_TREADY : IN STD_LOGIC;
    s_axis_arp_lookup_reply_V_TVALID : IN STD_LOGIC;
    s_axis_arp_lookup_reply_V_TREADY : OUT STD_LOGIC );
end;


architecture behav of mac_ip_encode_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mac_ip_encode_top_mac_ip_encode_top,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu3p-ffvc1517-2-i,HLS_INPUT_CLOCK=3.200000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=2.776438,HLS_SYN_LAT=20,HLS_SYN_TPT=1,HLS_SYN_MEM=29,HLS_SYN_DSP=0,HLS_SYN_FF=30055,HLS_SYN_LUT=18986,HLS_VERSION=2020_2}";
    constant ap_const_lv512_lc_2 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal mac_ip_encode_top_entry3_U0_ap_start : STD_LOGIC;
    signal mac_ip_encode_top_entry3_U0_ap_done : STD_LOGIC;
    signal mac_ip_encode_top_entry3_U0_ap_continue : STD_LOGIC;
    signal mac_ip_encode_top_entry3_U0_ap_idle : STD_LOGIC;
    signal mac_ip_encode_top_entry3_U0_ap_ready : STD_LOGIC;
    signal mac_ip_encode_top_entry3_U0_myMacAddress_out_din : STD_LOGIC_VECTOR (47 downto 0);
    signal mac_ip_encode_top_entry3_U0_myMacAddress_out_write : STD_LOGIC;
    signal mac_ip_encode_top_entry3_U0_regSubNetMask_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal mac_ip_encode_top_entry3_U0_regSubNetMask_out_write : STD_LOGIC;
    signal mac_ip_encode_top_entry3_U0_regDefaultGateway_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal mac_ip_encode_top_entry3_U0_regDefaultGateway_out_write : STD_LOGIC;
    signal mac_ip_encode_top_entry12_U0_ap_start : STD_LOGIC;
    signal mac_ip_encode_top_entry12_U0_ap_done : STD_LOGIC;
    signal mac_ip_encode_top_entry12_U0_ap_continue : STD_LOGIC;
    signal mac_ip_encode_top_entry12_U0_ap_idle : STD_LOGIC;
    signal mac_ip_encode_top_entry12_U0_ap_ready : STD_LOGIC;
    signal mac_ip_encode_top_entry12_U0_myMacAddress_read : STD_LOGIC;
    signal mac_ip_encode_top_entry12_U0_regSubNetMask_read : STD_LOGIC;
    signal mac_ip_encode_top_entry12_U0_regDefaultGateway_read : STD_LOGIC;
    signal mac_ip_encode_top_entry12_U0_myMacAddress_out_din : STD_LOGIC_VECTOR (47 downto 0);
    signal mac_ip_encode_top_entry12_U0_myMacAddress_out_write : STD_LOGIC;
    signal mac_ip_encode_top_entry12_U0_regSubNetMask_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal mac_ip_encode_top_entry12_U0_regSubNetMask_out_write : STD_LOGIC;
    signal mac_ip_encode_top_entry12_U0_regDefaultGateway_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal mac_ip_encode_top_entry12_U0_regDefaultGateway_out_write : STD_LOGIC;
    signal convert_axis_to_net_axis_512_U0_ap_start : STD_LOGIC;
    signal convert_axis_to_net_axis_512_U0_ap_done : STD_LOGIC;
    signal convert_axis_to_net_axis_512_U0_ap_continue : STD_LOGIC;
    signal convert_axis_to_net_axis_512_U0_ap_idle : STD_LOGIC;
    signal convert_axis_to_net_axis_512_U0_ap_ready : STD_LOGIC;
    signal convert_axis_to_net_axis_512_U0_dataIn_internal_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal convert_axis_to_net_axis_512_U0_dataIn_internal_write : STD_LOGIC;
    signal convert_axis_to_net_axis_512_U0_s_axis_ip_TREADY : STD_LOGIC;
    signal convert_net_axis_to_axis_512_U0_ap_start : STD_LOGIC;
    signal convert_net_axis_to_axis_512_U0_ap_done : STD_LOGIC;
    signal convert_net_axis_to_axis_512_U0_ap_continue : STD_LOGIC;
    signal convert_net_axis_to_axis_512_U0_ap_idle : STD_LOGIC;
    signal convert_net_axis_to_axis_512_U0_ap_ready : STD_LOGIC;
    signal convert_net_axis_to_axis_512_U0_dataOut_internal_read : STD_LOGIC;
    signal convert_net_axis_to_axis_512_U0_m_axis_ip_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal convert_net_axis_to_axis_512_U0_m_axis_ip_TVALID : STD_LOGIC;
    signal convert_net_axis_to_axis_512_U0_m_axis_ip_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal convert_net_axis_to_axis_512_U0_m_axis_ip_TSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal convert_net_axis_to_axis_512_U0_m_axis_ip_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal extract_ip_address_512_U0_ap_start : STD_LOGIC;
    signal extract_ip_address_512_U0_ap_done : STD_LOGIC;
    signal extract_ip_address_512_U0_ap_continue : STD_LOGIC;
    signal extract_ip_address_512_U0_ap_idle : STD_LOGIC;
    signal extract_ip_address_512_U0_ap_ready : STD_LOGIC;
    signal extract_ip_address_512_U0_dataIn_internal_read : STD_LOGIC;
    signal extract_ip_address_512_U0_regSubNetMask_read : STD_LOGIC;
    signal extract_ip_address_512_U0_regDefaultGateway_read : STD_LOGIC;
    signal extract_ip_address_512_U0_dataStreamBuffer0_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal extract_ip_address_512_U0_dataStreamBuffer0_write : STD_LOGIC;
    signal extract_ip_address_512_U0_m_axis_arp_lookup_request_V_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal extract_ip_address_512_U0_m_axis_arp_lookup_request_V_TVALID : STD_LOGIC;
    signal mac_compute_ipv4_checksum_U0_ap_start : STD_LOGIC;
    signal mac_compute_ipv4_checksum_U0_ap_done : STD_LOGIC;
    signal mac_compute_ipv4_checksum_U0_ap_continue : STD_LOGIC;
    signal mac_compute_ipv4_checksum_U0_ap_idle : STD_LOGIC;
    signal mac_compute_ipv4_checksum_U0_ap_ready : STD_LOGIC;
    signal mac_compute_ipv4_checksum_U0_dataStreamBuffer0_read : STD_LOGIC;
    signal mac_compute_ipv4_checksum_U0_dataStreamBuffer1_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal mac_compute_ipv4_checksum_U0_dataStreamBuffer1_write : STD_LOGIC;
    signal mac_compute_ipv4_checksum_U0_subSumFifo_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal mac_compute_ipv4_checksum_U0_subSumFifo_write : STD_LOGIC;
    signal mac_finalize_ipv4_checksum_32_U0_ap_start : STD_LOGIC;
    signal mac_finalize_ipv4_checksum_32_U0_ap_done : STD_LOGIC;
    signal mac_finalize_ipv4_checksum_32_U0_ap_continue : STD_LOGIC;
    signal mac_finalize_ipv4_checksum_32_U0_ap_idle : STD_LOGIC;
    signal mac_finalize_ipv4_checksum_32_U0_ap_ready : STD_LOGIC;
    signal mac_finalize_ipv4_checksum_32_U0_subSumFifo_read : STD_LOGIC;
    signal mac_finalize_ipv4_checksum_32_U0_checksumFifo_din : STD_LOGIC_VECTOR (15 downto 0);
    signal mac_finalize_ipv4_checksum_32_U0_checksumFifo_write : STD_LOGIC;
    signal insert_ip_checksum_512_U0_ap_start : STD_LOGIC;
    signal insert_ip_checksum_512_U0_ap_done : STD_LOGIC;
    signal insert_ip_checksum_512_U0_ap_continue : STD_LOGIC;
    signal insert_ip_checksum_512_U0_ap_idle : STD_LOGIC;
    signal insert_ip_checksum_512_U0_ap_ready : STD_LOGIC;
    signal insert_ip_checksum_512_U0_dataStreamBuffer1_read : STD_LOGIC;
    signal insert_ip_checksum_512_U0_checksumFifo_read : STD_LOGIC;
    signal insert_ip_checksum_512_U0_dataStreamBuffer2_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal insert_ip_checksum_512_U0_dataStreamBuffer2_write : STD_LOGIC;
    signal handle_arp_reply_512_U0_ap_start : STD_LOGIC;
    signal handle_arp_reply_512_U0_ap_done : STD_LOGIC;
    signal handle_arp_reply_512_U0_ap_continue : STD_LOGIC;
    signal handle_arp_reply_512_U0_ap_idle : STD_LOGIC;
    signal handle_arp_reply_512_U0_ap_ready : STD_LOGIC;
    signal handle_arp_reply_512_U0_dataStreamBuffer2_read : STD_LOGIC;
    signal handle_arp_reply_512_U0_myMacAddress_read : STD_LOGIC;
    signal handle_arp_reply_512_U0_dataStreamBuffer3_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal handle_arp_reply_512_U0_dataStreamBuffer3_write : STD_LOGIC;
    signal handle_arp_reply_512_U0_headerFifo_din : STD_LOGIC_VECTOR (255 downto 0);
    signal handle_arp_reply_512_U0_headerFifo_write : STD_LOGIC;
    signal handle_arp_reply_512_U0_s_axis_arp_lookup_reply_V_TREADY : STD_LOGIC;
    signal mac_lshiftWordByOctet_512_1_U0_ap_start : STD_LOGIC;
    signal mac_lshiftWordByOctet_512_1_U0_ap_done : STD_LOGIC;
    signal mac_lshiftWordByOctet_512_1_U0_ap_continue : STD_LOGIC;
    signal mac_lshiftWordByOctet_512_1_U0_ap_idle : STD_LOGIC;
    signal mac_lshiftWordByOctet_512_1_U0_ap_ready : STD_LOGIC;
    signal mac_lshiftWordByOctet_512_1_U0_dataStreamBuffer3_read : STD_LOGIC;
    signal mac_lshiftWordByOctet_512_1_U0_dataStreamBuffer4_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal mac_lshiftWordByOctet_512_1_U0_dataStreamBuffer4_write : STD_LOGIC;
    signal insert_ethernet_header_512_U0_ap_start : STD_LOGIC;
    signal insert_ethernet_header_512_U0_ap_done : STD_LOGIC;
    signal insert_ethernet_header_512_U0_ap_continue : STD_LOGIC;
    signal insert_ethernet_header_512_U0_ap_idle : STD_LOGIC;
    signal insert_ethernet_header_512_U0_ap_ready : STD_LOGIC;
    signal insert_ethernet_header_512_U0_dataStreamBuffer4_read : STD_LOGIC;
    signal insert_ethernet_header_512_U0_headerFifo_read : STD_LOGIC;
    signal insert_ethernet_header_512_U0_dataOut_internal_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal insert_ethernet_header_512_U0_dataOut_internal_write : STD_LOGIC;
    signal myMacAddress_c1_full_n : STD_LOGIC;
    signal myMacAddress_c1_dout : STD_LOGIC_VECTOR (47 downto 0);
    signal myMacAddress_c1_empty_n : STD_LOGIC;
    signal regSubNetMask_c2_full_n : STD_LOGIC;
    signal regSubNetMask_c2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regSubNetMask_c2_empty_n : STD_LOGIC;
    signal regDefaultGateway_c3_full_n : STD_LOGIC;
    signal regDefaultGateway_c3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regDefaultGateway_c3_empty_n : STD_LOGIC;
    signal myMacAddress_c_full_n : STD_LOGIC;
    signal myMacAddress_c_dout : STD_LOGIC_VECTOR (47 downto 0);
    signal myMacAddress_c_empty_n : STD_LOGIC;
    signal regSubNetMask_c_full_n : STD_LOGIC;
    signal regSubNetMask_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regSubNetMask_c_empty_n : STD_LOGIC;
    signal regDefaultGateway_c_full_n : STD_LOGIC;
    signal regDefaultGateway_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regDefaultGateway_c_empty_n : STD_LOGIC;
    signal dataIn_internal_full_n : STD_LOGIC;
    signal dataIn_internal_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal dataIn_internal_empty_n : STD_LOGIC;
    signal dataOut_internal_full_n : STD_LOGIC;
    signal dataOut_internal_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal dataOut_internal_empty_n : STD_LOGIC;
    signal dataStreamBuffer0_full_n : STD_LOGIC;
    signal dataStreamBuffer0_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal dataStreamBuffer0_empty_n : STD_LOGIC;
    signal dataStreamBuffer1_full_n : STD_LOGIC;
    signal dataStreamBuffer1_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal dataStreamBuffer1_empty_n : STD_LOGIC;
    signal subSumFifo_full_n : STD_LOGIC;
    signal subSumFifo_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal subSumFifo_empty_n : STD_LOGIC;
    signal checksumFifo_full_n : STD_LOGIC;
    signal checksumFifo_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal checksumFifo_empty_n : STD_LOGIC;
    signal dataStreamBuffer2_full_n : STD_LOGIC;
    signal dataStreamBuffer2_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal dataStreamBuffer2_empty_n : STD_LOGIC;
    signal headerFifo_full_n : STD_LOGIC;
    signal headerFifo_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal headerFifo_empty_n : STD_LOGIC;
    signal dataStreamBuffer3_full_n : STD_LOGIC;
    signal dataStreamBuffer3_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal dataStreamBuffer3_empty_n : STD_LOGIC;
    signal dataStreamBuffer4_full_n : STD_LOGIC;
    signal dataStreamBuffer4_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal dataStreamBuffer4_empty_n : STD_LOGIC;

    component mac_ip_encode_top_mac_ip_encode_top_entry3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        myMacAddress : IN STD_LOGIC_VECTOR (47 downto 0);
        regSubNetMask : IN STD_LOGIC_VECTOR (31 downto 0);
        regDefaultGateway : IN STD_LOGIC_VECTOR (31 downto 0);
        myMacAddress_out_din : OUT STD_LOGIC_VECTOR (47 downto 0);
        myMacAddress_out_full_n : IN STD_LOGIC;
        myMacAddress_out_write : OUT STD_LOGIC;
        regSubNetMask_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regSubNetMask_out_full_n : IN STD_LOGIC;
        regSubNetMask_out_write : OUT STD_LOGIC;
        regDefaultGateway_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regDefaultGateway_out_full_n : IN STD_LOGIC;
        regDefaultGateway_out_write : OUT STD_LOGIC );
    end component;


    component mac_ip_encode_top_mac_ip_encode_top_entry12 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        myMacAddress_dout : IN STD_LOGIC_VECTOR (47 downto 0);
        myMacAddress_empty_n : IN STD_LOGIC;
        myMacAddress_read : OUT STD_LOGIC;
        regSubNetMask_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regSubNetMask_empty_n : IN STD_LOGIC;
        regSubNetMask_read : OUT STD_LOGIC;
        regDefaultGateway_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regDefaultGateway_empty_n : IN STD_LOGIC;
        regDefaultGateway_read : OUT STD_LOGIC;
        myMacAddress_out_din : OUT STD_LOGIC_VECTOR (47 downto 0);
        myMacAddress_out_full_n : IN STD_LOGIC;
        myMacAddress_out_write : OUT STD_LOGIC;
        regSubNetMask_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regSubNetMask_out_full_n : IN STD_LOGIC;
        regSubNetMask_out_write : OUT STD_LOGIC;
        regDefaultGateway_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regDefaultGateway_out_full_n : IN STD_LOGIC;
        regDefaultGateway_out_write : OUT STD_LOGIC );
    end component;


    component mac_ip_encode_top_convert_axis_to_net_axis_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_axis_ip_TVALID : IN STD_LOGIC;
        dataIn_internal_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        dataIn_internal_full_n : IN STD_LOGIC;
        dataIn_internal_write : OUT STD_LOGIC;
        s_axis_ip_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        s_axis_ip_TREADY : OUT STD_LOGIC;
        s_axis_ip_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
        s_axis_ip_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        s_axis_ip_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component mac_ip_encode_top_convert_net_axis_to_axis_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dataOut_internal_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        dataOut_internal_empty_n : IN STD_LOGIC;
        dataOut_internal_read : OUT STD_LOGIC;
        m_axis_ip_TREADY : IN STD_LOGIC;
        m_axis_ip_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axis_ip_TVALID : OUT STD_LOGIC;
        m_axis_ip_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_ip_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_ip_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component mac_ip_encode_top_extract_ip_address_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dataIn_internal_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        dataIn_internal_empty_n : IN STD_LOGIC;
        dataIn_internal_read : OUT STD_LOGIC;
        regSubNetMask_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regSubNetMask_empty_n : IN STD_LOGIC;
        regSubNetMask_read : OUT STD_LOGIC;
        regDefaultGateway_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regDefaultGateway_empty_n : IN STD_LOGIC;
        regDefaultGateway_read : OUT STD_LOGIC;
        dataStreamBuffer0_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        dataStreamBuffer0_full_n : IN STD_LOGIC;
        dataStreamBuffer0_write : OUT STD_LOGIC;
        m_axis_arp_lookup_request_V_TREADY : IN STD_LOGIC;
        m_axis_arp_lookup_request_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axis_arp_lookup_request_V_TVALID : OUT STD_LOGIC );
    end component;


    component mac_ip_encode_top_mac_compute_ipv4_checksum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dataStreamBuffer0_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        dataStreamBuffer0_empty_n : IN STD_LOGIC;
        dataStreamBuffer0_read : OUT STD_LOGIC;
        dataStreamBuffer1_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        dataStreamBuffer1_full_n : IN STD_LOGIC;
        dataStreamBuffer1_write : OUT STD_LOGIC;
        subSumFifo_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        subSumFifo_full_n : IN STD_LOGIC;
        subSumFifo_write : OUT STD_LOGIC );
    end component;


    component mac_ip_encode_top_mac_finalize_ipv4_checksum_32_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        subSumFifo_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        subSumFifo_empty_n : IN STD_LOGIC;
        subSumFifo_read : OUT STD_LOGIC;
        checksumFifo_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        checksumFifo_full_n : IN STD_LOGIC;
        checksumFifo_write : OUT STD_LOGIC );
    end component;


    component mac_ip_encode_top_insert_ip_checksum_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dataStreamBuffer1_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        dataStreamBuffer1_empty_n : IN STD_LOGIC;
        dataStreamBuffer1_read : OUT STD_LOGIC;
        checksumFifo_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        checksumFifo_empty_n : IN STD_LOGIC;
        checksumFifo_read : OUT STD_LOGIC;
        dataStreamBuffer2_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        dataStreamBuffer2_full_n : IN STD_LOGIC;
        dataStreamBuffer2_write : OUT STD_LOGIC );
    end component;


    component mac_ip_encode_top_handle_arp_reply_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dataStreamBuffer2_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        dataStreamBuffer2_empty_n : IN STD_LOGIC;
        dataStreamBuffer2_read : OUT STD_LOGIC;
        s_axis_arp_lookup_reply_V_TVALID : IN STD_LOGIC;
        myMacAddress_dout : IN STD_LOGIC_VECTOR (47 downto 0);
        myMacAddress_empty_n : IN STD_LOGIC;
        myMacAddress_read : OUT STD_LOGIC;
        dataStreamBuffer3_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        dataStreamBuffer3_full_n : IN STD_LOGIC;
        dataStreamBuffer3_write : OUT STD_LOGIC;
        headerFifo_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        headerFifo_full_n : IN STD_LOGIC;
        headerFifo_write : OUT STD_LOGIC;
        s_axis_arp_lookup_reply_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        s_axis_arp_lookup_reply_V_TREADY : OUT STD_LOGIC );
    end component;


    component mac_ip_encode_top_mac_lshiftWordByOctet_512_1_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dataStreamBuffer3_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        dataStreamBuffer3_empty_n : IN STD_LOGIC;
        dataStreamBuffer3_read : OUT STD_LOGIC;
        dataStreamBuffer4_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        dataStreamBuffer4_full_n : IN STD_LOGIC;
        dataStreamBuffer4_write : OUT STD_LOGIC );
    end component;


    component mac_ip_encode_top_insert_ethernet_header_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dataStreamBuffer4_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        dataStreamBuffer4_empty_n : IN STD_LOGIC;
        dataStreamBuffer4_read : OUT STD_LOGIC;
        headerFifo_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        headerFifo_empty_n : IN STD_LOGIC;
        headerFifo_read : OUT STD_LOGIC;
        dataOut_internal_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        dataOut_internal_full_n : IN STD_LOGIC;
        dataOut_internal_write : OUT STD_LOGIC );
    end component;


    component mac_ip_encode_top_fifo_w48_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (47 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (47 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mac_ip_encode_top_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mac_ip_encode_top_fifo_w48_d7_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (47 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (47 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mac_ip_encode_top_fifo_w32_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mac_ip_encode_top_fifo_w1024_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1023 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1023 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mac_ip_encode_top_fifo_w1024_d32_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1023 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1023 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mac_ip_encode_top_fifo_w16_d16_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mac_ip_encode_top_fifo_w256_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (255 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (255 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    mac_ip_encode_top_entry3_U0 : component mac_ip_encode_top_mac_ip_encode_top_entry3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => mac_ip_encode_top_entry3_U0_ap_start,
        ap_done => mac_ip_encode_top_entry3_U0_ap_done,
        ap_continue => mac_ip_encode_top_entry3_U0_ap_continue,
        ap_idle => mac_ip_encode_top_entry3_U0_ap_idle,
        ap_ready => mac_ip_encode_top_entry3_U0_ap_ready,
        myMacAddress => myMacAddress,
        regSubNetMask => regSubNetMask,
        regDefaultGateway => regDefaultGateway,
        myMacAddress_out_din => mac_ip_encode_top_entry3_U0_myMacAddress_out_din,
        myMacAddress_out_full_n => myMacAddress_c1_full_n,
        myMacAddress_out_write => mac_ip_encode_top_entry3_U0_myMacAddress_out_write,
        regSubNetMask_out_din => mac_ip_encode_top_entry3_U0_regSubNetMask_out_din,
        regSubNetMask_out_full_n => regSubNetMask_c2_full_n,
        regSubNetMask_out_write => mac_ip_encode_top_entry3_U0_regSubNetMask_out_write,
        regDefaultGateway_out_din => mac_ip_encode_top_entry3_U0_regDefaultGateway_out_din,
        regDefaultGateway_out_full_n => regDefaultGateway_c3_full_n,
        regDefaultGateway_out_write => mac_ip_encode_top_entry3_U0_regDefaultGateway_out_write);

    mac_ip_encode_top_entry12_U0 : component mac_ip_encode_top_mac_ip_encode_top_entry12
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => mac_ip_encode_top_entry12_U0_ap_start,
        ap_done => mac_ip_encode_top_entry12_U0_ap_done,
        ap_continue => mac_ip_encode_top_entry12_U0_ap_continue,
        ap_idle => mac_ip_encode_top_entry12_U0_ap_idle,
        ap_ready => mac_ip_encode_top_entry12_U0_ap_ready,
        myMacAddress_dout => myMacAddress_c1_dout,
        myMacAddress_empty_n => myMacAddress_c1_empty_n,
        myMacAddress_read => mac_ip_encode_top_entry12_U0_myMacAddress_read,
        regSubNetMask_dout => regSubNetMask_c2_dout,
        regSubNetMask_empty_n => regSubNetMask_c2_empty_n,
        regSubNetMask_read => mac_ip_encode_top_entry12_U0_regSubNetMask_read,
        regDefaultGateway_dout => regDefaultGateway_c3_dout,
        regDefaultGateway_empty_n => regDefaultGateway_c3_empty_n,
        regDefaultGateway_read => mac_ip_encode_top_entry12_U0_regDefaultGateway_read,
        myMacAddress_out_din => mac_ip_encode_top_entry12_U0_myMacAddress_out_din,
        myMacAddress_out_full_n => myMacAddress_c_full_n,
        myMacAddress_out_write => mac_ip_encode_top_entry12_U0_myMacAddress_out_write,
        regSubNetMask_out_din => mac_ip_encode_top_entry12_U0_regSubNetMask_out_din,
        regSubNetMask_out_full_n => regSubNetMask_c_full_n,
        regSubNetMask_out_write => mac_ip_encode_top_entry12_U0_regSubNetMask_out_write,
        regDefaultGateway_out_din => mac_ip_encode_top_entry12_U0_regDefaultGateway_out_din,
        regDefaultGateway_out_full_n => regDefaultGateway_c_full_n,
        regDefaultGateway_out_write => mac_ip_encode_top_entry12_U0_regDefaultGateway_out_write);

    convert_axis_to_net_axis_512_U0 : component mac_ip_encode_top_convert_axis_to_net_axis_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => convert_axis_to_net_axis_512_U0_ap_start,
        ap_done => convert_axis_to_net_axis_512_U0_ap_done,
        ap_continue => convert_axis_to_net_axis_512_U0_ap_continue,
        ap_idle => convert_axis_to_net_axis_512_U0_ap_idle,
        ap_ready => convert_axis_to_net_axis_512_U0_ap_ready,
        s_axis_ip_TVALID => s_axis_ip_TVALID,
        dataIn_internal_din => convert_axis_to_net_axis_512_U0_dataIn_internal_din,
        dataIn_internal_full_n => dataIn_internal_full_n,
        dataIn_internal_write => convert_axis_to_net_axis_512_U0_dataIn_internal_write,
        s_axis_ip_TDATA => s_axis_ip_TDATA,
        s_axis_ip_TREADY => convert_axis_to_net_axis_512_U0_s_axis_ip_TREADY,
        s_axis_ip_TKEEP => s_axis_ip_TKEEP,
        s_axis_ip_TSTRB => s_axis_ip_TSTRB,
        s_axis_ip_TLAST => s_axis_ip_TLAST);

    convert_net_axis_to_axis_512_U0 : component mac_ip_encode_top_convert_net_axis_to_axis_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => convert_net_axis_to_axis_512_U0_ap_start,
        ap_done => convert_net_axis_to_axis_512_U0_ap_done,
        ap_continue => convert_net_axis_to_axis_512_U0_ap_continue,
        ap_idle => convert_net_axis_to_axis_512_U0_ap_idle,
        ap_ready => convert_net_axis_to_axis_512_U0_ap_ready,
        dataOut_internal_dout => dataOut_internal_dout,
        dataOut_internal_empty_n => dataOut_internal_empty_n,
        dataOut_internal_read => convert_net_axis_to_axis_512_U0_dataOut_internal_read,
        m_axis_ip_TREADY => m_axis_ip_TREADY,
        m_axis_ip_TDATA => convert_net_axis_to_axis_512_U0_m_axis_ip_TDATA,
        m_axis_ip_TVALID => convert_net_axis_to_axis_512_U0_m_axis_ip_TVALID,
        m_axis_ip_TKEEP => convert_net_axis_to_axis_512_U0_m_axis_ip_TKEEP,
        m_axis_ip_TSTRB => convert_net_axis_to_axis_512_U0_m_axis_ip_TSTRB,
        m_axis_ip_TLAST => convert_net_axis_to_axis_512_U0_m_axis_ip_TLAST);

    extract_ip_address_512_U0 : component mac_ip_encode_top_extract_ip_address_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => extract_ip_address_512_U0_ap_start,
        ap_done => extract_ip_address_512_U0_ap_done,
        ap_continue => extract_ip_address_512_U0_ap_continue,
        ap_idle => extract_ip_address_512_U0_ap_idle,
        ap_ready => extract_ip_address_512_U0_ap_ready,
        dataIn_internal_dout => dataIn_internal_dout,
        dataIn_internal_empty_n => dataIn_internal_empty_n,
        dataIn_internal_read => extract_ip_address_512_U0_dataIn_internal_read,
        regSubNetMask_dout => regSubNetMask_c_dout,
        regSubNetMask_empty_n => regSubNetMask_c_empty_n,
        regSubNetMask_read => extract_ip_address_512_U0_regSubNetMask_read,
        regDefaultGateway_dout => regDefaultGateway_c_dout,
        regDefaultGateway_empty_n => regDefaultGateway_c_empty_n,
        regDefaultGateway_read => extract_ip_address_512_U0_regDefaultGateway_read,
        dataStreamBuffer0_din => extract_ip_address_512_U0_dataStreamBuffer0_din,
        dataStreamBuffer0_full_n => dataStreamBuffer0_full_n,
        dataStreamBuffer0_write => extract_ip_address_512_U0_dataStreamBuffer0_write,
        m_axis_arp_lookup_request_V_TREADY => m_axis_arp_lookup_request_V_TREADY,
        m_axis_arp_lookup_request_V_TDATA => extract_ip_address_512_U0_m_axis_arp_lookup_request_V_TDATA,
        m_axis_arp_lookup_request_V_TVALID => extract_ip_address_512_U0_m_axis_arp_lookup_request_V_TVALID);

    mac_compute_ipv4_checksum_U0 : component mac_ip_encode_top_mac_compute_ipv4_checksum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => mac_compute_ipv4_checksum_U0_ap_start,
        ap_done => mac_compute_ipv4_checksum_U0_ap_done,
        ap_continue => mac_compute_ipv4_checksum_U0_ap_continue,
        ap_idle => mac_compute_ipv4_checksum_U0_ap_idle,
        ap_ready => mac_compute_ipv4_checksum_U0_ap_ready,
        dataStreamBuffer0_dout => dataStreamBuffer0_dout,
        dataStreamBuffer0_empty_n => dataStreamBuffer0_empty_n,
        dataStreamBuffer0_read => mac_compute_ipv4_checksum_U0_dataStreamBuffer0_read,
        dataStreamBuffer1_din => mac_compute_ipv4_checksum_U0_dataStreamBuffer1_din,
        dataStreamBuffer1_full_n => dataStreamBuffer1_full_n,
        dataStreamBuffer1_write => mac_compute_ipv4_checksum_U0_dataStreamBuffer1_write,
        subSumFifo_din => mac_compute_ipv4_checksum_U0_subSumFifo_din,
        subSumFifo_full_n => subSumFifo_full_n,
        subSumFifo_write => mac_compute_ipv4_checksum_U0_subSumFifo_write);

    mac_finalize_ipv4_checksum_32_U0 : component mac_ip_encode_top_mac_finalize_ipv4_checksum_32_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => mac_finalize_ipv4_checksum_32_U0_ap_start,
        ap_done => mac_finalize_ipv4_checksum_32_U0_ap_done,
        ap_continue => mac_finalize_ipv4_checksum_32_U0_ap_continue,
        ap_idle => mac_finalize_ipv4_checksum_32_U0_ap_idle,
        ap_ready => mac_finalize_ipv4_checksum_32_U0_ap_ready,
        subSumFifo_dout => subSumFifo_dout,
        subSumFifo_empty_n => subSumFifo_empty_n,
        subSumFifo_read => mac_finalize_ipv4_checksum_32_U0_subSumFifo_read,
        checksumFifo_din => mac_finalize_ipv4_checksum_32_U0_checksumFifo_din,
        checksumFifo_full_n => checksumFifo_full_n,
        checksumFifo_write => mac_finalize_ipv4_checksum_32_U0_checksumFifo_write);

    insert_ip_checksum_512_U0 : component mac_ip_encode_top_insert_ip_checksum_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => insert_ip_checksum_512_U0_ap_start,
        ap_done => insert_ip_checksum_512_U0_ap_done,
        ap_continue => insert_ip_checksum_512_U0_ap_continue,
        ap_idle => insert_ip_checksum_512_U0_ap_idle,
        ap_ready => insert_ip_checksum_512_U0_ap_ready,
        dataStreamBuffer1_dout => dataStreamBuffer1_dout,
        dataStreamBuffer1_empty_n => dataStreamBuffer1_empty_n,
        dataStreamBuffer1_read => insert_ip_checksum_512_U0_dataStreamBuffer1_read,
        checksumFifo_dout => checksumFifo_dout,
        checksumFifo_empty_n => checksumFifo_empty_n,
        checksumFifo_read => insert_ip_checksum_512_U0_checksumFifo_read,
        dataStreamBuffer2_din => insert_ip_checksum_512_U0_dataStreamBuffer2_din,
        dataStreamBuffer2_full_n => dataStreamBuffer2_full_n,
        dataStreamBuffer2_write => insert_ip_checksum_512_U0_dataStreamBuffer2_write);

    handle_arp_reply_512_U0 : component mac_ip_encode_top_handle_arp_reply_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => handle_arp_reply_512_U0_ap_start,
        ap_done => handle_arp_reply_512_U0_ap_done,
        ap_continue => handle_arp_reply_512_U0_ap_continue,
        ap_idle => handle_arp_reply_512_U0_ap_idle,
        ap_ready => handle_arp_reply_512_U0_ap_ready,
        dataStreamBuffer2_dout => dataStreamBuffer2_dout,
        dataStreamBuffer2_empty_n => dataStreamBuffer2_empty_n,
        dataStreamBuffer2_read => handle_arp_reply_512_U0_dataStreamBuffer2_read,
        s_axis_arp_lookup_reply_V_TVALID => s_axis_arp_lookup_reply_V_TVALID,
        myMacAddress_dout => myMacAddress_c_dout,
        myMacAddress_empty_n => myMacAddress_c_empty_n,
        myMacAddress_read => handle_arp_reply_512_U0_myMacAddress_read,
        dataStreamBuffer3_din => handle_arp_reply_512_U0_dataStreamBuffer3_din,
        dataStreamBuffer3_full_n => dataStreamBuffer3_full_n,
        dataStreamBuffer3_write => handle_arp_reply_512_U0_dataStreamBuffer3_write,
        headerFifo_din => handle_arp_reply_512_U0_headerFifo_din,
        headerFifo_full_n => headerFifo_full_n,
        headerFifo_write => handle_arp_reply_512_U0_headerFifo_write,
        s_axis_arp_lookup_reply_V_TDATA => s_axis_arp_lookup_reply_V_TDATA,
        s_axis_arp_lookup_reply_V_TREADY => handle_arp_reply_512_U0_s_axis_arp_lookup_reply_V_TREADY);

    mac_lshiftWordByOctet_512_1_U0 : component mac_ip_encode_top_mac_lshiftWordByOctet_512_1_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => mac_lshiftWordByOctet_512_1_U0_ap_start,
        ap_done => mac_lshiftWordByOctet_512_1_U0_ap_done,
        ap_continue => mac_lshiftWordByOctet_512_1_U0_ap_continue,
        ap_idle => mac_lshiftWordByOctet_512_1_U0_ap_idle,
        ap_ready => mac_lshiftWordByOctet_512_1_U0_ap_ready,
        dataStreamBuffer3_dout => dataStreamBuffer3_dout,
        dataStreamBuffer3_empty_n => dataStreamBuffer3_empty_n,
        dataStreamBuffer3_read => mac_lshiftWordByOctet_512_1_U0_dataStreamBuffer3_read,
        dataStreamBuffer4_din => mac_lshiftWordByOctet_512_1_U0_dataStreamBuffer4_din,
        dataStreamBuffer4_full_n => dataStreamBuffer4_full_n,
        dataStreamBuffer4_write => mac_lshiftWordByOctet_512_1_U0_dataStreamBuffer4_write);

    insert_ethernet_header_512_U0 : component mac_ip_encode_top_insert_ethernet_header_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => insert_ethernet_header_512_U0_ap_start,
        ap_done => insert_ethernet_header_512_U0_ap_done,
        ap_continue => insert_ethernet_header_512_U0_ap_continue,
        ap_idle => insert_ethernet_header_512_U0_ap_idle,
        ap_ready => insert_ethernet_header_512_U0_ap_ready,
        dataStreamBuffer4_dout => dataStreamBuffer4_dout,
        dataStreamBuffer4_empty_n => dataStreamBuffer4_empty_n,
        dataStreamBuffer4_read => insert_ethernet_header_512_U0_dataStreamBuffer4_read,
        headerFifo_dout => headerFifo_dout,
        headerFifo_empty_n => headerFifo_empty_n,
        headerFifo_read => insert_ethernet_header_512_U0_headerFifo_read,
        dataOut_internal_din => insert_ethernet_header_512_U0_dataOut_internal_din,
        dataOut_internal_full_n => dataOut_internal_full_n,
        dataOut_internal_write => insert_ethernet_header_512_U0_dataOut_internal_write);

    myMacAddress_c1_U : component mac_ip_encode_top_fifo_w48_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mac_ip_encode_top_entry3_U0_myMacAddress_out_din,
        if_full_n => myMacAddress_c1_full_n,
        if_write => mac_ip_encode_top_entry3_U0_myMacAddress_out_write,
        if_dout => myMacAddress_c1_dout,
        if_empty_n => myMacAddress_c1_empty_n,
        if_read => mac_ip_encode_top_entry12_U0_myMacAddress_read);

    regSubNetMask_c2_U : component mac_ip_encode_top_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mac_ip_encode_top_entry3_U0_regSubNetMask_out_din,
        if_full_n => regSubNetMask_c2_full_n,
        if_write => mac_ip_encode_top_entry3_U0_regSubNetMask_out_write,
        if_dout => regSubNetMask_c2_dout,
        if_empty_n => regSubNetMask_c2_empty_n,
        if_read => mac_ip_encode_top_entry12_U0_regSubNetMask_read);

    regDefaultGateway_c3_U : component mac_ip_encode_top_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mac_ip_encode_top_entry3_U0_regDefaultGateway_out_din,
        if_full_n => regDefaultGateway_c3_full_n,
        if_write => mac_ip_encode_top_entry3_U0_regDefaultGateway_out_write,
        if_dout => regDefaultGateway_c3_dout,
        if_empty_n => regDefaultGateway_c3_empty_n,
        if_read => mac_ip_encode_top_entry12_U0_regDefaultGateway_read);

    myMacAddress_c_U : component mac_ip_encode_top_fifo_w48_d7_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mac_ip_encode_top_entry12_U0_myMacAddress_out_din,
        if_full_n => myMacAddress_c_full_n,
        if_write => mac_ip_encode_top_entry12_U0_myMacAddress_out_write,
        if_dout => myMacAddress_c_dout,
        if_empty_n => myMacAddress_c_empty_n,
        if_read => handle_arp_reply_512_U0_myMacAddress_read);

    regSubNetMask_c_U : component mac_ip_encode_top_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mac_ip_encode_top_entry12_U0_regSubNetMask_out_din,
        if_full_n => regSubNetMask_c_full_n,
        if_write => mac_ip_encode_top_entry12_U0_regSubNetMask_out_write,
        if_dout => regSubNetMask_c_dout,
        if_empty_n => regSubNetMask_c_empty_n,
        if_read => extract_ip_address_512_U0_regSubNetMask_read);

    regDefaultGateway_c_U : component mac_ip_encode_top_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mac_ip_encode_top_entry12_U0_regDefaultGateway_out_din,
        if_full_n => regDefaultGateway_c_full_n,
        if_write => mac_ip_encode_top_entry12_U0_regDefaultGateway_out_write,
        if_dout => regDefaultGateway_c_dout,
        if_empty_n => regDefaultGateway_c_empty_n,
        if_read => extract_ip_address_512_U0_regDefaultGateway_read);

    dataIn_internal_U : component mac_ip_encode_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => convert_axis_to_net_axis_512_U0_dataIn_internal_din,
        if_full_n => dataIn_internal_full_n,
        if_write => convert_axis_to_net_axis_512_U0_dataIn_internal_write,
        if_dout => dataIn_internal_dout,
        if_empty_n => dataIn_internal_empty_n,
        if_read => extract_ip_address_512_U0_dataIn_internal_read);

    dataOut_internal_U : component mac_ip_encode_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => insert_ethernet_header_512_U0_dataOut_internal_din,
        if_full_n => dataOut_internal_full_n,
        if_write => insert_ethernet_header_512_U0_dataOut_internal_write,
        if_dout => dataOut_internal_dout,
        if_empty_n => dataOut_internal_empty_n,
        if_read => convert_net_axis_to_axis_512_U0_dataOut_internal_read);

    dataStreamBuffer0_U : component mac_ip_encode_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => extract_ip_address_512_U0_dataStreamBuffer0_din,
        if_full_n => dataStreamBuffer0_full_n,
        if_write => extract_ip_address_512_U0_dataStreamBuffer0_write,
        if_dout => dataStreamBuffer0_dout,
        if_empty_n => dataStreamBuffer0_empty_n,
        if_read => mac_compute_ipv4_checksum_U0_dataStreamBuffer0_read);

    dataStreamBuffer1_U : component mac_ip_encode_top_fifo_w1024_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mac_compute_ipv4_checksum_U0_dataStreamBuffer1_din,
        if_full_n => dataStreamBuffer1_full_n,
        if_write => mac_compute_ipv4_checksum_U0_dataStreamBuffer1_write,
        if_dout => dataStreamBuffer1_dout,
        if_empty_n => dataStreamBuffer1_empty_n,
        if_read => insert_ip_checksum_512_U0_dataStreamBuffer1_read);

    subSumFifo_U : component mac_ip_encode_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mac_compute_ipv4_checksum_U0_subSumFifo_din,
        if_full_n => subSumFifo_full_n,
        if_write => mac_compute_ipv4_checksum_U0_subSumFifo_write,
        if_dout => subSumFifo_dout,
        if_empty_n => subSumFifo_empty_n,
        if_read => mac_finalize_ipv4_checksum_32_U0_subSumFifo_read);

    checksumFifo_U : component mac_ip_encode_top_fifo_w16_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mac_finalize_ipv4_checksum_32_U0_checksumFifo_din,
        if_full_n => checksumFifo_full_n,
        if_write => mac_finalize_ipv4_checksum_32_U0_checksumFifo_write,
        if_dout => checksumFifo_dout,
        if_empty_n => checksumFifo_empty_n,
        if_read => insert_ip_checksum_512_U0_checksumFifo_read);

    dataStreamBuffer2_U : component mac_ip_encode_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => insert_ip_checksum_512_U0_dataStreamBuffer2_din,
        if_full_n => dataStreamBuffer2_full_n,
        if_write => insert_ip_checksum_512_U0_dataStreamBuffer2_write,
        if_dout => dataStreamBuffer2_dout,
        if_empty_n => dataStreamBuffer2_empty_n,
        if_read => handle_arp_reply_512_U0_dataStreamBuffer2_read);

    headerFifo_U : component mac_ip_encode_top_fifo_w256_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => handle_arp_reply_512_U0_headerFifo_din,
        if_full_n => headerFifo_full_n,
        if_write => handle_arp_reply_512_U0_headerFifo_write,
        if_dout => headerFifo_dout,
        if_empty_n => headerFifo_empty_n,
        if_read => insert_ethernet_header_512_U0_headerFifo_read);

    dataStreamBuffer3_U : component mac_ip_encode_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => handle_arp_reply_512_U0_dataStreamBuffer3_din,
        if_full_n => dataStreamBuffer3_full_n,
        if_write => handle_arp_reply_512_U0_dataStreamBuffer3_write,
        if_dout => dataStreamBuffer3_dout,
        if_empty_n => dataStreamBuffer3_empty_n,
        if_read => mac_lshiftWordByOctet_512_1_U0_dataStreamBuffer3_read);

    dataStreamBuffer4_U : component mac_ip_encode_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mac_lshiftWordByOctet_512_1_U0_dataStreamBuffer4_din,
        if_full_n => dataStreamBuffer4_full_n,
        if_write => mac_lshiftWordByOctet_512_1_U0_dataStreamBuffer4_write,
        if_dout => dataStreamBuffer4_dout,
        if_empty_n => dataStreamBuffer4_empty_n,
        if_read => insert_ethernet_header_512_U0_dataStreamBuffer4_read);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    convert_axis_to_net_axis_512_U0_ap_continue <= ap_const_logic_1;
    convert_axis_to_net_axis_512_U0_ap_start <= ap_const_logic_1;
    convert_net_axis_to_axis_512_U0_ap_continue <= ap_const_logic_1;
    convert_net_axis_to_axis_512_U0_ap_start <= ap_const_logic_1;
    extract_ip_address_512_U0_ap_continue <= ap_const_logic_1;
    extract_ip_address_512_U0_ap_start <= ap_const_logic_1;
    handle_arp_reply_512_U0_ap_continue <= ap_const_logic_1;
    handle_arp_reply_512_U0_ap_start <= ap_const_logic_1;
    insert_ethernet_header_512_U0_ap_continue <= ap_const_logic_1;
    insert_ethernet_header_512_U0_ap_start <= ap_const_logic_1;
    insert_ip_checksum_512_U0_ap_continue <= ap_const_logic_1;
    insert_ip_checksum_512_U0_ap_start <= ap_const_logic_1;
    m_axis_arp_lookup_request_V_TDATA <= extract_ip_address_512_U0_m_axis_arp_lookup_request_V_TDATA;
    m_axis_arp_lookup_request_V_TVALID <= extract_ip_address_512_U0_m_axis_arp_lookup_request_V_TVALID;
    m_axis_ip_TDATA <= convert_net_axis_to_axis_512_U0_m_axis_ip_TDATA;
    m_axis_ip_TKEEP <= convert_net_axis_to_axis_512_U0_m_axis_ip_TKEEP;
    m_axis_ip_TLAST <= convert_net_axis_to_axis_512_U0_m_axis_ip_TLAST;
    m_axis_ip_TSTRB <= convert_net_axis_to_axis_512_U0_m_axis_ip_TSTRB;
    m_axis_ip_TVALID <= convert_net_axis_to_axis_512_U0_m_axis_ip_TVALID;
    mac_compute_ipv4_checksum_U0_ap_continue <= ap_const_logic_1;
    mac_compute_ipv4_checksum_U0_ap_start <= ap_const_logic_1;
    mac_finalize_ipv4_checksum_32_U0_ap_continue <= ap_const_logic_1;
    mac_finalize_ipv4_checksum_32_U0_ap_start <= ap_const_logic_1;
    mac_ip_encode_top_entry12_U0_ap_continue <= ap_const_logic_1;
    mac_ip_encode_top_entry12_U0_ap_start <= ap_const_logic_1;
    mac_ip_encode_top_entry3_U0_ap_continue <= ap_const_logic_1;
    mac_ip_encode_top_entry3_U0_ap_start <= ap_const_logic_1;
    mac_lshiftWordByOctet_512_1_U0_ap_continue <= ap_const_logic_1;
    mac_lshiftWordByOctet_512_1_U0_ap_start <= ap_const_logic_1;
    s_axis_arp_lookup_reply_V_TREADY <= handle_arp_reply_512_U0_s_axis_arp_lookup_reply_V_TREADY;
    s_axis_ip_TREADY <= convert_axis_to_net_axis_512_U0_s_axis_ip_TREADY;
end behav;
