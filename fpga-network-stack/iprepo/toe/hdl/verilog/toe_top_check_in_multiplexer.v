// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module toe_top_check_in_multiplexer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rxEng2portTable_check_req_dout,
        rxEng2portTable_check_req_empty_n,
        rxEng2portTable_check_req_read,
        pt_portCheckListening_req_fifo_din,
        pt_portCheckListening_req_fifo_full_n,
        pt_portCheckListening_req_fifo_write,
        pt_dstFifo_din,
        pt_dstFifo_full_n,
        pt_dstFifo_write,
        pt_portCheckUsed_req_fifo_din,
        pt_portCheckUsed_req_fifo_full_n,
        pt_portCheckUsed_req_fifo_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] rxEng2portTable_check_req_dout;
input   rxEng2portTable_check_req_empty_n;
output   rxEng2portTable_check_req_read;
output  [14:0] pt_portCheckListening_req_fifo_din;
input   pt_portCheckListening_req_fifo_full_n;
output   pt_portCheckListening_req_fifo_write;
output  [0:0] pt_dstFifo_din;
input   pt_dstFifo_full_n;
output   pt_dstFifo_write;
output  [14:0] pt_portCheckUsed_req_fifo_din;
input   pt_portCheckUsed_req_fifo_full_n;
output   pt_portCheckUsed_req_fifo_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg rxEng2portTable_check_req_read;
reg pt_portCheckListening_req_fifo_write;
reg[0:0] pt_dstFifo_din;
reg pt_dstFifo_write;
reg pt_portCheckUsed_req_fifo_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire   [0:0] tmp_i_nbreadreq_fu_44_p3;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] tmp_i_reg_111;
reg   [0:0] tmp_reg_125;
reg    ap_predicate_op28_write_state2;
reg    ap_predicate_op29_write_state2;
reg    ap_predicate_op31_write_state2;
reg    ap_predicate_op32_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    rxEng2portTable_check_req_blk_n;
wire    ap_block_pp0_stage0;
reg    pt_portCheckListening_req_fifo_blk_n;
reg    pt_dstFifo_blk_n;
reg    pt_portCheckUsed_req_fifo_blk_n;
reg   [7:0] p_Result_i_reg_115;
wire   [6:0] trunc_ln414_fu_91_p1;
reg   [6:0] trunc_ln414_reg_120;
reg    ap_block_pp0_stage0_subdone;
wire   [14:0] p_0_fu_103_p3;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_130;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_nbreadreq_fu_44_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Result_i_reg_115 <= {{rxEng2portTable_check_req_dout[15:8]}};
        tmp_reg_125 <= rxEng2portTable_check_req_dout[32'd7];
        trunc_ln414_reg_120 <= trunc_ln414_fu_91_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_i_reg_111 <= tmp_i_nbreadreq_fu_44_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op32_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op29_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        pt_dstFifo_blk_n = pt_dstFifo_full_n;
    end else begin
        pt_dstFifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_130)) begin
        if ((ap_predicate_op32_write_state2 == 1'b1)) begin
            pt_dstFifo_din = 1'd0;
        end else if ((ap_predicate_op29_write_state2 == 1'b1)) begin
            pt_dstFifo_din = 1'd1;
        end else begin
            pt_dstFifo_din = 'bx;
        end
    end else begin
        pt_dstFifo_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op32_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op29_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        pt_dstFifo_write = 1'b1;
    end else begin
        pt_dstFifo_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op28_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pt_portCheckListening_req_fifo_blk_n = pt_portCheckListening_req_fifo_full_n;
    end else begin
        pt_portCheckListening_req_fifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op28_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pt_portCheckListening_req_fifo_write = 1'b1;
    end else begin
        pt_portCheckListening_req_fifo_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op31_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pt_portCheckUsed_req_fifo_blk_n = pt_portCheckUsed_req_fifo_full_n;
    end else begin
        pt_portCheckUsed_req_fifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op31_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pt_portCheckUsed_req_fifo_write = 1'b1;
    end else begin
        pt_portCheckUsed_req_fifo_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_i_nbreadreq_fu_44_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_done_reg == 1'b0))) begin
        rxEng2portTable_check_req_blk_n = rxEng2portTable_check_req_empty_n;
    end else begin
        rxEng2portTable_check_req_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_nbreadreq_fu_44_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rxEng2portTable_check_req_read = 1'b1;
    end else begin
        rxEng2portTable_check_req_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op32_write_state2 == 1'b1) & (pt_dstFifo_full_n == 1'b0)) | ((ap_predicate_op31_write_state2 == 1'b1) & (pt_portCheckUsed_req_fifo_full_n == 1'b0)) | ((ap_predicate_op29_write_state2 == 1'b1) & (pt_dstFifo_full_n == 1'b0)) | ((ap_predicate_op28_write_state2 == 1'b1) & (pt_portCheckListening_req_fifo_full_n == 1'b0)))) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_44_p3 == 1'd1) & (rxEng2portTable_check_req_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op32_write_state2 == 1'b1) & (pt_dstFifo_full_n == 1'b0)) | ((ap_predicate_op31_write_state2 == 1'b1) & (pt_portCheckUsed_req_fifo_full_n == 1'b0)) | ((ap_predicate_op29_write_state2 == 1'b1) & (pt_dstFifo_full_n == 1'b0)) | ((ap_predicate_op28_write_state2 == 1'b1) & (pt_portCheckListening_req_fifo_full_n == 1'b0)))) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_44_p3 == 1'd1) & (rxEng2portTable_check_req_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op32_write_state2 == 1'b1) & (pt_dstFifo_full_n == 1'b0)) | ((ap_predicate_op31_write_state2 == 1'b1) & (pt_portCheckUsed_req_fifo_full_n == 1'b0)) | ((ap_predicate_op29_write_state2 == 1'b1) & (pt_dstFifo_full_n == 1'b0)) | ((ap_predicate_op28_write_state2 == 1'b1) & (pt_portCheckListening_req_fifo_full_n == 1'b0)))) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_44_p3 == 1'd1) & (rxEng2portTable_check_req_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_44_p3 == 1'd1) & (rxEng2portTable_check_req_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((ap_predicate_op32_write_state2 == 1'b1) & (pt_dstFifo_full_n == 1'b0)) | ((ap_predicate_op31_write_state2 == 1'b1) & (pt_portCheckUsed_req_fifo_full_n == 1'b0)) | ((ap_predicate_op29_write_state2 == 1'b1) & (pt_dstFifo_full_n == 1'b0)) | ((ap_predicate_op28_write_state2 == 1'b1) & (pt_portCheckListening_req_fifo_full_n == 1'b0)));
end

always @ (*) begin
    ap_condition_130 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_predicate_op28_write_state2 = ((tmp_reg_125 == 1'd0) & (tmp_i_reg_111 == 1'd1));
end

always @ (*) begin
    ap_predicate_op29_write_state2 = ((tmp_reg_125 == 1'd0) & (tmp_i_reg_111 == 1'd1));
end

always @ (*) begin
    ap_predicate_op31_write_state2 = ((tmp_reg_125 == 1'd1) & (tmp_i_reg_111 == 1'd1));
end

always @ (*) begin
    ap_predicate_op32_write_state2 = ((tmp_reg_125 == 1'd1) & (tmp_i_reg_111 == 1'd1));
end

assign p_0_fu_103_p3 = {{trunc_ln414_reg_120}, {p_Result_i_reg_115}};

assign pt_portCheckListening_req_fifo_din = p_0_fu_103_p3;

assign pt_portCheckUsed_req_fifo_din = p_0_fu_103_p3;

assign tmp_i_nbreadreq_fu_44_p3 = rxEng2portTable_check_req_empty_n;

assign trunc_ln414_fu_91_p1 = rxEng2portTable_check_req_dout[6:0];

endmodule //toe_top_check_in_multiplexer
