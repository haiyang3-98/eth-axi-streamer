// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module udp_top_split_tx_meta (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        s_axis_tx_meta_V_TVALID,
        m_axis_tx_meta_V_TREADY,
        tx_udpMetaFifo_din,
        tx_udpMetaFifo_full_n,
        tx_udpMetaFifo_write,
        s_axis_tx_meta_V_TDATA,
        s_axis_tx_meta_V_TREADY,
        m_axis_tx_meta_V_TDATA,
        m_axis_tx_meta_V_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   s_axis_tx_meta_V_TVALID;
input   m_axis_tx_meta_V_TREADY;
output  [63:0] tx_udpMetaFifo_din;
input   tx_udpMetaFifo_full_n;
output   tx_udpMetaFifo_write;
input  [255:0] s_axis_tx_meta_V_TDATA;
output   s_axis_tx_meta_V_TREADY;
output  [63:0] m_axis_tx_meta_V_TDATA;
output   m_axis_tx_meta_V_TVALID;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg tx_udpMetaFifo_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] tmp_i_nbreadreq_fu_54_p3;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] tmp_i_reg_143;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg   [0:0] tmp_i_reg_143_pp0_iter1_reg;
wire    regslice_both_m_axis_tx_meta_V_U_apdone_blk;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg    s_axis_tx_meta_V_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    m_axis_tx_meta_V_TDATA_blk_n;
reg    tx_udpMetaFifo_blk_n;
reg   [15:0] meta_length_V_reg_147;
reg   [31:0] p_Result_i_reg_152;
reg   [31:0] tmp_reg_157;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] tempLen_V_fu_112_p2;
wire   [47:0] tmp_5_i_fu_117_p3;
wire   [48:0] or_ln_fu_129_p4;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_s_axis_tx_meta_V_U_apdone_blk;
wire   [255:0] s_axis_tx_meta_V_TDATA_int_regslice;
wire    s_axis_tx_meta_V_TVALID_int_regslice;
reg    s_axis_tx_meta_V_TREADY_int_regslice;
wire    regslice_both_s_axis_tx_meta_V_U_ack_in;
wire   [63:0] m_axis_tx_meta_V_TDATA_int_regslice;
reg    m_axis_tx_meta_V_TVALID_int_regslice;
wire    m_axis_tx_meta_V_TREADY_int_regslice;
wire    regslice_both_m_axis_tx_meta_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

udp_top_regslice_both #(
    .DataWidth( 256 ))
regslice_both_s_axis_tx_meta_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_tx_meta_V_TDATA),
    .vld_in(s_axis_tx_meta_V_TVALID),
    .ack_in(regslice_both_s_axis_tx_meta_V_U_ack_in),
    .data_out(s_axis_tx_meta_V_TDATA_int_regslice),
    .vld_out(s_axis_tx_meta_V_TVALID_int_regslice),
    .ack_out(s_axis_tx_meta_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_tx_meta_V_U_apdone_blk)
);

udp_top_regslice_both #(
    .DataWidth( 64 ))
regslice_both_m_axis_tx_meta_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(m_axis_tx_meta_V_TDATA_int_regslice),
    .vld_in(m_axis_tx_meta_V_TVALID_int_regslice),
    .ack_in(m_axis_tx_meta_V_TREADY_int_regslice),
    .data_out(m_axis_tx_meta_V_TDATA),
    .vld_out(regslice_both_m_axis_tx_meta_V_U_vld_out),
    .ack_out(m_axis_tx_meta_V_TREADY),
    .apdone_blk(regslice_both_m_axis_tx_meta_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_nbreadreq_fu_54_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        meta_length_V_reg_147 <= {{s_axis_tx_meta_V_TDATA_int_regslice[175:160]}};
        p_Result_i_reg_152 <= {{s_axis_tx_meta_V_TDATA_int_regslice[127:96]}};
        tmp_reg_157 <= {{s_axis_tx_meta_V_TDATA_int_regslice[159:128]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_i_reg_143 <= tmp_i_nbreadreq_fu_54_p3;
        tmp_i_reg_143_pp0_iter1_reg <= tmp_i_reg_143;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_i_reg_143_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_i_reg_143 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axis_tx_meta_V_TDATA_blk_n = m_axis_tx_meta_V_TREADY_int_regslice;
    end else begin
        m_axis_tx_meta_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_reg_143 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_tx_meta_V_TVALID_int_regslice = 1'b1;
    end else begin
        m_axis_tx_meta_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_i_nbreadreq_fu_54_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_done_reg == 1'b0))) begin
        s_axis_tx_meta_V_TDATA_blk_n = s_axis_tx_meta_V_TVALID_int_regslice;
    end else begin
        s_axis_tx_meta_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_nbreadreq_fu_54_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_tx_meta_V_TREADY_int_regslice = 1'b1;
    end else begin
        s_axis_tx_meta_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_i_reg_143 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tx_udpMetaFifo_blk_n = tx_udpMetaFifo_full_n;
    end else begin
        tx_udpMetaFifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_reg_143 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tx_udpMetaFifo_write = 1'b1;
    end else begin
        tx_udpMetaFifo_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_m_axis_tx_meta_V_U_apdone_blk == 1'b1) | ((tmp_i_reg_143_pp0_iter1_reg == 1'd1) & (m_axis_tx_meta_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tx_udpMetaFifo_full_n == 1'b0) & (tmp_i_reg_143 == 1'd1)) | ((tmp_i_reg_143 == 1'd1) & (m_axis_tx_meta_V_TREADY_int_regslice == 1'b0)))) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_54_p3 == 1'd1) & (s_axis_tx_meta_V_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_m_axis_tx_meta_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((tmp_i_reg_143_pp0_iter1_reg == 1'd1) & (m_axis_tx_meta_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((tx_udpMetaFifo_full_n == 1'b0) & (tmp_i_reg_143 == 1'd1)) | ((tmp_i_reg_143 == 1'd1) & (m_axis_tx_meta_V_TREADY_int_regslice == 1'b0)))) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_54_p3 == 1'd1) & (s_axis_tx_meta_V_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_m_axis_tx_meta_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((tmp_i_reg_143_pp0_iter1_reg == 1'd1) & (m_axis_tx_meta_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((tx_udpMetaFifo_full_n == 1'b0) & (tmp_i_reg_143 == 1'd1)) | ((tmp_i_reg_143 == 1'd1) & (m_axis_tx_meta_V_TREADY_int_regslice == 1'b0)))) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_54_p3 == 1'd1) & (s_axis_tx_meta_V_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_54_p3 == 1'd1) & (s_axis_tx_meta_V_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2_io = ((tmp_i_reg_143 == 1'd1) & (m_axis_tx_meta_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((tx_udpMetaFifo_full_n == 1'b0) & (tmp_i_reg_143 == 1'd1)) | ((tmp_i_reg_143 == 1'd1) & (m_axis_tx_meta_V_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state3_io = ((tmp_i_reg_143_pp0_iter1_reg == 1'd1) & (m_axis_tx_meta_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((regslice_both_m_axis_tx_meta_V_U_apdone_blk == 1'b1) | ((tmp_i_reg_143_pp0_iter1_reg == 1'd1) & (m_axis_tx_meta_V_TREADY_int_regslice == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign m_axis_tx_meta_V_TDATA_int_regslice = tmp_5_i_fu_117_p3;

assign m_axis_tx_meta_V_TVALID = regslice_both_m_axis_tx_meta_V_U_vld_out;

assign or_ln_fu_129_p4 = {{{{1'd1}, {tempLen_V_fu_112_p2}}}, {tmp_reg_157}};

assign s_axis_tx_meta_V_TREADY = regslice_both_s_axis_tx_meta_V_U_ack_in;

assign tempLen_V_fu_112_p2 = (meta_length_V_reg_147 + 16'd8);

assign tmp_5_i_fu_117_p3 = {{tempLen_V_fu_112_p2}, {p_Result_i_reg_152}};

assign tmp_i_nbreadreq_fu_54_p3 = s_axis_tx_meta_V_TVALID_int_regslice;

assign tx_udpMetaFifo_din = or_ln_fu_129_p4;

endmodule //udp_top_split_tx_meta
