// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module arp_server_subnet_top_arp_server_subnet_top_entry7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        myMacAddress_dout,
        myMacAddress_empty_n,
        myMacAddress_read,
        myIpAddress_dout,
        myIpAddress_empty_n,
        myIpAddress_read,
        myMacAddress_out_din,
        myMacAddress_out_full_n,
        myMacAddress_out_write,
        myIpAddress_out_din,
        myIpAddress_out_full_n,
        myIpAddress_out_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [47:0] myMacAddress_dout;
input   myMacAddress_empty_n;
output   myMacAddress_read;
input  [31:0] myIpAddress_dout;
input   myIpAddress_empty_n;
output   myIpAddress_read;
output  [47:0] myMacAddress_out_din;
input   myMacAddress_out_full_n;
output   myMacAddress_out_write;
output  [31:0] myIpAddress_out_din;
input   myIpAddress_out_full_n;
output   myIpAddress_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg myMacAddress_read;
reg myIpAddress_read;
reg myMacAddress_out_write;
reg myIpAddress_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    myMacAddress_blk_n;
reg    myIpAddress_blk_n;
reg    myMacAddress_out_blk_n;
reg    myIpAddress_out_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (myIpAddress_out_full_n == 1'b0) | (myMacAddress_out_full_n == 1'b0) | (myIpAddress_empty_n == 1'b0) | (myMacAddress_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (myIpAddress_out_full_n == 1'b0) | (myMacAddress_out_full_n == 1'b0) | (myIpAddress_empty_n == 1'b0) | (myMacAddress_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (myIpAddress_out_full_n == 1'b0) | (myMacAddress_out_full_n == 1'b0) | (myIpAddress_empty_n == 1'b0) | (myMacAddress_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        myIpAddress_blk_n = myIpAddress_empty_n;
    end else begin
        myIpAddress_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        myIpAddress_out_blk_n = myIpAddress_out_full_n;
    end else begin
        myIpAddress_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (myIpAddress_out_full_n == 1'b0) | (myMacAddress_out_full_n == 1'b0) | (myIpAddress_empty_n == 1'b0) | (myMacAddress_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        myIpAddress_out_write = 1'b1;
    end else begin
        myIpAddress_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (myIpAddress_out_full_n == 1'b0) | (myMacAddress_out_full_n == 1'b0) | (myIpAddress_empty_n == 1'b0) | (myMacAddress_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        myIpAddress_read = 1'b1;
    end else begin
        myIpAddress_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        myMacAddress_blk_n = myMacAddress_empty_n;
    end else begin
        myMacAddress_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        myMacAddress_out_blk_n = myMacAddress_out_full_n;
    end else begin
        myMacAddress_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (myIpAddress_out_full_n == 1'b0) | (myMacAddress_out_full_n == 1'b0) | (myIpAddress_empty_n == 1'b0) | (myMacAddress_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        myMacAddress_out_write = 1'b1;
    end else begin
        myMacAddress_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (myIpAddress_out_full_n == 1'b0) | (myMacAddress_out_full_n == 1'b0) | (myIpAddress_empty_n == 1'b0) | (myMacAddress_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        myMacAddress_read = 1'b1;
    end else begin
        myMacAddress_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (myIpAddress_out_full_n == 1'b0) | (myMacAddress_out_full_n == 1'b0) | (myIpAddress_empty_n == 1'b0) | (myMacAddress_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign myIpAddress_out_din = myIpAddress_dout;

assign myMacAddress_out_din = myMacAddress_dout;

endmodule //arp_server_subnet_top_arp_server_subnet_top_entry7
