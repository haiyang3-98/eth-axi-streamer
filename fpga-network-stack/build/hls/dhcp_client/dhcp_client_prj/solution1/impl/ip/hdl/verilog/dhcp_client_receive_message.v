// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dhcp_client_receive_message (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        myMacAddress_dout,
        myMacAddress_empty_n,
        myMacAddress_read,
        s_axis_rx_data_TVALID,
        s_axis_rx_metadata_V_TVALID,
        dhcp_replyMetaFifo_din,
        dhcp_replyMetaFifo_full_n,
        dhcp_replyMetaFifo_write,
        s_axis_rx_metadata_V_TDATA,
        s_axis_rx_metadata_V_TREADY,
        s_axis_rx_data_TDATA,
        s_axis_rx_data_TREADY,
        s_axis_rx_data_TKEEP,
        s_axis_rx_data_TSTRB,
        s_axis_rx_data_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [47:0] myMacAddress_dout;
input   myMacAddress_empty_n;
output   myMacAddress_read;
input   s_axis_rx_data_TVALID;
input   s_axis_rx_metadata_V_TVALID;
output  [127:0] dhcp_replyMetaFifo_din;
input   dhcp_replyMetaFifo_full_n;
output   dhcp_replyMetaFifo_write;
input  [127:0] s_axis_rx_metadata_V_TDATA;
output   s_axis_rx_metadata_V_TREADY;
input  [63:0] s_axis_rx_data_TDATA;
output   s_axis_rx_data_TREADY;
input  [7:0] s_axis_rx_data_TKEEP;
input  [7:0] s_axis_rx_data_TSTRB;
input  [0:0] s_axis_rx_data_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg myMacAddress_read;
reg dhcp_replyMetaFifo_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] tmp_nbreadreq_fu_116_p6;
wire   [0:0] tmp_i_i_i_nbreadreq_fu_142_p3;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] tmp_reg_517;
reg   [0:0] tmp_reg_517_pp0_iter1_reg;
reg   [0:0] and_ln118_2_reg_546;
reg    ap_predicate_op90_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [5:0] rm_wordCount_V;
reg   [0:0] rm_isReply;
reg   [0:0] rm_correctMac;
reg   [0:0] rm_isDHCP;
reg   [31:0] meta_identifier_V;
reg   [31:0] meta_assignedIpAddress_V;
reg   [31:0] meta_serverAddress_V;
reg   [7:0] meta_type_V_1;
reg    s_axis_rx_metadata_V_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    s_axis_rx_data_TDATA_blk_n;
reg    myMacAddress_blk_n;
reg    dhcp_replyMetaFifo_blk_n;
reg   [47:0] p_Val2_2_reg_511;
reg   [63:0] currWord_data_V_reg_521;
reg   [0:0] currWord_last_V_reg_531;
wire   [0:0] and_ln118_2_fu_458_p2;
reg    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_phi_mux_rm_isReply_loc_0_i_i_i_phi_fu_166_p16;
wire   [0:0] ap_phi_reg_pp0_iter1_rm_isReply_loc_0_i_i_i_reg_163;
wire   [5:0] rm_wordCount_V_load_load_fu_273_p1;
wire   [0:0] icmp_ln870_2_fu_392_p2;
wire   [0:0] icmp_ln870_fu_416_p2;
reg   [0:0] ap_phi_mux_rm_correctMac_loc_0_i_i_i_phi_fu_187_p16;
wire   [0:0] ap_phi_reg_pp0_iter1_rm_correctMac_loc_0_i_i_i_reg_184;
wire   [0:0] and_ln93_1_fu_339_p2;
wire   [0:0] and_ln93_fu_361_p2;
reg   [0:0] ap_phi_mux_rm_isDHCP_loc_0_i_i_i_phi_fu_209_p16;
wire   [0:0] ap_phi_reg_pp0_iter1_rm_isDHCP_loc_0_i_i_i_reg_206;
wire   [0:0] icmp_ln870_3_fu_308_p2;
reg   [0:0] ap_phi_mux_rm_wordCount_V_flag_0_i_i_i_phi_fu_231_p6;
reg   [0:0] ap_phi_reg_pp0_iter1_rm_wordCount_V_flag_0_i_i_i_reg_227;
wire   [0:0] ap_phi_reg_pp0_iter0_rm_wordCount_V_flag_0_i_i_i_reg_227;
reg   [5:0] ap_phi_mux_rm_wordCount_V_new_0_i_i_i_phi_fu_246_p6;
wire   [5:0] ap_phi_reg_pp0_iter1_rm_wordCount_V_new_0_i_i_i_reg_242;
wire   [5:0] select_ln118_fu_464_p3;
wire   [31:0] grp_fu_256_p4;
wire   [31:0] trunc_ln674_3_fu_374_p1;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] p_Result_10_i_i_i_fu_321_p4;
wire   [15:0] trunc_ln674_5_fu_330_p1;
wire   [0:0] icmp_ln870_5_fu_333_p2;
wire   [31:0] trunc_ln674_4_fu_352_p1;
wire   [0:0] icmp_ln870_4_fu_355_p2;
wire   [15:0] trunc_ln674_2_fu_389_p1;
wire   [7:0] trunc_ln674_fu_413_p1;
wire   [0:0] and_ln118_1_fu_452_p2;
wire   [0:0] and_ln118_fu_447_p2;
wire   [5:0] add_ln691_fu_441_p2;
wire   [103:0] tmp_1_i_i_i_fu_494_p5;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_s_axis_rx_metadata_V_U_apdone_blk;
wire   [127:0] s_axis_rx_metadata_V_TDATA_int_regslice;
wire    s_axis_rx_metadata_V_TVALID_int_regslice;
reg    s_axis_rx_metadata_V_TREADY_int_regslice;
wire    regslice_both_s_axis_rx_metadata_V_U_ack_in;
wire    regslice_both_s_axis_rx_data_V_data_V_U_apdone_blk;
wire   [63:0] s_axis_rx_data_TDATA_int_regslice;
wire    s_axis_rx_data_TVALID_int_regslice;
reg    s_axis_rx_data_TREADY_int_regslice;
wire    regslice_both_s_axis_rx_data_V_data_V_U_ack_in;
wire    regslice_both_s_axis_rx_data_V_keep_V_U_apdone_blk;
wire   [7:0] s_axis_rx_data_TKEEP_int_regslice;
wire    regslice_both_s_axis_rx_data_V_keep_V_U_vld_out;
wire    regslice_both_s_axis_rx_data_V_keep_V_U_ack_in;
wire    regslice_both_s_axis_rx_data_V_strb_V_U_apdone_blk;
wire   [7:0] s_axis_rx_data_TSTRB_int_regslice;
wire    regslice_both_s_axis_rx_data_V_strb_V_U_vld_out;
wire    regslice_both_s_axis_rx_data_V_strb_V_U_ack_in;
wire    regslice_both_s_axis_rx_data_V_last_V_U_apdone_blk;
wire   [0:0] s_axis_rx_data_TLAST_int_regslice;
wire    regslice_both_s_axis_rx_data_V_last_V_U_vld_out;
wire    regslice_both_s_axis_rx_data_V_last_V_U_ack_in;
reg    ap_condition_82;
reg    ap_condition_463;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 rm_wordCount_V = 6'd0;
#0 rm_isReply = 1'd0;
#0 rm_correctMac = 1'd1;
#0 rm_isDHCP = 1'd0;
#0 meta_identifier_V = 32'd0;
#0 meta_assignedIpAddress_V = 32'd0;
#0 meta_serverAddress_V = 32'd0;
#0 meta_type_V_1 = 8'd0;
end

dhcp_client_regslice_both #(
    .DataWidth( 128 ))
regslice_both_s_axis_rx_metadata_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_rx_metadata_V_TDATA),
    .vld_in(s_axis_rx_metadata_V_TVALID),
    .ack_in(regslice_both_s_axis_rx_metadata_V_U_ack_in),
    .data_out(s_axis_rx_metadata_V_TDATA_int_regslice),
    .vld_out(s_axis_rx_metadata_V_TVALID_int_regslice),
    .ack_out(s_axis_rx_metadata_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_rx_metadata_V_U_apdone_blk)
);

dhcp_client_regslice_both #(
    .DataWidth( 64 ))
regslice_both_s_axis_rx_data_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_rx_data_TDATA),
    .vld_in(s_axis_rx_data_TVALID),
    .ack_in(regslice_both_s_axis_rx_data_V_data_V_U_ack_in),
    .data_out(s_axis_rx_data_TDATA_int_regslice),
    .vld_out(s_axis_rx_data_TVALID_int_regslice),
    .ack_out(s_axis_rx_data_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_rx_data_V_data_V_U_apdone_blk)
);

dhcp_client_regslice_both #(
    .DataWidth( 8 ))
regslice_both_s_axis_rx_data_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_rx_data_TKEEP),
    .vld_in(s_axis_rx_data_TVALID),
    .ack_in(regslice_both_s_axis_rx_data_V_keep_V_U_ack_in),
    .data_out(s_axis_rx_data_TKEEP_int_regslice),
    .vld_out(regslice_both_s_axis_rx_data_V_keep_V_U_vld_out),
    .ack_out(s_axis_rx_data_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_rx_data_V_keep_V_U_apdone_blk)
);

dhcp_client_regslice_both #(
    .DataWidth( 8 ))
regslice_both_s_axis_rx_data_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_rx_data_TSTRB),
    .vld_in(s_axis_rx_data_TVALID),
    .ack_in(regslice_both_s_axis_rx_data_V_strb_V_U_ack_in),
    .data_out(s_axis_rx_data_TSTRB_int_regslice),
    .vld_out(regslice_both_s_axis_rx_data_V_strb_V_U_vld_out),
    .ack_out(s_axis_rx_data_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_rx_data_V_strb_V_U_apdone_blk)
);

dhcp_client_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_rx_data_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_rx_data_TLAST),
    .vld_in(s_axis_rx_data_TVALID),
    .ack_in(regslice_both_s_axis_rx_data_V_last_V_U_ack_in),
    .data_out(s_axis_rx_data_TLAST_int_regslice),
    .vld_out(regslice_both_s_axis_rx_data_V_last_V_U_vld_out),
    .ack_out(s_axis_rx_data_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_rx_data_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_82)) begin
        if ((tmp_nbreadreq_fu_116_p6 == 1'd0)) begin
            ap_phi_reg_pp0_iter1_rm_wordCount_V_flag_0_i_i_i_reg_227 <= 1'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_rm_wordCount_V_flag_0_i_i_i_reg_227 <= ap_phi_reg_pp0_iter0_rm_wordCount_V_flag_0_i_i_i_reg_227;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_463)) begin
        if ((rm_wordCount_V_load_load_fu_273_p1 == 6'd0)) begin
            rm_correctMac <= 1'd1;
        end else if ((rm_wordCount_V_load_load_fu_273_p1 == 6'd3)) begin
            rm_correctMac <= and_ln93_fu_361_p2;
        end else if ((rm_wordCount_V_load_load_fu_273_p1 == 6'd4)) begin
            rm_correctMac <= and_ln93_1_fu_339_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_517 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln118_2_reg_546 <= and_ln118_2_fu_458_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_116_p6 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        currWord_data_V_reg_521 <= s_axis_rx_data_TDATA_int_regslice;
        currWord_last_V_reg_531 <= s_axis_rx_data_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_517 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd2))) begin
        meta_assignedIpAddress_V <= trunc_ln674_3_fu_374_p1;
        meta_serverAddress_V <= {{currWord_data_V_reg_521[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_517 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd0))) begin
        meta_identifier_V <= {{currWord_data_V_reg_521[63:32]}};
        rm_isReply <= icmp_ln870_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_517 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln870_2_fu_392_p2 == 1'd1) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd30))) begin
        meta_type_V_1 <= {{currWord_data_V_reg_521[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Val2_2_reg_511 <= myMacAddress_dout;
        tmp_reg_517 <= tmp_nbreadreq_fu_116_p6;
        tmp_reg_517_pp0_iter1_reg <= tmp_reg_517;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_517 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd29))) begin
        rm_isDHCP <= icmp_ln870_3_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_phi_mux_rm_wordCount_V_flag_0_i_i_i_phi_fu_231_p6 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rm_wordCount_V <= ap_phi_mux_rm_wordCount_V_new_0_i_i_i_phi_fu_246_p6;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_517 == 1'd1) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd0))) begin
        ap_phi_mux_rm_correctMac_loc_0_i_i_i_phi_fu_187_p16 = 1'd1;
    end else if (((tmp_reg_517 == 1'd1) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd3))) begin
        ap_phi_mux_rm_correctMac_loc_0_i_i_i_phi_fu_187_p16 = and_ln93_fu_361_p2;
    end else if (((tmp_reg_517 == 1'd1) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd4))) begin
        ap_phi_mux_rm_correctMac_loc_0_i_i_i_phi_fu_187_p16 = and_ln93_1_fu_339_p2;
    end else if (((~(rm_wordCount_V_load_load_fu_273_p1 == 6'd29) & ~(rm_wordCount_V_load_load_fu_273_p1 == 6'd4) & ~(rm_wordCount_V_load_load_fu_273_p1 == 6'd3) & ~(rm_wordCount_V_load_load_fu_273_p1 == 6'd2) & ~(rm_wordCount_V_load_load_fu_273_p1 == 6'd30) & ~(rm_wordCount_V_load_load_fu_273_p1 == 6'd0) & (tmp_reg_517 == 1'd1)) | ((tmp_reg_517 == 1'd1) & (icmp_ln870_2_fu_392_p2 == 1'd0) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd30)) | ((tmp_reg_517 == 1'd1) & (icmp_ln870_2_fu_392_p2 == 1'd1) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd30)) | ((tmp_reg_517 == 1'd1) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd29)) | ((tmp_reg_517 == 1'd1) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd2)))) begin
        ap_phi_mux_rm_correctMac_loc_0_i_i_i_phi_fu_187_p16 = rm_correctMac;
    end else begin
        ap_phi_mux_rm_correctMac_loc_0_i_i_i_phi_fu_187_p16 = ap_phi_reg_pp0_iter1_rm_correctMac_loc_0_i_i_i_reg_184;
    end
end

always @ (*) begin
    if (((tmp_reg_517 == 1'd1) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd29))) begin
        ap_phi_mux_rm_isDHCP_loc_0_i_i_i_phi_fu_209_p16 = icmp_ln870_3_fu_308_p2;
    end else if (((~(rm_wordCount_V_load_load_fu_273_p1 == 6'd29) & ~(rm_wordCount_V_load_load_fu_273_p1 == 6'd4) & ~(rm_wordCount_V_load_load_fu_273_p1 == 6'd3) & ~(rm_wordCount_V_load_load_fu_273_p1 == 6'd2) & ~(rm_wordCount_V_load_load_fu_273_p1 == 6'd30) & ~(rm_wordCount_V_load_load_fu_273_p1 == 6'd0) & (tmp_reg_517 == 1'd1)) | ((tmp_reg_517 == 1'd1) & (icmp_ln870_2_fu_392_p2 == 1'd0) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd30)) | ((tmp_reg_517 == 1'd1) & (icmp_ln870_2_fu_392_p2 == 1'd1) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd30)) | ((tmp_reg_517 == 1'd1) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd4)) | ((tmp_reg_517 == 1'd1) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd3)) | ((tmp_reg_517 == 1'd1) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd2)) | ((tmp_reg_517 == 1'd1) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd0)))) begin
        ap_phi_mux_rm_isDHCP_loc_0_i_i_i_phi_fu_209_p16 = rm_isDHCP;
    end else begin
        ap_phi_mux_rm_isDHCP_loc_0_i_i_i_phi_fu_209_p16 = ap_phi_reg_pp0_iter1_rm_isDHCP_loc_0_i_i_i_reg_206;
    end
end

always @ (*) begin
    if (((tmp_reg_517 == 1'd1) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd0))) begin
        ap_phi_mux_rm_isReply_loc_0_i_i_i_phi_fu_166_p16 = icmp_ln870_fu_416_p2;
    end else if (((~(rm_wordCount_V_load_load_fu_273_p1 == 6'd29) & ~(rm_wordCount_V_load_load_fu_273_p1 == 6'd4) & ~(rm_wordCount_V_load_load_fu_273_p1 == 6'd3) & ~(rm_wordCount_V_load_load_fu_273_p1 == 6'd2) & ~(rm_wordCount_V_load_load_fu_273_p1 == 6'd30) & ~(rm_wordCount_V_load_load_fu_273_p1 == 6'd0) & (tmp_reg_517 == 1'd1)) | ((tmp_reg_517 == 1'd1) & (icmp_ln870_2_fu_392_p2 == 1'd0) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd30)) | ((tmp_reg_517 == 1'd1) & (icmp_ln870_2_fu_392_p2 == 1'd1) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd30)) | ((tmp_reg_517 == 1'd1) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd29)) | ((tmp_reg_517 == 1'd1) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd4)) | ((tmp_reg_517 == 1'd1) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd3)) | ((tmp_reg_517 == 1'd1) & (rm_wordCount_V_load_load_fu_273_p1 == 6'd2)))) begin
        ap_phi_mux_rm_isReply_loc_0_i_i_i_phi_fu_166_p16 = rm_isReply;
    end else begin
        ap_phi_mux_rm_isReply_loc_0_i_i_i_phi_fu_166_p16 = ap_phi_reg_pp0_iter1_rm_isReply_loc_0_i_i_i_reg_163;
    end
end

always @ (*) begin
    if ((((1'd0 == and_ln118_2_fu_458_p2) & (tmp_reg_517 == 1'd1)) | ((tmp_reg_517 == 1'd1) & (1'd1 == and_ln118_2_fu_458_p2)))) begin
        ap_phi_mux_rm_wordCount_V_flag_0_i_i_i_phi_fu_231_p6 = 1'd1;
    end else begin
        ap_phi_mux_rm_wordCount_V_flag_0_i_i_i_phi_fu_231_p6 = ap_phi_reg_pp0_iter1_rm_wordCount_V_flag_0_i_i_i_reg_227;
    end
end

always @ (*) begin
    if ((tmp_reg_517 == 1'd1)) begin
        if ((1'd0 == and_ln118_2_fu_458_p2)) begin
            ap_phi_mux_rm_wordCount_V_new_0_i_i_i_phi_fu_246_p6 = select_ln118_fu_464_p3;
        end else if ((1'd1 == and_ln118_2_fu_458_p2)) begin
            ap_phi_mux_rm_wordCount_V_new_0_i_i_i_phi_fu_246_p6 = 6'd0;
        end else begin
            ap_phi_mux_rm_wordCount_V_new_0_i_i_i_phi_fu_246_p6 = ap_phi_reg_pp0_iter1_rm_wordCount_V_new_0_i_i_i_reg_242;
        end
    end else begin
        ap_phi_mux_rm_wordCount_V_new_0_i_i_i_phi_fu_246_p6 = ap_phi_reg_pp0_iter1_rm_wordCount_V_new_0_i_i_i_reg_242;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op90_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dhcp_replyMetaFifo_blk_n = dhcp_replyMetaFifo_full_n;
    end else begin
        dhcp_replyMetaFifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op90_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dhcp_replyMetaFifo_write = 1'b1;
    end else begin
        dhcp_replyMetaFifo_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_done_reg == 1'b0))) begin
        myMacAddress_blk_n = myMacAddress_empty_n;
    end else begin
        myMacAddress_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        myMacAddress_read = 1'b1;
    end else begin
        myMacAddress_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_nbreadreq_fu_116_p6 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_done_reg == 1'b0))) begin
        s_axis_rx_data_TDATA_blk_n = s_axis_rx_data_TVALID_int_regslice;
    end else begin
        s_axis_rx_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_116_p6 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_rx_data_TREADY_int_regslice = 1'b1;
    end else begin
        s_axis_rx_data_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_i_i_i_nbreadreq_fu_142_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_done_reg == 1'b0))) begin
        s_axis_rx_metadata_V_TDATA_blk_n = s_axis_rx_metadata_V_TVALID_int_regslice;
    end else begin
        s_axis_rx_metadata_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_i_i_nbreadreq_fu_142_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_rx_metadata_V_TREADY_int_regslice = 1'b1;
    end else begin
        s_axis_rx_metadata_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln691_fu_441_p2 = (rm_wordCount_V + 6'd1);

assign and_ln118_1_fu_452_p2 = (ap_phi_mux_rm_isDHCP_loc_0_i_i_i_phi_fu_209_p16 & ap_phi_mux_rm_correctMac_loc_0_i_i_i_phi_fu_187_p16);

assign and_ln118_2_fu_458_p2 = (and_ln118_fu_447_p2 & and_ln118_1_fu_452_p2);

assign and_ln118_fu_447_p2 = (currWord_last_V_reg_531 & ap_phi_mux_rm_isReply_loc_0_i_i_i_phi_fu_166_p16);

assign and_ln93_1_fu_339_p2 = (rm_correctMac & icmp_ln870_5_fu_333_p2);

assign and_ln93_fu_361_p2 = (rm_correctMac & icmp_ln870_4_fu_355_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_predicate_op90_write_state3 == 1'b1) & (dhcp_replyMetaFifo_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_start == 1'b1) & ((myMacAddress_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_i_i_i_nbreadreq_fu_142_p3 == 1'd1) & (s_axis_rx_metadata_V_TVALID_int_regslice == 1'b0)) | ((tmp_nbreadreq_fu_116_p6 == 1'd1) & (s_axis_rx_data_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_predicate_op90_write_state3 == 1'b1) & (dhcp_replyMetaFifo_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_start == 1'b1) & ((myMacAddress_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_i_i_i_nbreadreq_fu_142_p3 == 1'd1) & (s_axis_rx_metadata_V_TVALID_int_regslice == 1'b0)) | ((tmp_nbreadreq_fu_116_p6 == 1'd1) & (s_axis_rx_data_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_predicate_op90_write_state3 == 1'b1) & (dhcp_replyMetaFifo_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_start == 1'b1) & ((myMacAddress_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_i_i_i_nbreadreq_fu_142_p3 == 1'd1) & (s_axis_rx_metadata_V_TVALID_int_regslice == 1'b0)) | ((tmp_nbreadreq_fu_116_p6 == 1'd1) & (s_axis_rx_data_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((myMacAddress_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_i_i_i_nbreadreq_fu_142_p3 == 1'd1) & (s_axis_rx_metadata_V_TVALID_int_regslice == 1'b0)) | ((tmp_nbreadreq_fu_116_p6 == 1'd1) & (s_axis_rx_data_TVALID_int_regslice == 1'b0)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op90_write_state3 == 1'b1) & (dhcp_replyMetaFifo_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_463 = ((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_517 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_82 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter0_rm_wordCount_V_flag_0_i_i_i_reg_227 = 'bx;

assign ap_phi_reg_pp0_iter1_rm_correctMac_loc_0_i_i_i_reg_184 = 'bx;

assign ap_phi_reg_pp0_iter1_rm_isDHCP_loc_0_i_i_i_reg_206 = 'bx;

assign ap_phi_reg_pp0_iter1_rm_isReply_loc_0_i_i_i_reg_163 = 'bx;

assign ap_phi_reg_pp0_iter1_rm_wordCount_V_new_0_i_i_i_reg_242 = 'bx;

always @ (*) begin
    ap_predicate_op90_write_state3 = ((tmp_reg_517_pp0_iter1_reg == 1'd1) & (1'd1 == and_ln118_2_reg_546));
end

assign dhcp_replyMetaFifo_din = tmp_1_i_i_i_fu_494_p5;

assign grp_fu_256_p4 = {{currWord_data_V_reg_521[63:32]}};

assign icmp_ln870_2_fu_392_p2 = ((trunc_ln674_2_fu_389_p1 == 16'd309) ? 1'b1 : 1'b0);

assign icmp_ln870_3_fu_308_p2 = ((grp_fu_256_p4 == 32'd1666417251) ? 1'b1 : 1'b0);

assign icmp_ln870_4_fu_355_p2 = ((trunc_ln674_4_fu_352_p1 == grp_fu_256_p4) ? 1'b1 : 1'b0);

assign icmp_ln870_5_fu_333_p2 = ((p_Result_10_i_i_i_fu_321_p4 == trunc_ln674_5_fu_330_p1) ? 1'b1 : 1'b0);

assign icmp_ln870_fu_416_p2 = ((trunc_ln674_fu_413_p1 == 8'd2) ? 1'b1 : 1'b0);

assign p_Result_10_i_i_i_fu_321_p4 = {{p_Val2_2_reg_511[47:32]}};

assign rm_wordCount_V_load_load_fu_273_p1 = rm_wordCount_V;

assign s_axis_rx_data_TREADY = regslice_both_s_axis_rx_data_V_data_V_U_ack_in;

assign s_axis_rx_metadata_V_TREADY = regslice_both_s_axis_rx_metadata_V_U_ack_in;

assign select_ln118_fu_464_p3 = ((currWord_last_V_reg_531[0:0] == 1'b1) ? 6'd0 : add_ln691_fu_441_p2);

assign tmp_1_i_i_i_fu_494_p5 = {{{{meta_type_V_1}, {meta_serverAddress_V}}, {meta_assignedIpAddress_V}}, {meta_identifier_V}};

assign tmp_i_i_i_nbreadreq_fu_142_p3 = s_axis_rx_metadata_V_TVALID_int_regslice;

assign tmp_nbreadreq_fu_116_p6 = s_axis_rx_data_TVALID_int_regslice;

assign trunc_ln674_2_fu_389_p1 = currWord_data_V_reg_521[15:0];

assign trunc_ln674_3_fu_374_p1 = currWord_data_V_reg_521[31:0];

assign trunc_ln674_4_fu_352_p1 = p_Val2_2_reg_511[31:0];

assign trunc_ln674_5_fu_330_p1 = currWord_data_V_reg_521[15:0];

assign trunc_ln674_fu_413_p1 = currWord_data_V_reg_521[7:0];

endmodule //dhcp_client_receive_message
