-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity echo_server_application is
port (
    m_axis_listen_port_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    s_axis_listen_port_status_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    s_axis_notifications_V_TDATA : IN STD_LOGIC_VECTOR (95 downto 0);
    m_axis_read_package_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_axis_rx_metadata_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    s_axis_rx_data_V_TDATA : IN STD_LOGIC_VECTOR (1023 downto 0);
    m_axis_open_connection_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_axis_open_status_V_TDATA : IN STD_LOGIC_VECTOR (95 downto 0);
    m_axis_close_connection_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axis_tx_metadata_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axis_tx_data_V_TDATA : OUT STD_LOGIC_VECTOR (1023 downto 0);
    s_axis_tx_status_V_TDATA : IN STD_LOGIC_VECTOR (95 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axis_tx_metadata_V_TVALID : OUT STD_LOGIC;
    m_axis_tx_metadata_V_TREADY : IN STD_LOGIC;
    m_axis_tx_data_V_TVALID : OUT STD_LOGIC;
    m_axis_tx_data_V_TREADY : IN STD_LOGIC;
    s_axis_rx_metadata_V_TVALID : IN STD_LOGIC;
    s_axis_rx_metadata_V_TREADY : OUT STD_LOGIC;
    s_axis_rx_data_V_TVALID : IN STD_LOGIC;
    s_axis_rx_data_V_TREADY : OUT STD_LOGIC;
    m_axis_listen_port_V_TVALID : OUT STD_LOGIC;
    m_axis_listen_port_V_TREADY : IN STD_LOGIC;
    s_axis_listen_port_status_V_TVALID : IN STD_LOGIC;
    s_axis_listen_port_status_V_TREADY : OUT STD_LOGIC;
    s_axis_notifications_V_TVALID : IN STD_LOGIC;
    s_axis_notifications_V_TREADY : OUT STD_LOGIC;
    m_axis_read_package_V_TVALID : OUT STD_LOGIC;
    m_axis_read_package_V_TREADY : IN STD_LOGIC;
    m_axis_open_connection_V_TVALID : OUT STD_LOGIC;
    m_axis_open_connection_V_TREADY : IN STD_LOGIC;
    s_axis_open_status_V_TVALID : IN STD_LOGIC;
    s_axis_open_status_V_TREADY : OUT STD_LOGIC;
    m_axis_close_connection_V_TVALID : OUT STD_LOGIC;
    m_axis_close_connection_V_TREADY : IN STD_LOGIC;
    s_axis_tx_status_V_TVALID : IN STD_LOGIC;
    s_axis_tx_status_V_TREADY : OUT STD_LOGIC );
end;


architecture behav of echo_server_application is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "echo_server_application_echo_server_application,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu3p-ffvc1517-2-i,HLS_INPUT_CLOCK=6.400000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=1.860000,HLS_SYN_LAT=2,HLS_SYN_TPT=2,HLS_SYN_MEM=29,HLS_SYN_DSP=0,HLS_SYN_FF=3251,HLS_SYN_LUT=1573,HLS_VERSION=2020_2}";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1024_lc_1 : STD_LOGIC_VECTOR (1023 downto
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal client_U0_ap_start : STD_LOGIC;
    signal client_U0_ap_done : STD_LOGIC;
    signal client_U0_ap_continue : STD_LOGIC;
    signal client_U0_ap_idle : STD_LOGIC;
    signal client_U0_ap_ready : STD_LOGIC;
    signal client_U0_esa_sessionidFifo_read : STD_LOGIC;
    signal client_U0_esa_lengthFifo_read : STD_LOGIC;
    signal client_U0_esa_dataFifo_read : STD_LOGIC;
    signal client_U0_m_axis_tx_metadata_V_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal client_U0_m_axis_tx_metadata_V_TVALID : STD_LOGIC;
    signal client_U0_m_axis_tx_data_V_TDATA : STD_LOGIC_VECTOR (1023 downto 0);
    signal client_U0_m_axis_tx_data_V_TVALID : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal server_U0_ap_start : STD_LOGIC;
    signal server_U0_ap_done : STD_LOGIC;
    signal server_U0_ap_continue : STD_LOGIC;
    signal server_U0_ap_idle : STD_LOGIC;
    signal server_U0_ap_ready : STD_LOGIC;
    signal server_U0_esa_sessionidFifo_din : STD_LOGIC_VECTOR (15 downto 0);
    signal server_U0_esa_sessionidFifo_write : STD_LOGIC;
    signal server_U0_esa_dataFifo_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal server_U0_esa_dataFifo_write : STD_LOGIC;
    signal server_U0_s_axis_rx_metadata_V_TREADY : STD_LOGIC;
    signal server_U0_s_axis_rx_data_V_TREADY : STD_LOGIC;
    signal open_port_U0_ap_start : STD_LOGIC;
    signal open_port_U0_ap_done : STD_LOGIC;
    signal open_port_U0_ap_continue : STD_LOGIC;
    signal open_port_U0_ap_idle : STD_LOGIC;
    signal open_port_U0_ap_ready : STD_LOGIC;
    signal open_port_U0_m_axis_listen_port_V_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal open_port_U0_m_axis_listen_port_V_TVALID : STD_LOGIC;
    signal open_port_U0_s_axis_listen_port_status_V_TREADY : STD_LOGIC;
    signal notification_handler_U0_ap_start : STD_LOGIC;
    signal notification_handler_U0_ap_done : STD_LOGIC;
    signal notification_handler_U0_ap_continue : STD_LOGIC;
    signal notification_handler_U0_ap_idle : STD_LOGIC;
    signal notification_handler_U0_ap_ready : STD_LOGIC;
    signal notification_handler_U0_esa_lengthFifo_din : STD_LOGIC_VECTOR (15 downto 0);
    signal notification_handler_U0_esa_lengthFifo_write : STD_LOGIC;
    signal notification_handler_U0_s_axis_notifications_V_TREADY : STD_LOGIC;
    signal notification_handler_U0_m_axis_read_package_V_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal notification_handler_U0_m_axis_read_package_V_TVALID : STD_LOGIC;
    signal dummy_U0_ap_start : STD_LOGIC;
    signal dummy_U0_ap_done : STD_LOGIC;
    signal dummy_U0_ap_continue : STD_LOGIC;
    signal dummy_U0_ap_idle : STD_LOGIC;
    signal dummy_U0_ap_ready : STD_LOGIC;
    signal dummy_U0_m_axis_open_connection_V_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal dummy_U0_m_axis_open_connection_V_TVALID : STD_LOGIC;
    signal dummy_U0_s_axis_open_status_V_TREADY : STD_LOGIC;
    signal dummy_U0_m_axis_close_connection_V_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal dummy_U0_m_axis_close_connection_V_TVALID : STD_LOGIC;
    signal dummy_U0_s_axis_tx_status_V_TREADY : STD_LOGIC;
    signal esa_sessionidFifo_full_n : STD_LOGIC;
    signal esa_sessionidFifo_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal esa_sessionidFifo_empty_n : STD_LOGIC;
    signal esa_lengthFifo_full_n : STD_LOGIC;
    signal esa_lengthFifo_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal esa_lengthFifo_empty_n : STD_LOGIC;
    signal esa_dataFifo_full_n : STD_LOGIC;
    signal esa_dataFifo_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal esa_dataFifo_empty_n : STD_LOGIC;

    component echo_server_application_client IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        esa_sessionidFifo_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        esa_sessionidFifo_empty_n : IN STD_LOGIC;
        esa_sessionidFifo_read : OUT STD_LOGIC;
        esa_lengthFifo_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        esa_lengthFifo_empty_n : IN STD_LOGIC;
        esa_lengthFifo_read : OUT STD_LOGIC;
        m_axis_tx_metadata_V_TREADY : IN STD_LOGIC;
        esa_dataFifo_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        esa_dataFifo_empty_n : IN STD_LOGIC;
        esa_dataFifo_read : OUT STD_LOGIC;
        m_axis_tx_data_V_TREADY : IN STD_LOGIC;
        m_axis_tx_metadata_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axis_tx_metadata_V_TVALID : OUT STD_LOGIC;
        m_axis_tx_data_V_TDATA : OUT STD_LOGIC_VECTOR (1023 downto 0);
        m_axis_tx_data_V_TVALID : OUT STD_LOGIC );
    end component;


    component echo_server_application_server IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_axis_rx_metadata_V_TVALID : IN STD_LOGIC;
        s_axis_rx_data_V_TVALID : IN STD_LOGIC;
        esa_sessionidFifo_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        esa_sessionidFifo_full_n : IN STD_LOGIC;
        esa_sessionidFifo_write : OUT STD_LOGIC;
        esa_dataFifo_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        esa_dataFifo_full_n : IN STD_LOGIC;
        esa_dataFifo_write : OUT STD_LOGIC;
        s_axis_rx_metadata_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        s_axis_rx_metadata_V_TREADY : OUT STD_LOGIC;
        s_axis_rx_data_V_TDATA : IN STD_LOGIC_VECTOR (1023 downto 0);
        s_axis_rx_data_V_TREADY : OUT STD_LOGIC );
    end component;


    component echo_server_application_open_port IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_axis_listen_port_status_V_TVALID : IN STD_LOGIC;
        m_axis_listen_port_V_TREADY : IN STD_LOGIC;
        m_axis_listen_port_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axis_listen_port_V_TVALID : OUT STD_LOGIC;
        s_axis_listen_port_status_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        s_axis_listen_port_status_V_TREADY : OUT STD_LOGIC );
    end component;


    component echo_server_application_notification_handler IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_axis_notifications_V_TVALID : IN STD_LOGIC;
        m_axis_read_package_V_TREADY : IN STD_LOGIC;
        esa_lengthFifo_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        esa_lengthFifo_full_n : IN STD_LOGIC;
        esa_lengthFifo_write : OUT STD_LOGIC;
        s_axis_notifications_V_TDATA : IN STD_LOGIC_VECTOR (95 downto 0);
        s_axis_notifications_V_TREADY : OUT STD_LOGIC;
        m_axis_read_package_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axis_read_package_V_TVALID : OUT STD_LOGIC );
    end component;


    component echo_server_application_dummy IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_axis_open_status_V_TVALID : IN STD_LOGIC;
        s_axis_tx_status_V_TVALID : IN STD_LOGIC;
        m_axis_open_connection_V_TREADY : IN STD_LOGIC;
        m_axis_close_connection_V_TREADY : IN STD_LOGIC;
        m_axis_open_connection_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_open_connection_V_TVALID : OUT STD_LOGIC;
        s_axis_open_status_V_TDATA : IN STD_LOGIC_VECTOR (95 downto 0);
        s_axis_open_status_V_TREADY : OUT STD_LOGIC;
        m_axis_close_connection_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axis_close_connection_V_TVALID : OUT STD_LOGIC;
        s_axis_tx_status_V_TDATA : IN STD_LOGIC_VECTOR (95 downto 0);
        s_axis_tx_status_V_TREADY : OUT STD_LOGIC );
    end component;


    component echo_server_application_fifo_w16_d64_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component echo_server_application_fifo_w1024_d2048_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1023 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1023 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    client_U0 : component echo_server_application_client
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => client_U0_ap_start,
        ap_done => client_U0_ap_done,
        ap_continue => client_U0_ap_continue,
        ap_idle => client_U0_ap_idle,
        ap_ready => client_U0_ap_ready,
        esa_sessionidFifo_dout => esa_sessionidFifo_dout,
        esa_sessionidFifo_empty_n => esa_sessionidFifo_empty_n,
        esa_sessionidFifo_read => client_U0_esa_sessionidFifo_read,
        esa_lengthFifo_dout => esa_lengthFifo_dout,
        esa_lengthFifo_empty_n => esa_lengthFifo_empty_n,
        esa_lengthFifo_read => client_U0_esa_lengthFifo_read,
        m_axis_tx_metadata_V_TREADY => m_axis_tx_metadata_V_TREADY,
        esa_dataFifo_dout => esa_dataFifo_dout,
        esa_dataFifo_empty_n => esa_dataFifo_empty_n,
        esa_dataFifo_read => client_U0_esa_dataFifo_read,
        m_axis_tx_data_V_TREADY => m_axis_tx_data_V_TREADY,
        m_axis_tx_metadata_V_TDATA => client_U0_m_axis_tx_metadata_V_TDATA,
        m_axis_tx_metadata_V_TVALID => client_U0_m_axis_tx_metadata_V_TVALID,
        m_axis_tx_data_V_TDATA => client_U0_m_axis_tx_data_V_TDATA,
        m_axis_tx_data_V_TVALID => client_U0_m_axis_tx_data_V_TVALID);

    server_U0 : component echo_server_application_server
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => server_U0_ap_start,
        ap_done => server_U0_ap_done,
        ap_continue => server_U0_ap_continue,
        ap_idle => server_U0_ap_idle,
        ap_ready => server_U0_ap_ready,
        s_axis_rx_metadata_V_TVALID => s_axis_rx_metadata_V_TVALID,
        s_axis_rx_data_V_TVALID => s_axis_rx_data_V_TVALID,
        esa_sessionidFifo_din => server_U0_esa_sessionidFifo_din,
        esa_sessionidFifo_full_n => esa_sessionidFifo_full_n,
        esa_sessionidFifo_write => server_U0_esa_sessionidFifo_write,
        esa_dataFifo_din => server_U0_esa_dataFifo_din,
        esa_dataFifo_full_n => esa_dataFifo_full_n,
        esa_dataFifo_write => server_U0_esa_dataFifo_write,
        s_axis_rx_metadata_V_TDATA => s_axis_rx_metadata_V_TDATA,
        s_axis_rx_metadata_V_TREADY => server_U0_s_axis_rx_metadata_V_TREADY,
        s_axis_rx_data_V_TDATA => s_axis_rx_data_V_TDATA,
        s_axis_rx_data_V_TREADY => server_U0_s_axis_rx_data_V_TREADY);

    open_port_U0 : component echo_server_application_open_port
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => open_port_U0_ap_start,
        ap_done => open_port_U0_ap_done,
        ap_continue => open_port_U0_ap_continue,
        ap_idle => open_port_U0_ap_idle,
        ap_ready => open_port_U0_ap_ready,
        s_axis_listen_port_status_V_TVALID => s_axis_listen_port_status_V_TVALID,
        m_axis_listen_port_V_TREADY => m_axis_listen_port_V_TREADY,
        m_axis_listen_port_V_TDATA => open_port_U0_m_axis_listen_port_V_TDATA,
        m_axis_listen_port_V_TVALID => open_port_U0_m_axis_listen_port_V_TVALID,
        s_axis_listen_port_status_V_TDATA => s_axis_listen_port_status_V_TDATA,
        s_axis_listen_port_status_V_TREADY => open_port_U0_s_axis_listen_port_status_V_TREADY);

    notification_handler_U0 : component echo_server_application_notification_handler
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => notification_handler_U0_ap_start,
        ap_done => notification_handler_U0_ap_done,
        ap_continue => notification_handler_U0_ap_continue,
        ap_idle => notification_handler_U0_ap_idle,
        ap_ready => notification_handler_U0_ap_ready,
        s_axis_notifications_V_TVALID => s_axis_notifications_V_TVALID,
        m_axis_read_package_V_TREADY => m_axis_read_package_V_TREADY,
        esa_lengthFifo_din => notification_handler_U0_esa_lengthFifo_din,
        esa_lengthFifo_full_n => esa_lengthFifo_full_n,
        esa_lengthFifo_write => notification_handler_U0_esa_lengthFifo_write,
        s_axis_notifications_V_TDATA => s_axis_notifications_V_TDATA,
        s_axis_notifications_V_TREADY => notification_handler_U0_s_axis_notifications_V_TREADY,
        m_axis_read_package_V_TDATA => notification_handler_U0_m_axis_read_package_V_TDATA,
        m_axis_read_package_V_TVALID => notification_handler_U0_m_axis_read_package_V_TVALID);

    dummy_U0 : component echo_server_application_dummy
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => dummy_U0_ap_start,
        ap_done => dummy_U0_ap_done,
        ap_continue => dummy_U0_ap_continue,
        ap_idle => dummy_U0_ap_idle,
        ap_ready => dummy_U0_ap_ready,
        s_axis_open_status_V_TVALID => s_axis_open_status_V_TVALID,
        s_axis_tx_status_V_TVALID => s_axis_tx_status_V_TVALID,
        m_axis_open_connection_V_TREADY => m_axis_open_connection_V_TREADY,
        m_axis_close_connection_V_TREADY => m_axis_close_connection_V_TREADY,
        m_axis_open_connection_V_TDATA => dummy_U0_m_axis_open_connection_V_TDATA,
        m_axis_open_connection_V_TVALID => dummy_U0_m_axis_open_connection_V_TVALID,
        s_axis_open_status_V_TDATA => s_axis_open_status_V_TDATA,
        s_axis_open_status_V_TREADY => dummy_U0_s_axis_open_status_V_TREADY,
        m_axis_close_connection_V_TDATA => dummy_U0_m_axis_close_connection_V_TDATA,
        m_axis_close_connection_V_TVALID => dummy_U0_m_axis_close_connection_V_TVALID,
        s_axis_tx_status_V_TDATA => s_axis_tx_status_V_TDATA,
        s_axis_tx_status_V_TREADY => dummy_U0_s_axis_tx_status_V_TREADY);

    esa_sessionidFifo_U : component echo_server_application_fifo_w16_d64_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => server_U0_esa_sessionidFifo_din,
        if_full_n => esa_sessionidFifo_full_n,
        if_write => server_U0_esa_sessionidFifo_write,
        if_dout => esa_sessionidFifo_dout,
        if_empty_n => esa_sessionidFifo_empty_n,
        if_read => client_U0_esa_sessionidFifo_read);

    esa_lengthFifo_U : component echo_server_application_fifo_w16_d64_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => notification_handler_U0_esa_lengthFifo_din,
        if_full_n => esa_lengthFifo_full_n,
        if_write => notification_handler_U0_esa_lengthFifo_write,
        if_dout => esa_lengthFifo_dout,
        if_empty_n => esa_lengthFifo_empty_n,
        if_read => client_U0_esa_lengthFifo_read);

    esa_dataFifo_U : component echo_server_application_fifo_w1024_d2048_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => server_U0_esa_dataFifo_din,
        if_full_n => esa_dataFifo_full_n,
        if_write => server_U0_esa_dataFifo_write,
        if_dout => esa_dataFifo_dout,
        if_empty_n => esa_dataFifo_empty_n,
        if_read => client_U0_esa_dataFifo_read);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    client_U0_ap_continue <= ap_const_logic_1;
    client_U0_ap_start <= ap_const_logic_1;
    dummy_U0_ap_continue <= ap_const_logic_1;
    dummy_U0_ap_start <= ap_const_logic_1;
    m_axis_close_connection_V_TDATA <= dummy_U0_m_axis_close_connection_V_TDATA;
    m_axis_close_connection_V_TVALID <= dummy_U0_m_axis_close_connection_V_TVALID;
    m_axis_listen_port_V_TDATA <= open_port_U0_m_axis_listen_port_V_TDATA;
    m_axis_listen_port_V_TVALID <= open_port_U0_m_axis_listen_port_V_TVALID;
    m_axis_open_connection_V_TDATA <= dummy_U0_m_axis_open_connection_V_TDATA;
    m_axis_open_connection_V_TVALID <= dummy_U0_m_axis_open_connection_V_TVALID;
    m_axis_read_package_V_TDATA <= notification_handler_U0_m_axis_read_package_V_TDATA;
    m_axis_read_package_V_TVALID <= notification_handler_U0_m_axis_read_package_V_TVALID;
    m_axis_tx_data_V_TDATA <= client_U0_m_axis_tx_data_V_TDATA;
    m_axis_tx_data_V_TVALID <= client_U0_m_axis_tx_data_V_TVALID;
    m_axis_tx_metadata_V_TDATA <= client_U0_m_axis_tx_metadata_V_TDATA;
    m_axis_tx_metadata_V_TVALID <= client_U0_m_axis_tx_metadata_V_TVALID;
    notification_handler_U0_ap_continue <= ap_const_logic_1;
    notification_handler_U0_ap_start <= ap_const_logic_1;
    open_port_U0_ap_continue <= ap_const_logic_1;
    open_port_U0_ap_start <= ap_const_logic_1;
    s_axis_listen_port_status_V_TREADY <= open_port_U0_s_axis_listen_port_status_V_TREADY;
    s_axis_notifications_V_TREADY <= notification_handler_U0_s_axis_notifications_V_TREADY;
    s_axis_open_status_V_TREADY <= dummy_U0_s_axis_open_status_V_TREADY;
    s_axis_rx_data_V_TREADY <= server_U0_s_axis_rx_data_V_TREADY;
    s_axis_rx_metadata_V_TREADY <= server_U0_s_axis_rx_metadata_V_TREADY;
    s_axis_tx_status_V_TREADY <= dummy_U0_s_axis_tx_status_V_TREADY;
    server_U0_ap_continue <= ap_const_logic_1;
    server_U0_ap_start <= ap_const_logic_1;
end behav;
