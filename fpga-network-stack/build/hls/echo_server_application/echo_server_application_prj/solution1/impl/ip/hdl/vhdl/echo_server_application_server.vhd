-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity echo_server_application_server is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_axis_rx_metadata_V_TVALID : IN STD_LOGIC;
    s_axis_rx_data_V_TVALID : IN STD_LOGIC;
    esa_sessionidFifo_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    esa_sessionidFifo_full_n : IN STD_LOGIC;
    esa_sessionidFifo_write : OUT STD_LOGIC;
    esa_dataFifo_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
    esa_dataFifo_full_n : IN STD_LOGIC;
    esa_dataFifo_write : OUT STD_LOGIC;
    s_axis_rx_metadata_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    s_axis_rx_metadata_V_TREADY : OUT STD_LOGIC;
    s_axis_rx_data_V_TDATA : IN STD_LOGIC_VECTOR (1023 downto 0);
    s_axis_rx_data_V_TREADY : OUT STD_LOGIC );
end;


architecture behav of echo_server_application_server is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal tmp_1_i_nbreadreq_fu_46_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op18_read_state1 : BOOLEAN;
    signal tmp_i_nbreadreq_fu_60_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op22_read_state1 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ksvs_fsmState_V_load_reg_112 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_reg_116 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op27_write_state2 : BOOLEAN;
    signal tmp_i_reg_125 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op29_write_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ksvs_fsmState_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal s_axis_rx_metadata_V_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal s_axis_rx_data_V_TDATA_blk_n : STD_LOGIC;
    signal esa_sessionidFifo_blk_n : STD_LOGIC;
    signal esa_dataFifo_blk_n : STD_LOGIC;
    signal sessionID_reg_120 : STD_LOGIC_VECTOR (15 downto 0);
    signal s_axis_rx_data_V_read_reg_129 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal currWord_last_V_fu_98_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_s_axis_rx_metadata_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_rx_metadata_V_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal s_axis_rx_metadata_V_TVALID_int_regslice : STD_LOGIC;
    signal s_axis_rx_metadata_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_s_axis_rx_metadata_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_rx_data_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_rx_data_V_TDATA_int_regslice : STD_LOGIC_VECTOR (1023 downto 0);
    signal s_axis_rx_data_V_TVALID_int_regslice : STD_LOGIC;
    signal s_axis_rx_data_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_s_axis_rx_data_V_U_ack_in : STD_LOGIC;
    signal ap_condition_133 : BOOLEAN;
    signal ap_condition_94 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component echo_server_application_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_s_axis_rx_metadata_V_U : component echo_server_application_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => s_axis_rx_metadata_V_TDATA,
        vld_in => s_axis_rx_metadata_V_TVALID,
        ack_in => regslice_both_s_axis_rx_metadata_V_U_ack_in,
        data_out => s_axis_rx_metadata_V_TDATA_int_regslice,
        vld_out => s_axis_rx_metadata_V_TVALID_int_regslice,
        ack_out => s_axis_rx_metadata_V_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_rx_metadata_V_U_apdone_blk);

    regslice_both_s_axis_rx_data_V_U : component echo_server_application_regslice_both
    generic map (
        DataWidth => 1024)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => s_axis_rx_data_V_TDATA,
        vld_in => s_axis_rx_data_V_TVALID,
        ack_in => regslice_both_s_axis_rx_data_V_U_ack_in,
        data_out => s_axis_rx_data_V_TDATA_int_regslice,
        vld_out => s_axis_rx_data_V_TVALID_int_regslice,
        ack_out => s_axis_rx_data_V_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_rx_data_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ksvs_fsmState_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_94)) then
                if ((ap_const_boolean_1 = ap_condition_133)) then 
                    ksvs_fsmState_V <= ap_const_lv1_0;
                elsif (((tmp_1_i_nbreadreq_fu_46_p3 = ap_const_lv1_1) and (ksvs_fsmState_V = ap_const_lv1_0))) then 
                    ksvs_fsmState_V <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ksvs_fsmState_V_load_reg_112 <= ksvs_fsmState_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op22_read_state1 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                s_axis_rx_data_V_read_reg_129 <= s_axis_rx_data_V_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op18_read_state1 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sessionID_reg_120 <= s_axis_rx_metadata_V_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ksvs_fsmState_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_1_i_reg_116 <= tmp_1_i_nbreadreq_fu_46_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ksvs_fsmState_V = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_i_reg_125 <= tmp_i_nbreadreq_fu_60_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_predicate_op18_read_state1, ap_predicate_op22_read_state1, esa_sessionidFifo_full_n, ap_predicate_op27_write_state2, esa_dataFifo_full_n, ap_predicate_op29_write_state2, s_axis_rx_metadata_V_TVALID_int_regslice, s_axis_rx_data_V_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op29_write_state2 = ap_const_boolean_1) and (esa_dataFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op27_write_state2 = ap_const_boolean_1) and (esa_sessionidFifo_full_n = ap_const_logic_0)))) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op22_read_state1 = ap_const_boolean_1) and (s_axis_rx_data_V_TVALID_int_regslice = ap_const_logic_0)) or ((ap_predicate_op18_read_state1 = ap_const_boolean_1) and (s_axis_rx_metadata_V_TVALID_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_predicate_op18_read_state1, ap_predicate_op22_read_state1, esa_sessionidFifo_full_n, ap_predicate_op27_write_state2, esa_dataFifo_full_n, ap_predicate_op29_write_state2, s_axis_rx_metadata_V_TVALID_int_regslice, s_axis_rx_data_V_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op29_write_state2 = ap_const_boolean_1) and (esa_dataFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op27_write_state2 = ap_const_boolean_1) and (esa_sessionidFifo_full_n = ap_const_logic_0)))) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op22_read_state1 = ap_const_boolean_1) and (s_axis_rx_data_V_TVALID_int_regslice = ap_const_logic_0)) or ((ap_predicate_op18_read_state1 = ap_const_boolean_1) and (s_axis_rx_metadata_V_TVALID_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_predicate_op18_read_state1, ap_predicate_op22_read_state1, esa_sessionidFifo_full_n, ap_predicate_op27_write_state2, esa_dataFifo_full_n, ap_predicate_op29_write_state2, s_axis_rx_metadata_V_TVALID_int_regslice, s_axis_rx_data_V_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op29_write_state2 = ap_const_boolean_1) and (esa_dataFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op27_write_state2 = ap_const_boolean_1) and (esa_sessionidFifo_full_n = ap_const_logic_0)))) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op22_read_state1 = ap_const_boolean_1) and (s_axis_rx_data_V_TVALID_int_regslice = ap_const_logic_0)) or ((ap_predicate_op18_read_state1 = ap_const_boolean_1) and (s_axis_rx_metadata_V_TVALID_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg, ap_predicate_op18_read_state1, ap_predicate_op22_read_state1, s_axis_rx_metadata_V_TVALID_int_regslice, s_axis_rx_data_V_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op22_read_state1 = ap_const_boolean_1) and (s_axis_rx_data_V_TVALID_int_regslice = ap_const_logic_0)) or ((ap_predicate_op18_read_state1 = ap_const_boolean_1) and (s_axis_rx_metadata_V_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(esa_sessionidFifo_full_n, ap_predicate_op27_write_state2, esa_dataFifo_full_n, ap_predicate_op29_write_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((ap_predicate_op29_write_state2 = ap_const_boolean_1) and (esa_dataFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op27_write_state2 = ap_const_boolean_1) and (esa_sessionidFifo_full_n = ap_const_logic_0)));
    end process;


    ap_condition_133_assign_proc : process(tmp_i_nbreadreq_fu_60_p3, ksvs_fsmState_V, currWord_last_V_fu_98_p3)
    begin
                ap_condition_133 <= ((tmp_i_nbreadreq_fu_60_p3 = ap_const_lv1_1) and (ksvs_fsmState_V = ap_const_lv1_1) and (currWord_last_V_fu_98_p3 = ap_const_lv1_1));
    end process;


    ap_condition_94_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_94 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op18_read_state1_assign_proc : process(tmp_1_i_nbreadreq_fu_46_p3, ksvs_fsmState_V)
    begin
                ap_predicate_op18_read_state1 <= ((tmp_1_i_nbreadreq_fu_46_p3 = ap_const_lv1_1) and (ksvs_fsmState_V = ap_const_lv1_0));
    end process;


    ap_predicate_op22_read_state1_assign_proc : process(tmp_i_nbreadreq_fu_60_p3, ksvs_fsmState_V)
    begin
                ap_predicate_op22_read_state1 <= ((tmp_i_nbreadreq_fu_60_p3 = ap_const_lv1_1) and (ksvs_fsmState_V = ap_const_lv1_1));
    end process;


    ap_predicate_op27_write_state2_assign_proc : process(ksvs_fsmState_V_load_reg_112, tmp_1_i_reg_116)
    begin
                ap_predicate_op27_write_state2 <= ((tmp_1_i_reg_116 = ap_const_lv1_1) and (ksvs_fsmState_V_load_reg_112 = ap_const_lv1_0));
    end process;


    ap_predicate_op29_write_state2_assign_proc : process(ksvs_fsmState_V_load_reg_112, tmp_i_reg_125)
    begin
                ap_predicate_op29_write_state2 <= ((tmp_i_reg_125 = ap_const_lv1_1) and (ksvs_fsmState_V_load_reg_112 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    currWord_last_V_fu_98_p3 <= s_axis_rx_data_V_TDATA_int_regslice(576 downto 576);

    esa_dataFifo_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, esa_dataFifo_full_n, ap_predicate_op29_write_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op29_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            esa_dataFifo_blk_n <= esa_dataFifo_full_n;
        else 
            esa_dataFifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    esa_dataFifo_din <= s_axis_rx_data_V_read_reg_129;

    esa_dataFifo_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op29_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op29_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            esa_dataFifo_write <= ap_const_logic_1;
        else 
            esa_dataFifo_write <= ap_const_logic_0;
        end if; 
    end process;


    esa_sessionidFifo_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, esa_sessionidFifo_full_n, ap_predicate_op27_write_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op27_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            esa_sessionidFifo_blk_n <= esa_sessionidFifo_full_n;
        else 
            esa_sessionidFifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    esa_sessionidFifo_din <= sessionID_reg_120;

    esa_sessionidFifo_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op27_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op27_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            esa_sessionidFifo_write <= ap_const_logic_1;
        else 
            esa_sessionidFifo_write <= ap_const_logic_0;
        end if; 
    end process;


    s_axis_rx_data_V_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, ap_predicate_op22_read_state1, ap_block_pp0_stage0, s_axis_rx_data_V_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op22_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_done_reg = ap_const_logic_0))) then 
            s_axis_rx_data_V_TDATA_blk_n <= s_axis_rx_data_V_TVALID_int_regslice;
        else 
            s_axis_rx_data_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_axis_rx_data_V_TREADY <= regslice_both_s_axis_rx_data_V_U_ack_in;

    s_axis_rx_data_V_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op22_read_state1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op22_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_axis_rx_data_V_TREADY_int_regslice <= ap_const_logic_1;
        else 
            s_axis_rx_data_V_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    s_axis_rx_metadata_V_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, ap_predicate_op18_read_state1, ap_block_pp0_stage0, s_axis_rx_metadata_V_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op18_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_done_reg = ap_const_logic_0))) then 
            s_axis_rx_metadata_V_TDATA_blk_n <= s_axis_rx_metadata_V_TVALID_int_regslice;
        else 
            s_axis_rx_metadata_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_axis_rx_metadata_V_TREADY <= regslice_both_s_axis_rx_metadata_V_U_ack_in;

    s_axis_rx_metadata_V_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op18_read_state1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op18_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_axis_rx_metadata_V_TREADY_int_regslice <= ap_const_logic_1;
        else 
            s_axis_rx_metadata_V_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_i_nbreadreq_fu_46_p3 <= (0=>(s_axis_rx_metadata_V_TVALID_int_regslice), others=>'-');
    tmp_i_nbreadreq_fu_60_p3 <= (0=>(s_axis_rx_data_V_TVALID_int_regslice), others=>'-');
end behav;
