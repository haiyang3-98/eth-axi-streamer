// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module echo_server_application_open_port (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        s_axis_listen_port_status_V_TVALID,
        m_axis_listen_port_V_TREADY,
        m_axis_listen_port_V_TDATA,
        m_axis_listen_port_V_TVALID,
        s_axis_listen_port_status_V_TDATA,
        s_axis_listen_port_status_V_TREADY
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   s_axis_listen_port_status_V_TVALID;
input   m_axis_listen_port_V_TREADY;
output  [15:0] m_axis_listen_port_V_TDATA;
output   m_axis_listen_port_V_TVALID;
input  [7:0] s_axis_listen_port_status_V_TDATA;
output   s_axis_listen_port_status_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [1:0] state_V_load_load_fu_60_p1;
wire   [0:0] tmp_nbreadreq_fu_38_p3;
reg    ap_predicate_op12_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [1:0] state_V_load_reg_86;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg   [1:0] state_V_load_reg_86_pp0_iter1_reg;
wire    regslice_both_m_axis_listen_port_V_U_apdone_blk;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [1:0] state_V;
reg    m_axis_listen_port_V_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    s_axis_listen_port_status_V_TDATA_blk_n;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] listenDone_fu_64_p1;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    m_axis_listen_port_V_TVALID_int_regslice;
wire    m_axis_listen_port_V_TREADY_int_regslice;
wire    regslice_both_m_axis_listen_port_V_U_vld_out;
wire    regslice_both_s_axis_listen_port_status_V_U_apdone_blk;
wire   [7:0] s_axis_listen_port_status_V_TDATA_int_regslice;
wire    s_axis_listen_port_status_V_TVALID_int_regslice;
reg    s_axis_listen_port_status_V_TREADY_int_regslice;
wire    regslice_both_s_axis_listen_port_status_V_U_ack_in;
reg    ap_condition_113;
reg    ap_condition_117;
reg    ap_condition_83;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 state_V = 2'd0;
end

echo_server_application_regslice_both #(
    .DataWidth( 16 ))
regslice_both_m_axis_listen_port_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(16'd7),
    .vld_in(m_axis_listen_port_V_TVALID_int_regslice),
    .ack_in(m_axis_listen_port_V_TREADY_int_regslice),
    .data_out(m_axis_listen_port_V_TDATA),
    .vld_out(regslice_both_m_axis_listen_port_V_U_vld_out),
    .ack_out(m_axis_listen_port_V_TREADY),
    .apdone_blk(regslice_both_m_axis_listen_port_V_U_apdone_blk)
);

echo_server_application_regslice_both #(
    .DataWidth( 8 ))
regslice_both_s_axis_listen_port_status_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_listen_port_status_V_TDATA),
    .vld_in(s_axis_listen_port_status_V_TVALID),
    .ack_in(regslice_both_s_axis_listen_port_status_V_U_ack_in),
    .data_out(s_axis_listen_port_status_V_TDATA_int_regslice),
    .vld_out(s_axis_listen_port_status_V_TVALID_int_regslice),
    .ack_out(s_axis_listen_port_status_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_listen_port_status_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        state_V <= 2'd0;
    end else begin
        if ((1'b1 == ap_condition_83)) begin
            if ((state_V_load_load_fu_60_p1 == 2'd0)) begin
                state_V <= 2'd1;
            end else if ((1'b1 == ap_condition_117)) begin
                state_V <= 2'd2;
            end else if ((1'b1 == ap_condition_113)) begin
                state_V <= 2'd0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_V_load_reg_86 <= state_V;
        state_V_load_reg_86_pp0_iter1_reg <= state_V_load_reg_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (state_V_load_reg_86_pp0_iter1_reg == 2'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (state_V_load_reg_86 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axis_listen_port_V_TDATA_blk_n = m_axis_listen_port_V_TREADY_int_regslice;
    end else begin
        m_axis_listen_port_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (state_V_load_reg_86 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_listen_port_V_TVALID_int_regslice = 1'b1;
    end else begin
        m_axis_listen_port_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op12_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_done_reg == 1'b0))) begin
        s_axis_listen_port_status_V_TDATA_blk_n = s_axis_listen_port_status_V_TVALID_int_regslice;
    end else begin
        s_axis_listen_port_status_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op12_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_listen_port_status_V_TREADY_int_regslice = 1'b1;
    end else begin
        s_axis_listen_port_status_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_m_axis_listen_port_V_U_apdone_blk == 1'b1) | ((state_V_load_reg_86_pp0_iter1_reg == 2'd0) & (m_axis_listen_port_V_TREADY_int_regslice == 1'b0)))) | ((state_V_load_reg_86 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axis_listen_port_V_TREADY_int_regslice == 1'b0)) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((ap_predicate_op12_read_state1 == 1'b1) & (s_axis_listen_port_status_V_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_m_axis_listen_port_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((state_V_load_reg_86_pp0_iter1_reg == 2'd0) & (m_axis_listen_port_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((state_V_load_reg_86 == 2'd0) & (m_axis_listen_port_V_TREADY_int_regslice == 1'b0)))) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((ap_predicate_op12_read_state1 == 1'b1) & (s_axis_listen_port_status_V_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_m_axis_listen_port_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((state_V_load_reg_86_pp0_iter1_reg == 2'd0) & (m_axis_listen_port_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((state_V_load_reg_86 == 2'd0) & (m_axis_listen_port_V_TREADY_int_regslice == 1'b0)))) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((ap_predicate_op12_read_state1 == 1'b1) & (s_axis_listen_port_status_V_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((ap_predicate_op12_read_state1 == 1'b1) & (s_axis_listen_port_status_V_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2_io = ((state_V_load_reg_86 == 2'd0) & (m_axis_listen_port_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((state_V_load_reg_86 == 2'd0) & (m_axis_listen_port_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((state_V_load_reg_86_pp0_iter1_reg == 2'd0) & (m_axis_listen_port_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((regslice_both_m_axis_listen_port_V_U_apdone_blk == 1'b1) | ((state_V_load_reg_86_pp0_iter1_reg == 2'd0) & (m_axis_listen_port_V_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_condition_113 = ((tmp_nbreadreq_fu_38_p3 == 1'd1) & (state_V == 2'd1) & (listenDone_fu_64_p1 == 1'd0));
end

always @ (*) begin
    ap_condition_117 = ((tmp_nbreadreq_fu_38_p3 == 1'd1) & (state_V == 2'd1) & (listenDone_fu_64_p1 == 1'd1));
end

always @ (*) begin
    ap_condition_83 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_predicate_op12_read_state1 = ((tmp_nbreadreq_fu_38_p3 == 1'd1) & (state_V == 2'd1));
end

assign listenDone_fu_64_p1 = s_axis_listen_port_status_V_TDATA_int_regslice[0:0];

assign m_axis_listen_port_V_TVALID = regslice_both_m_axis_listen_port_V_U_vld_out;

assign s_axis_listen_port_status_V_TREADY = regslice_both_s_axis_listen_port_status_V_U_ack_in;

assign state_V_load_load_fu_60_p1 = state_V;

assign tmp_nbreadreq_fu_38_p3 = s_axis_listen_port_status_V_TVALID_int_regslice;

endmodule //echo_server_application_open_port
