// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module echo_server_application_notification_handler (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        s_axis_notifications_V_TVALID,
        m_axis_read_package_V_TREADY,
        esa_lengthFifo_din,
        esa_lengthFifo_full_n,
        esa_lengthFifo_write,
        s_axis_notifications_V_TDATA,
        s_axis_notifications_V_TREADY,
        m_axis_read_package_V_TDATA,
        m_axis_read_package_V_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   s_axis_notifications_V_TVALID;
input   m_axis_read_package_V_TREADY;
output  [15:0] esa_lengthFifo_din;
input   esa_lengthFifo_full_n;
output   esa_lengthFifo_write;
input  [95:0] s_axis_notifications_V_TDATA;
output   s_axis_notifications_V_TREADY;
output  [31:0] m_axis_read_package_V_TDATA;
output   m_axis_read_package_V_TVALID;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg esa_lengthFifo_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] tmp_i_nbreadreq_fu_38_p3;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] tmp_i_reg_86;
reg   [0:0] icmp_ln874_reg_95;
reg    ap_predicate_op18_write_state2;
reg    ap_predicate_op19_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg   [0:0] tmp_i_reg_86_pp0_iter1_reg;
reg   [0:0] icmp_ln874_reg_95_pp0_iter1_reg;
reg    ap_predicate_op20_write_state3;
wire    regslice_both_m_axis_read_package_V_U_apdone_blk;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg    s_axis_notifications_V_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    m_axis_read_package_V_TDATA_blk_n;
reg    esa_lengthFifo_blk_n;
wire   [15:0] notification_length_V_fu_66_p4;
reg   [15:0] notification_length_V_reg_90;
wire   [0:0] icmp_ln874_fu_76_p2;
wire   [31:0] trunc_ln174_fu_82_p1;
reg   [31:0] trunc_ln174_reg_99;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_s_axis_notifications_V_U_apdone_blk;
wire   [95:0] s_axis_notifications_V_TDATA_int_regslice;
wire    s_axis_notifications_V_TVALID_int_regslice;
reg    s_axis_notifications_V_TREADY_int_regslice;
wire    regslice_both_s_axis_notifications_V_U_ack_in;
reg    m_axis_read_package_V_TVALID_int_regslice;
wire    m_axis_read_package_V_TREADY_int_regslice;
wire    regslice_both_m_axis_read_package_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

echo_server_application_regslice_both #(
    .DataWidth( 96 ))
regslice_both_s_axis_notifications_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_notifications_V_TDATA),
    .vld_in(s_axis_notifications_V_TVALID),
    .ack_in(regslice_both_s_axis_notifications_V_U_ack_in),
    .data_out(s_axis_notifications_V_TDATA_int_regslice),
    .vld_out(s_axis_notifications_V_TVALID_int_regslice),
    .ack_out(s_axis_notifications_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_notifications_V_U_apdone_blk)
);

echo_server_application_regslice_both #(
    .DataWidth( 32 ))
regslice_both_m_axis_read_package_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(trunc_ln174_reg_99),
    .vld_in(m_axis_read_package_V_TVALID_int_regslice),
    .ack_in(m_axis_read_package_V_TREADY_int_regslice),
    .data_out(m_axis_read_package_V_TDATA),
    .vld_out(regslice_both_m_axis_read_package_V_U_vld_out),
    .ack_out(m_axis_read_package_V_TREADY),
    .apdone_blk(regslice_both_m_axis_read_package_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_nbreadreq_fu_38_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln874_reg_95 <= icmp_ln874_fu_76_p2;
        notification_length_V_reg_90 <= {{s_axis_notifications_V_TDATA_int_regslice[31:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln874_reg_95_pp0_iter1_reg <= icmp_ln874_reg_95;
        tmp_i_reg_86 <= tmp_i_nbreadreq_fu_38_p3;
        tmp_i_reg_86_pp0_iter1_reg <= tmp_i_reg_86;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_nbreadreq_fu_38_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln874_fu_76_p2 == 1'd0))) begin
        trunc_ln174_reg_99 <= trunc_ln174_fu_82_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op19_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        esa_lengthFifo_blk_n = esa_lengthFifo_full_n;
    end else begin
        esa_lengthFifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op19_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        esa_lengthFifo_write = 1'b1;
    end else begin
        esa_lengthFifo_write = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op20_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op18_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axis_read_package_V_TDATA_blk_n = m_axis_read_package_V_TREADY_int_regslice;
    end else begin
        m_axis_read_package_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op18_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_read_package_V_TVALID_int_regslice = 1'b1;
    end else begin
        m_axis_read_package_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_i_nbreadreq_fu_38_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_done_reg == 1'b0))) begin
        s_axis_notifications_V_TDATA_blk_n = s_axis_notifications_V_TVALID_int_regslice;
    end else begin
        s_axis_notifications_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_nbreadreq_fu_38_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_notifications_V_TREADY_int_regslice = 1'b1;
    end else begin
        s_axis_notifications_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_m_axis_read_package_V_U_apdone_blk == 1'b1) | ((ap_predicate_op20_write_state3 == 1'b1) & (m_axis_read_package_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op19_write_state2 == 1'b1) & (esa_lengthFifo_full_n == 1'b0)) | ((ap_predicate_op18_write_state2 == 1'b1) & (m_axis_read_package_V_TREADY_int_regslice == 1'b0)))) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_38_p3 == 1'd1) & (s_axis_notifications_V_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_m_axis_read_package_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((ap_predicate_op20_write_state3 == 1'b1) & (m_axis_read_package_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((ap_predicate_op19_write_state2 == 1'b1) & (esa_lengthFifo_full_n == 1'b0)) | ((ap_predicate_op18_write_state2 == 1'b1) & (m_axis_read_package_V_TREADY_int_regslice == 1'b0)))) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_38_p3 == 1'd1) & (s_axis_notifications_V_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_m_axis_read_package_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((ap_predicate_op20_write_state3 == 1'b1) & (m_axis_read_package_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((ap_predicate_op19_write_state2 == 1'b1) & (esa_lengthFifo_full_n == 1'b0)) | ((ap_predicate_op18_write_state2 == 1'b1) & (m_axis_read_package_V_TREADY_int_regslice == 1'b0)))) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_38_p3 == 1'd1) & (s_axis_notifications_V_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_38_p3 == 1'd1) & (s_axis_notifications_V_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2_io = ((ap_predicate_op18_write_state2 == 1'b1) & (m_axis_read_package_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((ap_predicate_op19_write_state2 == 1'b1) & (esa_lengthFifo_full_n == 1'b0)) | ((ap_predicate_op18_write_state2 == 1'b1) & (m_axis_read_package_V_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state3_io = ((ap_predicate_op20_write_state3 == 1'b1) & (m_axis_read_package_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((regslice_both_m_axis_read_package_V_U_apdone_blk == 1'b1) | ((ap_predicate_op20_write_state3 == 1'b1) & (m_axis_read_package_V_TREADY_int_regslice == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_predicate_op18_write_state2 = ((icmp_ln874_reg_95 == 1'd0) & (tmp_i_reg_86 == 1'd1));
end

always @ (*) begin
    ap_predicate_op19_write_state2 = ((icmp_ln874_reg_95 == 1'd0) & (tmp_i_reg_86 == 1'd1));
end

always @ (*) begin
    ap_predicate_op20_write_state3 = ((icmp_ln874_reg_95_pp0_iter1_reg == 1'd0) & (tmp_i_reg_86_pp0_iter1_reg == 1'd1));
end

assign esa_lengthFifo_din = notification_length_V_reg_90;

assign icmp_ln874_fu_76_p2 = ((notification_length_V_fu_66_p4 == 16'd0) ? 1'b1 : 1'b0);

assign m_axis_read_package_V_TVALID = regslice_both_m_axis_read_package_V_U_vld_out;

assign notification_length_V_fu_66_p4 = {{s_axis_notifications_V_TDATA_int_regslice[31:16]}};

assign s_axis_notifications_V_TREADY = regslice_both_s_axis_notifications_V_U_ack_in;

assign tmp_i_nbreadreq_fu_38_p3 = s_axis_notifications_V_TVALID_int_regslice;

assign trunc_ln174_fu_82_p1 = s_axis_notifications_V_TDATA_int_regslice[31:0];

endmodule //echo_server_application_notification_handler
