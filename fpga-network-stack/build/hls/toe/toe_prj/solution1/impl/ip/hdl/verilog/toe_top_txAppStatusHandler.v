// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module toe_top_txAppStatusHandler (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        s_axis_txwrite_sts_V_TVALID,
        txApp_txEventCache_dout,
        txApp_txEventCache_empty_n,
        txApp_txEventCache_read,
        txApp2txSar_push_din,
        txApp2txSar_push_full_n,
        txApp2txSar_push_write,
        s_axis_txwrite_sts_V_TDATA,
        s_axis_txwrite_sts_V_TREADY
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   s_axis_txwrite_sts_V_TVALID;
input  [127:0] txApp_txEventCache_dout;
input   txApp_txEventCache_empty_n;
output   txApp_txEventCache_read;
output  [63:0] txApp2txSar_push_din;
input   txApp2txSar_push_full_n;
output   txApp2txSar_push_write;
input  [39:0] s_axis_txwrite_sts_V_TDATA;
output   s_axis_txwrite_sts_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg txApp_txEventCache_read;
reg[63:0] txApp2txSar_push_din;
reg txApp2txSar_push_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire   [0:0] grp_nbreadreq_fu_70_p3;
reg    ap_predicate_op20_read_state1;
reg    ap_predicate_op27_read_state1;
wire   [0:0] tmp_i_nbreadreq_fu_84_p3;
reg    ap_predicate_op41_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [1:0] tash_state_load_reg_269;
reg   [0:0] tmp_6_i_reg_291;
reg   [0:0] tmp_okay_V_1_reg_295;
reg    ap_predicate_op57_write_state2;
reg   [0:0] tmp_i_110_reg_299;
reg   [0:0] tmp_okay_V_reg_303;
reg   [0:0] icmp_ln886_reg_307;
reg    ap_predicate_op62_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [1:0] tash_state;
reg   [15:0] ev_sessionID_V;
reg   [17:0] ev_address_V;
reg   [15:0] ev_length_V;
reg    s_axis_txwrite_sts_V_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    txApp_txEventCache_blk_n;
reg    txApp2txSar_push_blk_n;
reg   [15:0] ev_sessionID_V_load_reg_273;
reg   [17:0] lhs_reg_279;
reg   [15:0] rhs_reg_285;
wire   [0:0] grp_fu_105_p3;
wire   [0:0] icmp_ln886_fu_149_p2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln81_fu_213_p2;
wire   [63:0] zext_ln174_fu_242_p1;
reg    ap_block_pp0_stage0_01001;
wire   [63:0] zext_ln174_9_fu_264_p1;
wire   [18:0] zext_ln215_fu_135_p1;
wire   [18:0] zext_ln215_2_fu_139_p1;
wire   [18:0] ret_fu_143_p2;
wire   [31:0] trunc_ln145_fu_161_p1;
wire   [17:0] zext_ln208_fu_225_p1;
wire   [17:0] add_ln208_fu_228_p2;
wire   [49:0] tmp_16_i_fu_233_p4;
wire   [17:0] zext_ln1346_fu_247_p1;
wire   [17:0] add_ln208_1_fu_250_p2;
wire   [49:0] tmp_17_i_fu_255_p4;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_s_axis_txwrite_sts_V_U_apdone_blk;
wire   [39:0] s_axis_txwrite_sts_V_TDATA_int_regslice;
wire    s_axis_txwrite_sts_V_TVALID_int_regslice;
reg    s_axis_txwrite_sts_V_TREADY_int_regslice;
wire    regslice_both_s_axis_txwrite_sts_V_U_ack_in;
reg    ap_condition_192;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 tash_state = 2'd0;
#0 ev_sessionID_V = 16'd0;
#0 ev_address_V = 18'd0;
#0 ev_length_V = 16'd0;
end

toe_top_regslice_both #(
    .DataWidth( 40 ))
regslice_both_s_axis_txwrite_sts_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_txwrite_sts_V_TDATA),
    .vld_in(s_axis_txwrite_sts_V_TVALID),
    .ack_in(regslice_both_s_axis_txwrite_sts_V_U_ack_in),
    .data_out(s_axis_txwrite_sts_V_TDATA_int_regslice),
    .vld_out(s_axis_txwrite_sts_V_TVALID_int_regslice),
    .ack_out(s_axis_txwrite_sts_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_txwrite_sts_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_nbreadreq_fu_84_p3 == 1'd1) & (tash_state == 2'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln81_fu_213_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tash_state <= 2'd1;
    end else if (((grp_nbreadreq_fu_70_p3 == 1'd1) & (tash_state == 2'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln886_fu_149_p2 == 1'd1) & (grp_fu_105_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tash_state <= 2'd2;
    end else if ((((grp_nbreadreq_fu_70_p3 == 1'd1) & (tash_state == 2'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln886_fu_149_p2 == 1'd0) & (grp_fu_105_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((grp_nbreadreq_fu_70_p3 == 1'd1) & (tash_state == 2'd2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (grp_fu_105_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        tash_state <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_nbreadreq_fu_84_p3 == 1'd1) & (tash_state == 2'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ev_address_V <= {{txApp_txEventCache_dout[81:64]}};
        ev_length_V <= {{txApp_txEventCache_dout[111:96]}};
        ev_sessionID_V <= {{txApp_txEventCache_dout[47:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ev_sessionID_V_load_reg_273 <= ev_sessionID_V;
        lhs_reg_279 <= ev_address_V;
        rhs_reg_285 <= ev_length_V;
        tash_state_load_reg_269 <= tash_state;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_70_p3 == 1'd1) & (tash_state == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (grp_fu_105_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln886_reg_307 <= icmp_ln886_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tash_state == 2'd2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_6_i_reg_291 <= grp_nbreadreq_fu_70_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tash_state == 2'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_i_110_reg_299 <= grp_nbreadreq_fu_70_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_70_p3 == 1'd1) & (tash_state == 2'd2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_okay_V_1_reg_295 <= s_axis_txwrite_sts_V_TDATA_int_regslice[32'd32];
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_70_p3 == 1'd1) & (tash_state == 2'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_okay_V_reg_303 <= s_axis_txwrite_sts_V_TDATA_int_regslice[32'd32];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op27_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_done_reg == 1'b0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_predicate_op20_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_done_reg == 1'b0) & (1'b0 == ap_block_pp0_stage0)))) begin
        s_axis_txwrite_sts_V_TDATA_blk_n = s_axis_txwrite_sts_V_TVALID_int_regslice;
    end else begin
        s_axis_txwrite_sts_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_predicate_op27_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_predicate_op20_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        s_axis_txwrite_sts_V_TREADY_int_regslice = 1'b1;
    end else begin
        s_axis_txwrite_sts_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op62_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_predicate_op57_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        txApp2txSar_push_blk_n = txApp2txSar_push_full_n;
    end else begin
        txApp2txSar_push_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_192)) begin
        if ((ap_predicate_op62_write_state2 == 1'b1)) begin
            txApp2txSar_push_din = zext_ln174_9_fu_264_p1;
        end else if ((ap_predicate_op57_write_state2 == 1'b1)) begin
            txApp2txSar_push_din = zext_ln174_fu_242_p1;
        end else begin
            txApp2txSar_push_din = 'bx;
        end
    end else begin
        txApp2txSar_push_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op62_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_predicate_op57_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        txApp2txSar_push_write = 1'b1;
    end else begin
        txApp2txSar_push_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op41_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_done_reg == 1'b0) & (1'b0 == ap_block_pp0_stage0))) begin
        txApp_txEventCache_blk_n = txApp_txEventCache_empty_n;
    end else begin
        txApp_txEventCache_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op41_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        txApp_txEventCache_read = 1'b1;
    end else begin
        txApp_txEventCache_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln208_1_fu_250_p2 = (lhs_reg_279 + zext_ln1346_fu_247_p1);

assign add_ln208_fu_228_p2 = (lhs_reg_279 + zext_ln208_fu_225_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((ap_predicate_op41_read_state1 == 1'b1) & (txApp_txEventCache_empty_n == 1'b0)) | ((ap_predicate_op27_read_state1 == 1'b1) & (s_axis_txwrite_sts_V_TVALID_int_regslice == 1'b0)) | ((ap_predicate_op20_read_state1 == 1'b1) & (s_axis_txwrite_sts_V_TVALID_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op62_write_state2 == 1'b1) & (txApp2txSar_push_full_n == 1'b0)) | ((ap_predicate_op57_write_state2 == 1'b1) & (txApp2txSar_push_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((ap_predicate_op41_read_state1 == 1'b1) & (txApp_txEventCache_empty_n == 1'b0)) | ((ap_predicate_op27_read_state1 == 1'b1) & (s_axis_txwrite_sts_V_TVALID_int_regslice == 1'b0)) | ((ap_predicate_op20_read_state1 == 1'b1) & (s_axis_txwrite_sts_V_TVALID_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op62_write_state2 == 1'b1) & (txApp2txSar_push_full_n == 1'b0)) | ((ap_predicate_op57_write_state2 == 1'b1) & (txApp2txSar_push_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((ap_predicate_op41_read_state1 == 1'b1) & (txApp_txEventCache_empty_n == 1'b0)) | ((ap_predicate_op27_read_state1 == 1'b1) & (s_axis_txwrite_sts_V_TVALID_int_regslice == 1'b0)) | ((ap_predicate_op20_read_state1 == 1'b1) & (s_axis_txwrite_sts_V_TVALID_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op62_write_state2 == 1'b1) & (txApp2txSar_push_full_n == 1'b0)) | ((ap_predicate_op57_write_state2 == 1'b1) & (txApp2txSar_push_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((ap_predicate_op41_read_state1 == 1'b1) & (txApp_txEventCache_empty_n == 1'b0)) | ((ap_predicate_op27_read_state1 == 1'b1) & (s_axis_txwrite_sts_V_TVALID_int_regslice == 1'b0)) | ((ap_predicate_op20_read_state1 == 1'b1) & (s_axis_txwrite_sts_V_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((ap_predicate_op62_write_state2 == 1'b1) & (txApp2txSar_push_full_n == 1'b0)) | ((ap_predicate_op57_write_state2 == 1'b1) & (txApp2txSar_push_full_n == 1'b0)));
end

always @ (*) begin
    ap_condition_192 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_predicate_op20_read_state1 = ((grp_nbreadreq_fu_70_p3 == 1'd1) & (tash_state == 2'd2));
end

always @ (*) begin
    ap_predicate_op27_read_state1 = ((grp_nbreadreq_fu_70_p3 == 1'd1) & (tash_state == 2'd1));
end

always @ (*) begin
    ap_predicate_op41_read_state1 = ((tmp_i_nbreadreq_fu_84_p3 == 1'd1) & (tash_state == 2'd0));
end

always @ (*) begin
    ap_predicate_op57_write_state2 = ((tmp_okay_V_1_reg_295 == 1'd1) & (tmp_6_i_reg_291 == 1'd1) & (tash_state_load_reg_269 == 2'd2));
end

always @ (*) begin
    ap_predicate_op62_write_state2 = ((icmp_ln886_reg_307 == 1'd0) & (tmp_okay_V_reg_303 == 1'd1) & (tmp_i_110_reg_299 == 1'd1) & (tash_state_load_reg_269 == 2'd1));
end

assign grp_fu_105_p3 = s_axis_txwrite_sts_V_TDATA_int_regslice[32'd32];

assign grp_nbreadreq_fu_70_p3 = s_axis_txwrite_sts_V_TVALID_int_regslice;

assign icmp_ln81_fu_213_p2 = ((trunc_ln145_fu_161_p1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_149_p2 = ((ret_fu_143_p2 > 19'd262144) ? 1'b1 : 1'b0);

assign ret_fu_143_p2 = (zext_ln215_fu_135_p1 + zext_ln215_2_fu_139_p1);

assign s_axis_txwrite_sts_V_TREADY = regslice_both_s_axis_txwrite_sts_V_U_ack_in;

assign tmp_16_i_fu_233_p4 = {{{add_ln208_fu_228_p2}, {16'd0}}, {ev_sessionID_V_load_reg_273}};

assign tmp_17_i_fu_255_p4 = {{{add_ln208_1_fu_250_p2}, {16'd0}}, {ev_sessionID_V_load_reg_273}};

assign tmp_i_nbreadreq_fu_84_p3 = txApp_txEventCache_empty_n;

assign trunc_ln145_fu_161_p1 = txApp_txEventCache_dout[31:0];

assign zext_ln1346_fu_247_p1 = rhs_reg_285;

assign zext_ln174_9_fu_264_p1 = tmp_17_i_fu_255_p4;

assign zext_ln174_fu_242_p1 = tmp_16_i_fu_233_p4;

assign zext_ln208_fu_225_p1 = rhs_reg_285;

assign zext_ln215_2_fu_139_p1 = ev_length_V;

assign zext_ln215_fu_135_p1 = ev_address_V;

endmodule //toe_top_txAppStatusHandler
