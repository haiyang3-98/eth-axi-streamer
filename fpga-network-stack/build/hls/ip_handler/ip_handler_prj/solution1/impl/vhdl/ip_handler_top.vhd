-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ip_handler_top is
port (
    s_axis_raw_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    s_axis_raw_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_raw_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_raw_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_arp_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axis_arp_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_arp_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_arp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_icmpv6_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axis_icmpv6_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_icmpv6_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_icmpv6_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_ipv6udp_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axis_ipv6udp_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_ipv6udp_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_ipv6udp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_icmp_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axis_icmp_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_icmp_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_icmp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_udp_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axis_udp_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_udp_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_udp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_tcp_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axis_tcp_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_tcp_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_tcp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_roce_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axis_roce_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_roce_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_roce_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    myIpAddress : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axis_raw_TVALID : IN STD_LOGIC;
    s_axis_raw_TREADY : OUT STD_LOGIC;
    m_axis_arp_TVALID : OUT STD_LOGIC;
    m_axis_arp_TREADY : IN STD_LOGIC;
    m_axis_icmpv6_TVALID : OUT STD_LOGIC;
    m_axis_icmpv6_TREADY : IN STD_LOGIC;
    m_axis_ipv6udp_TVALID : OUT STD_LOGIC;
    m_axis_ipv6udp_TREADY : IN STD_LOGIC;
    m_axis_icmp_TVALID : OUT STD_LOGIC;
    m_axis_icmp_TREADY : IN STD_LOGIC;
    m_axis_udp_TVALID : OUT STD_LOGIC;
    m_axis_udp_TREADY : IN STD_LOGIC;
    m_axis_tcp_TVALID : OUT STD_LOGIC;
    m_axis_tcp_TREADY : IN STD_LOGIC;
    m_axis_roce_TVALID : OUT STD_LOGIC;
    m_axis_roce_TREADY : IN STD_LOGIC );
end;


architecture behav of ip_handler_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ip_handler_top_ip_handler_top,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu3p-ffvc1517-2-i,HLS_INPUT_CLOCK=3.200000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.153000,HLS_SYN_LAT=28,HLS_SYN_TPT=1,HLS_SYN_MEM=29,HLS_SYN_DSP=0,HLS_SYN_FF=61990,HLS_SYN_LUT=31117,HLS_VERSION=2020_2}";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal ip_handler_top_entry3_U0_ap_start : STD_LOGIC;
    signal ip_handler_top_entry3_U0_ap_done : STD_LOGIC;
    signal ip_handler_top_entry3_U0_ap_continue : STD_LOGIC;
    signal ip_handler_top_entry3_U0_ap_idle : STD_LOGIC;
    signal ip_handler_top_entry3_U0_ap_ready : STD_LOGIC;
    signal ip_handler_top_entry3_U0_myIpAddress_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ip_handler_top_entry3_U0_myIpAddress_out_write : STD_LOGIC;
    signal ip_handler_top_entry19_U0_ap_start : STD_LOGIC;
    signal ip_handler_top_entry19_U0_ap_done : STD_LOGIC;
    signal ip_handler_top_entry19_U0_ap_continue : STD_LOGIC;
    signal ip_handler_top_entry19_U0_ap_idle : STD_LOGIC;
    signal ip_handler_top_entry19_U0_ap_ready : STD_LOGIC;
    signal ip_handler_top_entry19_U0_myIpAddress_read : STD_LOGIC;
    signal ip_handler_top_entry19_U0_myIpAddress_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ip_handler_top_entry19_U0_myIpAddress_out_write : STD_LOGIC;
    signal convert_axis_to_net_axis_512_U0_ap_start : STD_LOGIC;
    signal convert_axis_to_net_axis_512_U0_ap_done : STD_LOGIC;
    signal convert_axis_to_net_axis_512_U0_ap_continue : STD_LOGIC;
    signal convert_axis_to_net_axis_512_U0_ap_idle : STD_LOGIC;
    signal convert_axis_to_net_axis_512_U0_ap_ready : STD_LOGIC;
    signal convert_axis_to_net_axis_512_U0_s_axis_raw_internal_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal convert_axis_to_net_axis_512_U0_s_axis_raw_internal_write : STD_LOGIC;
    signal convert_axis_to_net_axis_512_U0_s_axis_raw_TREADY : STD_LOGIC;
    signal convert_net_axis_to_axis_512_13_U0_ap_start : STD_LOGIC;
    signal convert_net_axis_to_axis_512_13_U0_ap_done : STD_LOGIC;
    signal convert_net_axis_to_axis_512_13_U0_ap_continue : STD_LOGIC;
    signal convert_net_axis_to_axis_512_13_U0_ap_idle : STD_LOGIC;
    signal convert_net_axis_to_axis_512_13_U0_ap_ready : STD_LOGIC;
    signal convert_net_axis_to_axis_512_13_U0_m_axis_arp_internal_read : STD_LOGIC;
    signal convert_net_axis_to_axis_512_13_U0_m_axis_arp_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal convert_net_axis_to_axis_512_13_U0_m_axis_arp_TVALID : STD_LOGIC;
    signal convert_net_axis_to_axis_512_13_U0_m_axis_arp_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal convert_net_axis_to_axis_512_13_U0_m_axis_arp_TSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal convert_net_axis_to_axis_512_13_U0_m_axis_arp_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal convert_net_axis_to_axis_512_14_U0_ap_start : STD_LOGIC;
    signal convert_net_axis_to_axis_512_14_U0_ap_done : STD_LOGIC;
    signal convert_net_axis_to_axis_512_14_U0_ap_continue : STD_LOGIC;
    signal convert_net_axis_to_axis_512_14_U0_ap_idle : STD_LOGIC;
    signal convert_net_axis_to_axis_512_14_U0_ap_ready : STD_LOGIC;
    signal convert_net_axis_to_axis_512_14_U0_m_axis_icmpv6_internal_read : STD_LOGIC;
    signal convert_net_axis_to_axis_512_14_U0_m_axis_icmpv6_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal convert_net_axis_to_axis_512_14_U0_m_axis_icmpv6_TVALID : STD_LOGIC;
    signal convert_net_axis_to_axis_512_14_U0_m_axis_icmpv6_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal convert_net_axis_to_axis_512_14_U0_m_axis_icmpv6_TSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal convert_net_axis_to_axis_512_14_U0_m_axis_icmpv6_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal convert_net_axis_to_axis_512_15_U0_ap_start : STD_LOGIC;
    signal convert_net_axis_to_axis_512_15_U0_ap_done : STD_LOGIC;
    signal convert_net_axis_to_axis_512_15_U0_ap_continue : STD_LOGIC;
    signal convert_net_axis_to_axis_512_15_U0_ap_idle : STD_LOGIC;
    signal convert_net_axis_to_axis_512_15_U0_ap_ready : STD_LOGIC;
    signal convert_net_axis_to_axis_512_15_U0_m_axis_ipv6udp_internal_read : STD_LOGIC;
    signal convert_net_axis_to_axis_512_15_U0_m_axis_ipv6udp_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal convert_net_axis_to_axis_512_15_U0_m_axis_ipv6udp_TVALID : STD_LOGIC;
    signal convert_net_axis_to_axis_512_15_U0_m_axis_ipv6udp_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal convert_net_axis_to_axis_512_15_U0_m_axis_ipv6udp_TSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal convert_net_axis_to_axis_512_15_U0_m_axis_ipv6udp_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal convert_net_axis_to_axis_512_16_U0_ap_start : STD_LOGIC;
    signal convert_net_axis_to_axis_512_16_U0_ap_done : STD_LOGIC;
    signal convert_net_axis_to_axis_512_16_U0_ap_continue : STD_LOGIC;
    signal convert_net_axis_to_axis_512_16_U0_ap_idle : STD_LOGIC;
    signal convert_net_axis_to_axis_512_16_U0_ap_ready : STD_LOGIC;
    signal convert_net_axis_to_axis_512_16_U0_m_axis_icmp_internal_read : STD_LOGIC;
    signal convert_net_axis_to_axis_512_16_U0_m_axis_icmp_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal convert_net_axis_to_axis_512_16_U0_m_axis_icmp_TVALID : STD_LOGIC;
    signal convert_net_axis_to_axis_512_16_U0_m_axis_icmp_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal convert_net_axis_to_axis_512_16_U0_m_axis_icmp_TSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal convert_net_axis_to_axis_512_16_U0_m_axis_icmp_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal convert_net_axis_to_axis_512_17_U0_ap_start : STD_LOGIC;
    signal convert_net_axis_to_axis_512_17_U0_ap_done : STD_LOGIC;
    signal convert_net_axis_to_axis_512_17_U0_ap_continue : STD_LOGIC;
    signal convert_net_axis_to_axis_512_17_U0_ap_idle : STD_LOGIC;
    signal convert_net_axis_to_axis_512_17_U0_ap_ready : STD_LOGIC;
    signal convert_net_axis_to_axis_512_17_U0_m_axis_udp_internal_read : STD_LOGIC;
    signal convert_net_axis_to_axis_512_17_U0_m_axis_udp_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal convert_net_axis_to_axis_512_17_U0_m_axis_udp_TVALID : STD_LOGIC;
    signal convert_net_axis_to_axis_512_17_U0_m_axis_udp_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal convert_net_axis_to_axis_512_17_U0_m_axis_udp_TSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal convert_net_axis_to_axis_512_17_U0_m_axis_udp_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal convert_net_axis_to_axis_512_18_U0_ap_start : STD_LOGIC;
    signal convert_net_axis_to_axis_512_18_U0_ap_done : STD_LOGIC;
    signal convert_net_axis_to_axis_512_18_U0_ap_continue : STD_LOGIC;
    signal convert_net_axis_to_axis_512_18_U0_ap_idle : STD_LOGIC;
    signal convert_net_axis_to_axis_512_18_U0_ap_ready : STD_LOGIC;
    signal convert_net_axis_to_axis_512_18_U0_m_axis_tcp_internal_read : STD_LOGIC;
    signal convert_net_axis_to_axis_512_18_U0_m_axis_tcp_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal convert_net_axis_to_axis_512_18_U0_m_axis_tcp_TVALID : STD_LOGIC;
    signal convert_net_axis_to_axis_512_18_U0_m_axis_tcp_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal convert_net_axis_to_axis_512_18_U0_m_axis_tcp_TSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal convert_net_axis_to_axis_512_18_U0_m_axis_tcp_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal convert_net_axis_to_axis_512_U0_ap_start : STD_LOGIC;
    signal convert_net_axis_to_axis_512_U0_ap_done : STD_LOGIC;
    signal convert_net_axis_to_axis_512_U0_ap_continue : STD_LOGIC;
    signal convert_net_axis_to_axis_512_U0_ap_idle : STD_LOGIC;
    signal convert_net_axis_to_axis_512_U0_ap_ready : STD_LOGIC;
    signal convert_net_axis_to_axis_512_U0_m_axis_roce_internal_read : STD_LOGIC;
    signal convert_net_axis_to_axis_512_U0_m_axis_roce_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal convert_net_axis_to_axis_512_U0_m_axis_roce_TVALID : STD_LOGIC;
    signal convert_net_axis_to_axis_512_U0_m_axis_roce_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal convert_net_axis_to_axis_512_U0_m_axis_roce_TSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal convert_net_axis_to_axis_512_U0_m_axis_roce_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal detect_eth_protocol_512_U0_ap_start : STD_LOGIC;
    signal detect_eth_protocol_512_U0_ap_done : STD_LOGIC;
    signal detect_eth_protocol_512_U0_ap_continue : STD_LOGIC;
    signal detect_eth_protocol_512_U0_ap_idle : STD_LOGIC;
    signal detect_eth_protocol_512_U0_ap_ready : STD_LOGIC;
    signal detect_eth_protocol_512_U0_s_axis_raw_internal_read : STD_LOGIC;
    signal detect_eth_protocol_512_U0_ethDataFifo_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal detect_eth_protocol_512_U0_ethDataFifo_write : STD_LOGIC;
    signal detect_eth_protocol_512_U0_etherTypeFifo_din : STD_LOGIC_VECTOR (15 downto 0);
    signal detect_eth_protocol_512_U0_etherTypeFifo_write : STD_LOGIC;
    signal route_by_eth_protocol_512_U0_ap_start : STD_LOGIC;
    signal route_by_eth_protocol_512_U0_ap_done : STD_LOGIC;
    signal route_by_eth_protocol_512_U0_ap_continue : STD_LOGIC;
    signal route_by_eth_protocol_512_U0_ap_idle : STD_LOGIC;
    signal route_by_eth_protocol_512_U0_ap_ready : STD_LOGIC;
    signal route_by_eth_protocol_512_U0_etherTypeFifo_read : STD_LOGIC;
    signal route_by_eth_protocol_512_U0_ethDataFifo_read : STD_LOGIC;
    signal route_by_eth_protocol_512_U0_ipv6ShiftFifo_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal route_by_eth_protocol_512_U0_ipv6ShiftFifo_write : STD_LOGIC;
    signal route_by_eth_protocol_512_U0_ipv4ShiftFifo_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal route_by_eth_protocol_512_U0_ipv4ShiftFifo_write : STD_LOGIC;
    signal route_by_eth_protocol_512_U0_m_axis_arp_internal_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal route_by_eth_protocol_512_U0_m_axis_arp_internal_write : STD_LOGIC;
    signal ip_handler_rshiftWordByOctet_net_axis_512_512_1_U0_ap_start : STD_LOGIC;
    signal ip_handler_rshiftWordByOctet_net_axis_512_512_1_U0_ap_done : STD_LOGIC;
    signal ip_handler_rshiftWordByOctet_net_axis_512_512_1_U0_ap_continue : STD_LOGIC;
    signal ip_handler_rshiftWordByOctet_net_axis_512_512_1_U0_ap_idle : STD_LOGIC;
    signal ip_handler_rshiftWordByOctet_net_axis_512_512_1_U0_ap_ready : STD_LOGIC;
    signal ip_handler_rshiftWordByOctet_net_axis_512_512_1_U0_ipv4ShiftFifo_read : STD_LOGIC;
    signal ip_handler_rshiftWordByOctet_net_axis_512_512_1_U0_ipDataFifo_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal ip_handler_rshiftWordByOctet_net_axis_512_512_1_U0_ipDataFifo_write : STD_LOGIC;
    signal ip_handler_rshiftWordByOctet_net_axis_512_512_3_U0_ap_start : STD_LOGIC;
    signal ip_handler_rshiftWordByOctet_net_axis_512_512_3_U0_ap_done : STD_LOGIC;
    signal ip_handler_rshiftWordByOctet_net_axis_512_512_3_U0_ap_continue : STD_LOGIC;
    signal ip_handler_rshiftWordByOctet_net_axis_512_512_3_U0_ap_idle : STD_LOGIC;
    signal ip_handler_rshiftWordByOctet_net_axis_512_512_3_U0_ap_ready : STD_LOGIC;
    signal ip_handler_rshiftWordByOctet_net_axis_512_512_3_U0_ipv6ShiftFifo_read : STD_LOGIC;
    signal ip_handler_rshiftWordByOctet_net_axis_512_512_3_U0_ipv6DataFifo_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal ip_handler_rshiftWordByOctet_net_axis_512_512_3_U0_ipv6DataFifo_write : STD_LOGIC;
    signal extract_ip_meta_512_U0_ap_start : STD_LOGIC;
    signal extract_ip_meta_512_U0_ap_done : STD_LOGIC;
    signal extract_ip_meta_512_U0_ap_continue : STD_LOGIC;
    signal extract_ip_meta_512_U0_ap_idle : STD_LOGIC;
    signal extract_ip_meta_512_U0_ap_ready : STD_LOGIC;
    signal extract_ip_meta_512_U0_ipDataFifo_read : STD_LOGIC;
    signal extract_ip_meta_512_U0_myIpAddress_read : STD_LOGIC;
    signal extract_ip_meta_512_U0_ipDataMetaFifo_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal extract_ip_meta_512_U0_ipDataMetaFifo_write : STD_LOGIC;
    signal extract_ip_meta_512_U0_validIpAddressFifo_din : STD_LOGIC_VECTOR (0 downto 0);
    signal extract_ip_meta_512_U0_validIpAddressFifo_write : STD_LOGIC;
    signal extract_ip_meta_512_U0_ipv4ProtocolFifo_din : STD_LOGIC_VECTOR (7 downto 0);
    signal extract_ip_meta_512_U0_ipv4ProtocolFifo_write : STD_LOGIC;
    signal ip_handler_compute_ipv4_checksum_U0_ap_start : STD_LOGIC;
    signal ip_handler_compute_ipv4_checksum_U0_ap_done : STD_LOGIC;
    signal ip_handler_compute_ipv4_checksum_U0_ap_continue : STD_LOGIC;
    signal ip_handler_compute_ipv4_checksum_U0_ap_idle : STD_LOGIC;
    signal ip_handler_compute_ipv4_checksum_U0_ap_ready : STD_LOGIC;
    signal ip_handler_compute_ipv4_checksum_U0_ipDataMetaFifo_read : STD_LOGIC;
    signal ip_handler_compute_ipv4_checksum_U0_ipDataCheckFifo_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal ip_handler_compute_ipv4_checksum_U0_ipDataCheckFifo_write : STD_LOGIC;
    signal ip_handler_compute_ipv4_checksum_U0_iph_subSumsFifoOut_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal ip_handler_compute_ipv4_checksum_U0_iph_subSumsFifoOut_write : STD_LOGIC;
    signal ip_handler_check_ipv4_checksum_32_U0_ap_start : STD_LOGIC;
    signal ip_handler_check_ipv4_checksum_32_U0_ap_done : STD_LOGIC;
    signal ip_handler_check_ipv4_checksum_32_U0_ap_continue : STD_LOGIC;
    signal ip_handler_check_ipv4_checksum_32_U0_ap_idle : STD_LOGIC;
    signal ip_handler_check_ipv4_checksum_32_U0_ap_ready : STD_LOGIC;
    signal ip_handler_check_ipv4_checksum_32_U0_iph_subSumsFifoOut_read : STD_LOGIC;
    signal ip_handler_check_ipv4_checksum_32_U0_validChecksumFifo_din : STD_LOGIC_VECTOR (0 downto 0);
    signal ip_handler_check_ipv4_checksum_32_U0_validChecksumFifo_write : STD_LOGIC;
    signal ip_invalid_dropper_512_U0_ap_start : STD_LOGIC;
    signal ip_invalid_dropper_512_U0_ap_done : STD_LOGIC;
    signal ip_invalid_dropper_512_U0_ap_continue : STD_LOGIC;
    signal ip_invalid_dropper_512_U0_ap_idle : STD_LOGIC;
    signal ip_invalid_dropper_512_U0_ap_ready : STD_LOGIC;
    signal ip_invalid_dropper_512_U0_ipDataCheckFifo_read : STD_LOGIC;
    signal ip_invalid_dropper_512_U0_validChecksumFifo_read : STD_LOGIC;
    signal ip_invalid_dropper_512_U0_validIpAddressFifo_read : STD_LOGIC;
    signal ip_invalid_dropper_512_U0_ipDataDropFifo_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal ip_invalid_dropper_512_U0_ipDataDropFifo_write : STD_LOGIC;
    signal ip_invalid_dropper_512_U0_ipv4ValidFifo_din : STD_LOGIC_VECTOR (0 downto 0);
    signal ip_invalid_dropper_512_U0_ipv4ValidFifo_write : STD_LOGIC;
    signal cut_length_U0_ap_start : STD_LOGIC;
    signal cut_length_U0_ap_done : STD_LOGIC;
    signal cut_length_U0_ap_continue : STD_LOGIC;
    signal cut_length_U0_ap_idle : STD_LOGIC;
    signal cut_length_U0_ap_ready : STD_LOGIC;
    signal cut_length_U0_ipDataDropFifo_read : STD_LOGIC;
    signal cut_length_U0_ipDataCutFifo_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal cut_length_U0_ipDataCutFifo_write : STD_LOGIC;
    signal detect_ipv4_protocol_512_U0_ap_start : STD_LOGIC;
    signal detect_ipv4_protocol_512_U0_ap_done : STD_LOGIC;
    signal detect_ipv4_protocol_512_U0_ap_continue : STD_LOGIC;
    signal detect_ipv4_protocol_512_U0_ap_idle : STD_LOGIC;
    signal detect_ipv4_protocol_512_U0_ap_ready : STD_LOGIC;
    signal detect_ipv4_protocol_512_U0_ipv4ProtocolFifo_read : STD_LOGIC;
    signal detect_ipv4_protocol_512_U0_ipv4ValidFifo_read : STD_LOGIC;
    signal detect_ipv4_protocol_512_U0_ipDataCutFifo_read : STD_LOGIC;
    signal detect_ipv4_protocol_512_U0_m_axis_tcp_internal_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal detect_ipv4_protocol_512_U0_m_axis_tcp_internal_write : STD_LOGIC;
    signal detect_ipv4_protocol_512_U0_udpDataFifo_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal detect_ipv4_protocol_512_U0_udpDataFifo_write : STD_LOGIC;
    signal detect_ipv4_protocol_512_U0_m_axis_icmp_internal_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal detect_ipv4_protocol_512_U0_m_axis_icmp_internal_write : STD_LOGIC;
    signal detect_ipv6_protocol_512_U0_ap_start : STD_LOGIC;
    signal detect_ipv6_protocol_512_U0_ap_done : STD_LOGIC;
    signal detect_ipv6_protocol_512_U0_ap_continue : STD_LOGIC;
    signal detect_ipv6_protocol_512_U0_ap_idle : STD_LOGIC;
    signal detect_ipv6_protocol_512_U0_ap_ready : STD_LOGIC;
    signal detect_ipv6_protocol_512_U0_ipv6DataFifo_read : STD_LOGIC;
    signal detect_ipv6_protocol_512_U0_m_axis_ipv6udp_internal_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal detect_ipv6_protocol_512_U0_m_axis_ipv6udp_internal_write : STD_LOGIC;
    signal detect_ipv6_protocol_512_U0_m_axis_icmpv6_internal_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal detect_ipv6_protocol_512_U0_m_axis_icmpv6_internal_write : STD_LOGIC;
    signal ip_handler_duplicate_stream_net_axis_512_U0_ap_start : STD_LOGIC;
    signal ip_handler_duplicate_stream_net_axis_512_U0_ap_done : STD_LOGIC;
    signal ip_handler_duplicate_stream_net_axis_512_U0_ap_continue : STD_LOGIC;
    signal ip_handler_duplicate_stream_net_axis_512_U0_ap_idle : STD_LOGIC;
    signal ip_handler_duplicate_stream_net_axis_512_U0_ap_ready : STD_LOGIC;
    signal ip_handler_duplicate_stream_net_axis_512_U0_udpDataFifo_read : STD_LOGIC;
    signal ip_handler_duplicate_stream_net_axis_512_U0_m_axis_udp_internal_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal ip_handler_duplicate_stream_net_axis_512_U0_m_axis_udp_internal_write : STD_LOGIC;
    signal ip_handler_duplicate_stream_net_axis_512_U0_m_axis_roce_internal_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal ip_handler_duplicate_stream_net_axis_512_U0_m_axis_roce_internal_write : STD_LOGIC;
    signal myIpAddress_c1_full_n : STD_LOGIC;
    signal myIpAddress_c1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal myIpAddress_c1_empty_n : STD_LOGIC;
    signal myIpAddress_c_full_n : STD_LOGIC;
    signal myIpAddress_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal myIpAddress_c_empty_n : STD_LOGIC;
    signal s_axis_raw_internal_full_n : STD_LOGIC;
    signal s_axis_raw_internal_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal s_axis_raw_internal_empty_n : STD_LOGIC;
    signal m_axis_arp_internal_full_n : STD_LOGIC;
    signal m_axis_arp_internal_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal m_axis_arp_internal_empty_n : STD_LOGIC;
    signal m_axis_icmpv6_internal_full_n : STD_LOGIC;
    signal m_axis_icmpv6_internal_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal m_axis_icmpv6_internal_empty_n : STD_LOGIC;
    signal m_axis_ipv6udp_internal_full_n : STD_LOGIC;
    signal m_axis_ipv6udp_internal_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal m_axis_ipv6udp_internal_empty_n : STD_LOGIC;
    signal m_axis_icmp_internal_full_n : STD_LOGIC;
    signal m_axis_icmp_internal_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal m_axis_icmp_internal_empty_n : STD_LOGIC;
    signal m_axis_udp_internal_full_n : STD_LOGIC;
    signal m_axis_udp_internal_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal m_axis_udp_internal_empty_n : STD_LOGIC;
    signal m_axis_tcp_internal_full_n : STD_LOGIC;
    signal m_axis_tcp_internal_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal m_axis_tcp_internal_empty_n : STD_LOGIC;
    signal m_axis_roce_internal_full_n : STD_LOGIC;
    signal m_axis_roce_internal_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal m_axis_roce_internal_empty_n : STD_LOGIC;
    signal etherTypeFifo_full_n : STD_LOGIC;
    signal etherTypeFifo_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal etherTypeFifo_empty_n : STD_LOGIC;
    signal ethDataFifo_full_n : STD_LOGIC;
    signal ethDataFifo_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal ethDataFifo_empty_n : STD_LOGIC;
    signal ipv4ShiftFifo_full_n : STD_LOGIC;
    signal ipv4ShiftFifo_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal ipv4ShiftFifo_empty_n : STD_LOGIC;
    signal ipv6ShiftFifo_full_n : STD_LOGIC;
    signal ipv6ShiftFifo_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal ipv6ShiftFifo_empty_n : STD_LOGIC;
    signal ipDataFifo_full_n : STD_LOGIC;
    signal ipDataFifo_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal ipDataFifo_empty_n : STD_LOGIC;
    signal ipv6DataFifo_full_n : STD_LOGIC;
    signal ipv6DataFifo_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal ipv6DataFifo_empty_n : STD_LOGIC;
    signal ipDataMetaFifo_full_n : STD_LOGIC;
    signal ipDataMetaFifo_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal ipDataMetaFifo_empty_n : STD_LOGIC;
    signal validIpAddressFifo_full_n : STD_LOGIC;
    signal validIpAddressFifo_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal validIpAddressFifo_empty_n : STD_LOGIC;
    signal ipv4ProtocolFifo_full_n : STD_LOGIC;
    signal ipv4ProtocolFifo_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal ipv4ProtocolFifo_empty_n : STD_LOGIC;
    signal ipDataCheckFifo_full_n : STD_LOGIC;
    signal ipDataCheckFifo_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal ipDataCheckFifo_empty_n : STD_LOGIC;
    signal iph_subSumsFifoOut_full_n : STD_LOGIC;
    signal iph_subSumsFifoOut_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal iph_subSumsFifoOut_empty_n : STD_LOGIC;
    signal validChecksumFifo_full_n : STD_LOGIC;
    signal validChecksumFifo_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal validChecksumFifo_empty_n : STD_LOGIC;
    signal ipv4ValidFifo_full_n : STD_LOGIC;
    signal ipv4ValidFifo_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal ipv4ValidFifo_empty_n : STD_LOGIC;
    signal ipDataDropFifo_full_n : STD_LOGIC;
    signal ipDataDropFifo_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal ipDataDropFifo_empty_n : STD_LOGIC;
    signal ipDataCutFifo_full_n : STD_LOGIC;
    signal ipDataCutFifo_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal ipDataCutFifo_empty_n : STD_LOGIC;
    signal udpDataFifo_full_n : STD_LOGIC;
    signal udpDataFifo_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal udpDataFifo_empty_n : STD_LOGIC;

    component ip_handler_top_ip_handler_top_entry3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        myIpAddress : IN STD_LOGIC_VECTOR (31 downto 0);
        myIpAddress_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        myIpAddress_out_full_n : IN STD_LOGIC;
        myIpAddress_out_write : OUT STD_LOGIC );
    end component;


    component ip_handler_top_ip_handler_top_entry19 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        myIpAddress_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        myIpAddress_empty_n : IN STD_LOGIC;
        myIpAddress_read : OUT STD_LOGIC;
        myIpAddress_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        myIpAddress_out_full_n : IN STD_LOGIC;
        myIpAddress_out_write : OUT STD_LOGIC );
    end component;


    component ip_handler_top_convert_axis_to_net_axis_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_axis_raw_TVALID : IN STD_LOGIC;
        s_axis_raw_internal_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        s_axis_raw_internal_full_n : IN STD_LOGIC;
        s_axis_raw_internal_write : OUT STD_LOGIC;
        s_axis_raw_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        s_axis_raw_TREADY : OUT STD_LOGIC;
        s_axis_raw_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
        s_axis_raw_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        s_axis_raw_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component ip_handler_top_convert_net_axis_to_axis_512_13 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axis_arp_internal_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        m_axis_arp_internal_empty_n : IN STD_LOGIC;
        m_axis_arp_internal_read : OUT STD_LOGIC;
        m_axis_arp_TREADY : IN STD_LOGIC;
        m_axis_arp_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axis_arp_TVALID : OUT STD_LOGIC;
        m_axis_arp_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_arp_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_arp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component ip_handler_top_convert_net_axis_to_axis_512_14 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axis_icmpv6_internal_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        m_axis_icmpv6_internal_empty_n : IN STD_LOGIC;
        m_axis_icmpv6_internal_read : OUT STD_LOGIC;
        m_axis_icmpv6_TREADY : IN STD_LOGIC;
        m_axis_icmpv6_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axis_icmpv6_TVALID : OUT STD_LOGIC;
        m_axis_icmpv6_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_icmpv6_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_icmpv6_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component ip_handler_top_convert_net_axis_to_axis_512_15 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axis_ipv6udp_internal_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        m_axis_ipv6udp_internal_empty_n : IN STD_LOGIC;
        m_axis_ipv6udp_internal_read : OUT STD_LOGIC;
        m_axis_ipv6udp_TREADY : IN STD_LOGIC;
        m_axis_ipv6udp_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axis_ipv6udp_TVALID : OUT STD_LOGIC;
        m_axis_ipv6udp_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_ipv6udp_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_ipv6udp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component ip_handler_top_convert_net_axis_to_axis_512_16 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axis_icmp_internal_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        m_axis_icmp_internal_empty_n : IN STD_LOGIC;
        m_axis_icmp_internal_read : OUT STD_LOGIC;
        m_axis_icmp_TREADY : IN STD_LOGIC;
        m_axis_icmp_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axis_icmp_TVALID : OUT STD_LOGIC;
        m_axis_icmp_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_icmp_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_icmp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component ip_handler_top_convert_net_axis_to_axis_512_17 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axis_udp_internal_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        m_axis_udp_internal_empty_n : IN STD_LOGIC;
        m_axis_udp_internal_read : OUT STD_LOGIC;
        m_axis_udp_TREADY : IN STD_LOGIC;
        m_axis_udp_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axis_udp_TVALID : OUT STD_LOGIC;
        m_axis_udp_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_udp_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_udp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component ip_handler_top_convert_net_axis_to_axis_512_18 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axis_tcp_internal_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        m_axis_tcp_internal_empty_n : IN STD_LOGIC;
        m_axis_tcp_internal_read : OUT STD_LOGIC;
        m_axis_tcp_TREADY : IN STD_LOGIC;
        m_axis_tcp_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axis_tcp_TVALID : OUT STD_LOGIC;
        m_axis_tcp_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_tcp_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_tcp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component ip_handler_top_convert_net_axis_to_axis_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axis_roce_internal_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        m_axis_roce_internal_empty_n : IN STD_LOGIC;
        m_axis_roce_internal_read : OUT STD_LOGIC;
        m_axis_roce_TREADY : IN STD_LOGIC;
        m_axis_roce_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axis_roce_TVALID : OUT STD_LOGIC;
        m_axis_roce_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_roce_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_roce_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component ip_handler_top_detect_eth_protocol_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_axis_raw_internal_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        s_axis_raw_internal_empty_n : IN STD_LOGIC;
        s_axis_raw_internal_read : OUT STD_LOGIC;
        ethDataFifo_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ethDataFifo_full_n : IN STD_LOGIC;
        ethDataFifo_write : OUT STD_LOGIC;
        etherTypeFifo_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        etherTypeFifo_full_n : IN STD_LOGIC;
        etherTypeFifo_write : OUT STD_LOGIC );
    end component;


    component ip_handler_top_route_by_eth_protocol_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        etherTypeFifo_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        etherTypeFifo_empty_n : IN STD_LOGIC;
        etherTypeFifo_read : OUT STD_LOGIC;
        ethDataFifo_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        ethDataFifo_empty_n : IN STD_LOGIC;
        ethDataFifo_read : OUT STD_LOGIC;
        ipv6ShiftFifo_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ipv6ShiftFifo_full_n : IN STD_LOGIC;
        ipv6ShiftFifo_write : OUT STD_LOGIC;
        ipv4ShiftFifo_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ipv4ShiftFifo_full_n : IN STD_LOGIC;
        ipv4ShiftFifo_write : OUT STD_LOGIC;
        m_axis_arp_internal_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        m_axis_arp_internal_full_n : IN STD_LOGIC;
        m_axis_arp_internal_write : OUT STD_LOGIC );
    end component;


    component ip_handler_top_ip_handler_rshiftWordByOctet_net_axis_512_512_1_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ipv4ShiftFifo_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        ipv4ShiftFifo_empty_n : IN STD_LOGIC;
        ipv4ShiftFifo_read : OUT STD_LOGIC;
        ipDataFifo_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ipDataFifo_full_n : IN STD_LOGIC;
        ipDataFifo_write : OUT STD_LOGIC );
    end component;


    component ip_handler_top_ip_handler_rshiftWordByOctet_net_axis_512_512_3_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ipv6ShiftFifo_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        ipv6ShiftFifo_empty_n : IN STD_LOGIC;
        ipv6ShiftFifo_read : OUT STD_LOGIC;
        ipv6DataFifo_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ipv6DataFifo_full_n : IN STD_LOGIC;
        ipv6DataFifo_write : OUT STD_LOGIC );
    end component;


    component ip_handler_top_extract_ip_meta_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ipDataFifo_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        ipDataFifo_empty_n : IN STD_LOGIC;
        ipDataFifo_read : OUT STD_LOGIC;
        myIpAddress_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        myIpAddress_empty_n : IN STD_LOGIC;
        myIpAddress_read : OUT STD_LOGIC;
        ipDataMetaFifo_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ipDataMetaFifo_full_n : IN STD_LOGIC;
        ipDataMetaFifo_write : OUT STD_LOGIC;
        validIpAddressFifo_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        validIpAddressFifo_full_n : IN STD_LOGIC;
        validIpAddressFifo_write : OUT STD_LOGIC;
        ipv4ProtocolFifo_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        ipv4ProtocolFifo_full_n : IN STD_LOGIC;
        ipv4ProtocolFifo_write : OUT STD_LOGIC );
    end component;


    component ip_handler_top_ip_handler_compute_ipv4_checksum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ipDataMetaFifo_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        ipDataMetaFifo_empty_n : IN STD_LOGIC;
        ipDataMetaFifo_read : OUT STD_LOGIC;
        ipDataCheckFifo_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ipDataCheckFifo_full_n : IN STD_LOGIC;
        ipDataCheckFifo_write : OUT STD_LOGIC;
        iph_subSumsFifoOut_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        iph_subSumsFifoOut_full_n : IN STD_LOGIC;
        iph_subSumsFifoOut_write : OUT STD_LOGIC );
    end component;


    component ip_handler_top_ip_handler_check_ipv4_checksum_32_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        iph_subSumsFifoOut_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        iph_subSumsFifoOut_empty_n : IN STD_LOGIC;
        iph_subSumsFifoOut_read : OUT STD_LOGIC;
        validChecksumFifo_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        validChecksumFifo_full_n : IN STD_LOGIC;
        validChecksumFifo_write : OUT STD_LOGIC );
    end component;


    component ip_handler_top_ip_invalid_dropper_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ipDataCheckFifo_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        ipDataCheckFifo_empty_n : IN STD_LOGIC;
        ipDataCheckFifo_read : OUT STD_LOGIC;
        validChecksumFifo_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        validChecksumFifo_empty_n : IN STD_LOGIC;
        validChecksumFifo_read : OUT STD_LOGIC;
        validIpAddressFifo_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        validIpAddressFifo_empty_n : IN STD_LOGIC;
        validIpAddressFifo_read : OUT STD_LOGIC;
        ipDataDropFifo_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ipDataDropFifo_full_n : IN STD_LOGIC;
        ipDataDropFifo_write : OUT STD_LOGIC;
        ipv4ValidFifo_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        ipv4ValidFifo_full_n : IN STD_LOGIC;
        ipv4ValidFifo_write : OUT STD_LOGIC );
    end component;


    component ip_handler_top_cut_length IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ipDataDropFifo_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        ipDataDropFifo_empty_n : IN STD_LOGIC;
        ipDataDropFifo_read : OUT STD_LOGIC;
        ipDataCutFifo_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ipDataCutFifo_full_n : IN STD_LOGIC;
        ipDataCutFifo_write : OUT STD_LOGIC );
    end component;


    component ip_handler_top_detect_ipv4_protocol_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ipv4ProtocolFifo_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        ipv4ProtocolFifo_empty_n : IN STD_LOGIC;
        ipv4ProtocolFifo_read : OUT STD_LOGIC;
        ipv4ValidFifo_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        ipv4ValidFifo_empty_n : IN STD_LOGIC;
        ipv4ValidFifo_read : OUT STD_LOGIC;
        ipDataCutFifo_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        ipDataCutFifo_empty_n : IN STD_LOGIC;
        ipDataCutFifo_read : OUT STD_LOGIC;
        m_axis_tcp_internal_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        m_axis_tcp_internal_full_n : IN STD_LOGIC;
        m_axis_tcp_internal_write : OUT STD_LOGIC;
        udpDataFifo_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        udpDataFifo_full_n : IN STD_LOGIC;
        udpDataFifo_write : OUT STD_LOGIC;
        m_axis_icmp_internal_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        m_axis_icmp_internal_full_n : IN STD_LOGIC;
        m_axis_icmp_internal_write : OUT STD_LOGIC );
    end component;


    component ip_handler_top_detect_ipv6_protocol_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ipv6DataFifo_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        ipv6DataFifo_empty_n : IN STD_LOGIC;
        ipv6DataFifo_read : OUT STD_LOGIC;
        m_axis_ipv6udp_internal_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        m_axis_ipv6udp_internal_full_n : IN STD_LOGIC;
        m_axis_ipv6udp_internal_write : OUT STD_LOGIC;
        m_axis_icmpv6_internal_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        m_axis_icmpv6_internal_full_n : IN STD_LOGIC;
        m_axis_icmpv6_internal_write : OUT STD_LOGIC );
    end component;


    component ip_handler_top_ip_handler_duplicate_stream_net_axis_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        udpDataFifo_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        udpDataFifo_empty_n : IN STD_LOGIC;
        udpDataFifo_read : OUT STD_LOGIC;
        m_axis_udp_internal_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        m_axis_udp_internal_full_n : IN STD_LOGIC;
        m_axis_udp_internal_write : OUT STD_LOGIC;
        m_axis_roce_internal_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        m_axis_roce_internal_full_n : IN STD_LOGIC;
        m_axis_roce_internal_write : OUT STD_LOGIC );
    end component;


    component ip_handler_top_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ip_handler_top_fifo_w32_d6_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ip_handler_top_fifo_w1024_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1023 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1023 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ip_handler_top_fifo_w16_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ip_handler_top_fifo_w1024_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1023 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1023 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ip_handler_top_fifo_w1_d32_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ip_handler_top_fifo_w8_d32_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ip_handler_top_fifo_w1024_d64_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1023 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1023 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ip_handler_top_fifo_w1_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ip_handler_top_fifo_w1_d8_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    ip_handler_top_entry3_U0 : component ip_handler_top_ip_handler_top_entry3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ip_handler_top_entry3_U0_ap_start,
        ap_done => ip_handler_top_entry3_U0_ap_done,
        ap_continue => ip_handler_top_entry3_U0_ap_continue,
        ap_idle => ip_handler_top_entry3_U0_ap_idle,
        ap_ready => ip_handler_top_entry3_U0_ap_ready,
        myIpAddress => myIpAddress,
        myIpAddress_out_din => ip_handler_top_entry3_U0_myIpAddress_out_din,
        myIpAddress_out_full_n => myIpAddress_c1_full_n,
        myIpAddress_out_write => ip_handler_top_entry3_U0_myIpAddress_out_write);

    ip_handler_top_entry19_U0 : component ip_handler_top_ip_handler_top_entry19
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ip_handler_top_entry19_U0_ap_start,
        ap_done => ip_handler_top_entry19_U0_ap_done,
        ap_continue => ip_handler_top_entry19_U0_ap_continue,
        ap_idle => ip_handler_top_entry19_U0_ap_idle,
        ap_ready => ip_handler_top_entry19_U0_ap_ready,
        myIpAddress_dout => myIpAddress_c1_dout,
        myIpAddress_empty_n => myIpAddress_c1_empty_n,
        myIpAddress_read => ip_handler_top_entry19_U0_myIpAddress_read,
        myIpAddress_out_din => ip_handler_top_entry19_U0_myIpAddress_out_din,
        myIpAddress_out_full_n => myIpAddress_c_full_n,
        myIpAddress_out_write => ip_handler_top_entry19_U0_myIpAddress_out_write);

    convert_axis_to_net_axis_512_U0 : component ip_handler_top_convert_axis_to_net_axis_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => convert_axis_to_net_axis_512_U0_ap_start,
        ap_done => convert_axis_to_net_axis_512_U0_ap_done,
        ap_continue => convert_axis_to_net_axis_512_U0_ap_continue,
        ap_idle => convert_axis_to_net_axis_512_U0_ap_idle,
        ap_ready => convert_axis_to_net_axis_512_U0_ap_ready,
        s_axis_raw_TVALID => s_axis_raw_TVALID,
        s_axis_raw_internal_din => convert_axis_to_net_axis_512_U0_s_axis_raw_internal_din,
        s_axis_raw_internal_full_n => s_axis_raw_internal_full_n,
        s_axis_raw_internal_write => convert_axis_to_net_axis_512_U0_s_axis_raw_internal_write,
        s_axis_raw_TDATA => s_axis_raw_TDATA,
        s_axis_raw_TREADY => convert_axis_to_net_axis_512_U0_s_axis_raw_TREADY,
        s_axis_raw_TKEEP => s_axis_raw_TKEEP,
        s_axis_raw_TSTRB => s_axis_raw_TSTRB,
        s_axis_raw_TLAST => s_axis_raw_TLAST);

    convert_net_axis_to_axis_512_13_U0 : component ip_handler_top_convert_net_axis_to_axis_512_13
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => convert_net_axis_to_axis_512_13_U0_ap_start,
        ap_done => convert_net_axis_to_axis_512_13_U0_ap_done,
        ap_continue => convert_net_axis_to_axis_512_13_U0_ap_continue,
        ap_idle => convert_net_axis_to_axis_512_13_U0_ap_idle,
        ap_ready => convert_net_axis_to_axis_512_13_U0_ap_ready,
        m_axis_arp_internal_dout => m_axis_arp_internal_dout,
        m_axis_arp_internal_empty_n => m_axis_arp_internal_empty_n,
        m_axis_arp_internal_read => convert_net_axis_to_axis_512_13_U0_m_axis_arp_internal_read,
        m_axis_arp_TREADY => m_axis_arp_TREADY,
        m_axis_arp_TDATA => convert_net_axis_to_axis_512_13_U0_m_axis_arp_TDATA,
        m_axis_arp_TVALID => convert_net_axis_to_axis_512_13_U0_m_axis_arp_TVALID,
        m_axis_arp_TKEEP => convert_net_axis_to_axis_512_13_U0_m_axis_arp_TKEEP,
        m_axis_arp_TSTRB => convert_net_axis_to_axis_512_13_U0_m_axis_arp_TSTRB,
        m_axis_arp_TLAST => convert_net_axis_to_axis_512_13_U0_m_axis_arp_TLAST);

    convert_net_axis_to_axis_512_14_U0 : component ip_handler_top_convert_net_axis_to_axis_512_14
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => convert_net_axis_to_axis_512_14_U0_ap_start,
        ap_done => convert_net_axis_to_axis_512_14_U0_ap_done,
        ap_continue => convert_net_axis_to_axis_512_14_U0_ap_continue,
        ap_idle => convert_net_axis_to_axis_512_14_U0_ap_idle,
        ap_ready => convert_net_axis_to_axis_512_14_U0_ap_ready,
        m_axis_icmpv6_internal_dout => m_axis_icmpv6_internal_dout,
        m_axis_icmpv6_internal_empty_n => m_axis_icmpv6_internal_empty_n,
        m_axis_icmpv6_internal_read => convert_net_axis_to_axis_512_14_U0_m_axis_icmpv6_internal_read,
        m_axis_icmpv6_TREADY => m_axis_icmpv6_TREADY,
        m_axis_icmpv6_TDATA => convert_net_axis_to_axis_512_14_U0_m_axis_icmpv6_TDATA,
        m_axis_icmpv6_TVALID => convert_net_axis_to_axis_512_14_U0_m_axis_icmpv6_TVALID,
        m_axis_icmpv6_TKEEP => convert_net_axis_to_axis_512_14_U0_m_axis_icmpv6_TKEEP,
        m_axis_icmpv6_TSTRB => convert_net_axis_to_axis_512_14_U0_m_axis_icmpv6_TSTRB,
        m_axis_icmpv6_TLAST => convert_net_axis_to_axis_512_14_U0_m_axis_icmpv6_TLAST);

    convert_net_axis_to_axis_512_15_U0 : component ip_handler_top_convert_net_axis_to_axis_512_15
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => convert_net_axis_to_axis_512_15_U0_ap_start,
        ap_done => convert_net_axis_to_axis_512_15_U0_ap_done,
        ap_continue => convert_net_axis_to_axis_512_15_U0_ap_continue,
        ap_idle => convert_net_axis_to_axis_512_15_U0_ap_idle,
        ap_ready => convert_net_axis_to_axis_512_15_U0_ap_ready,
        m_axis_ipv6udp_internal_dout => m_axis_ipv6udp_internal_dout,
        m_axis_ipv6udp_internal_empty_n => m_axis_ipv6udp_internal_empty_n,
        m_axis_ipv6udp_internal_read => convert_net_axis_to_axis_512_15_U0_m_axis_ipv6udp_internal_read,
        m_axis_ipv6udp_TREADY => m_axis_ipv6udp_TREADY,
        m_axis_ipv6udp_TDATA => convert_net_axis_to_axis_512_15_U0_m_axis_ipv6udp_TDATA,
        m_axis_ipv6udp_TVALID => convert_net_axis_to_axis_512_15_U0_m_axis_ipv6udp_TVALID,
        m_axis_ipv6udp_TKEEP => convert_net_axis_to_axis_512_15_U0_m_axis_ipv6udp_TKEEP,
        m_axis_ipv6udp_TSTRB => convert_net_axis_to_axis_512_15_U0_m_axis_ipv6udp_TSTRB,
        m_axis_ipv6udp_TLAST => convert_net_axis_to_axis_512_15_U0_m_axis_ipv6udp_TLAST);

    convert_net_axis_to_axis_512_16_U0 : component ip_handler_top_convert_net_axis_to_axis_512_16
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => convert_net_axis_to_axis_512_16_U0_ap_start,
        ap_done => convert_net_axis_to_axis_512_16_U0_ap_done,
        ap_continue => convert_net_axis_to_axis_512_16_U0_ap_continue,
        ap_idle => convert_net_axis_to_axis_512_16_U0_ap_idle,
        ap_ready => convert_net_axis_to_axis_512_16_U0_ap_ready,
        m_axis_icmp_internal_dout => m_axis_icmp_internal_dout,
        m_axis_icmp_internal_empty_n => m_axis_icmp_internal_empty_n,
        m_axis_icmp_internal_read => convert_net_axis_to_axis_512_16_U0_m_axis_icmp_internal_read,
        m_axis_icmp_TREADY => m_axis_icmp_TREADY,
        m_axis_icmp_TDATA => convert_net_axis_to_axis_512_16_U0_m_axis_icmp_TDATA,
        m_axis_icmp_TVALID => convert_net_axis_to_axis_512_16_U0_m_axis_icmp_TVALID,
        m_axis_icmp_TKEEP => convert_net_axis_to_axis_512_16_U0_m_axis_icmp_TKEEP,
        m_axis_icmp_TSTRB => convert_net_axis_to_axis_512_16_U0_m_axis_icmp_TSTRB,
        m_axis_icmp_TLAST => convert_net_axis_to_axis_512_16_U0_m_axis_icmp_TLAST);

    convert_net_axis_to_axis_512_17_U0 : component ip_handler_top_convert_net_axis_to_axis_512_17
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => convert_net_axis_to_axis_512_17_U0_ap_start,
        ap_done => convert_net_axis_to_axis_512_17_U0_ap_done,
        ap_continue => convert_net_axis_to_axis_512_17_U0_ap_continue,
        ap_idle => convert_net_axis_to_axis_512_17_U0_ap_idle,
        ap_ready => convert_net_axis_to_axis_512_17_U0_ap_ready,
        m_axis_udp_internal_dout => m_axis_udp_internal_dout,
        m_axis_udp_internal_empty_n => m_axis_udp_internal_empty_n,
        m_axis_udp_internal_read => convert_net_axis_to_axis_512_17_U0_m_axis_udp_internal_read,
        m_axis_udp_TREADY => m_axis_udp_TREADY,
        m_axis_udp_TDATA => convert_net_axis_to_axis_512_17_U0_m_axis_udp_TDATA,
        m_axis_udp_TVALID => convert_net_axis_to_axis_512_17_U0_m_axis_udp_TVALID,
        m_axis_udp_TKEEP => convert_net_axis_to_axis_512_17_U0_m_axis_udp_TKEEP,
        m_axis_udp_TSTRB => convert_net_axis_to_axis_512_17_U0_m_axis_udp_TSTRB,
        m_axis_udp_TLAST => convert_net_axis_to_axis_512_17_U0_m_axis_udp_TLAST);

    convert_net_axis_to_axis_512_18_U0 : component ip_handler_top_convert_net_axis_to_axis_512_18
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => convert_net_axis_to_axis_512_18_U0_ap_start,
        ap_done => convert_net_axis_to_axis_512_18_U0_ap_done,
        ap_continue => convert_net_axis_to_axis_512_18_U0_ap_continue,
        ap_idle => convert_net_axis_to_axis_512_18_U0_ap_idle,
        ap_ready => convert_net_axis_to_axis_512_18_U0_ap_ready,
        m_axis_tcp_internal_dout => m_axis_tcp_internal_dout,
        m_axis_tcp_internal_empty_n => m_axis_tcp_internal_empty_n,
        m_axis_tcp_internal_read => convert_net_axis_to_axis_512_18_U0_m_axis_tcp_internal_read,
        m_axis_tcp_TREADY => m_axis_tcp_TREADY,
        m_axis_tcp_TDATA => convert_net_axis_to_axis_512_18_U0_m_axis_tcp_TDATA,
        m_axis_tcp_TVALID => convert_net_axis_to_axis_512_18_U0_m_axis_tcp_TVALID,
        m_axis_tcp_TKEEP => convert_net_axis_to_axis_512_18_U0_m_axis_tcp_TKEEP,
        m_axis_tcp_TSTRB => convert_net_axis_to_axis_512_18_U0_m_axis_tcp_TSTRB,
        m_axis_tcp_TLAST => convert_net_axis_to_axis_512_18_U0_m_axis_tcp_TLAST);

    convert_net_axis_to_axis_512_U0 : component ip_handler_top_convert_net_axis_to_axis_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => convert_net_axis_to_axis_512_U0_ap_start,
        ap_done => convert_net_axis_to_axis_512_U0_ap_done,
        ap_continue => convert_net_axis_to_axis_512_U0_ap_continue,
        ap_idle => convert_net_axis_to_axis_512_U0_ap_idle,
        ap_ready => convert_net_axis_to_axis_512_U0_ap_ready,
        m_axis_roce_internal_dout => m_axis_roce_internal_dout,
        m_axis_roce_internal_empty_n => m_axis_roce_internal_empty_n,
        m_axis_roce_internal_read => convert_net_axis_to_axis_512_U0_m_axis_roce_internal_read,
        m_axis_roce_TREADY => m_axis_roce_TREADY,
        m_axis_roce_TDATA => convert_net_axis_to_axis_512_U0_m_axis_roce_TDATA,
        m_axis_roce_TVALID => convert_net_axis_to_axis_512_U0_m_axis_roce_TVALID,
        m_axis_roce_TKEEP => convert_net_axis_to_axis_512_U0_m_axis_roce_TKEEP,
        m_axis_roce_TSTRB => convert_net_axis_to_axis_512_U0_m_axis_roce_TSTRB,
        m_axis_roce_TLAST => convert_net_axis_to_axis_512_U0_m_axis_roce_TLAST);

    detect_eth_protocol_512_U0 : component ip_handler_top_detect_eth_protocol_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => detect_eth_protocol_512_U0_ap_start,
        ap_done => detect_eth_protocol_512_U0_ap_done,
        ap_continue => detect_eth_protocol_512_U0_ap_continue,
        ap_idle => detect_eth_protocol_512_U0_ap_idle,
        ap_ready => detect_eth_protocol_512_U0_ap_ready,
        s_axis_raw_internal_dout => s_axis_raw_internal_dout,
        s_axis_raw_internal_empty_n => s_axis_raw_internal_empty_n,
        s_axis_raw_internal_read => detect_eth_protocol_512_U0_s_axis_raw_internal_read,
        ethDataFifo_din => detect_eth_protocol_512_U0_ethDataFifo_din,
        ethDataFifo_full_n => ethDataFifo_full_n,
        ethDataFifo_write => detect_eth_protocol_512_U0_ethDataFifo_write,
        etherTypeFifo_din => detect_eth_protocol_512_U0_etherTypeFifo_din,
        etherTypeFifo_full_n => etherTypeFifo_full_n,
        etherTypeFifo_write => detect_eth_protocol_512_U0_etherTypeFifo_write);

    route_by_eth_protocol_512_U0 : component ip_handler_top_route_by_eth_protocol_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => route_by_eth_protocol_512_U0_ap_start,
        ap_done => route_by_eth_protocol_512_U0_ap_done,
        ap_continue => route_by_eth_protocol_512_U0_ap_continue,
        ap_idle => route_by_eth_protocol_512_U0_ap_idle,
        ap_ready => route_by_eth_protocol_512_U0_ap_ready,
        etherTypeFifo_dout => etherTypeFifo_dout,
        etherTypeFifo_empty_n => etherTypeFifo_empty_n,
        etherTypeFifo_read => route_by_eth_protocol_512_U0_etherTypeFifo_read,
        ethDataFifo_dout => ethDataFifo_dout,
        ethDataFifo_empty_n => ethDataFifo_empty_n,
        ethDataFifo_read => route_by_eth_protocol_512_U0_ethDataFifo_read,
        ipv6ShiftFifo_din => route_by_eth_protocol_512_U0_ipv6ShiftFifo_din,
        ipv6ShiftFifo_full_n => ipv6ShiftFifo_full_n,
        ipv6ShiftFifo_write => route_by_eth_protocol_512_U0_ipv6ShiftFifo_write,
        ipv4ShiftFifo_din => route_by_eth_protocol_512_U0_ipv4ShiftFifo_din,
        ipv4ShiftFifo_full_n => ipv4ShiftFifo_full_n,
        ipv4ShiftFifo_write => route_by_eth_protocol_512_U0_ipv4ShiftFifo_write,
        m_axis_arp_internal_din => route_by_eth_protocol_512_U0_m_axis_arp_internal_din,
        m_axis_arp_internal_full_n => m_axis_arp_internal_full_n,
        m_axis_arp_internal_write => route_by_eth_protocol_512_U0_m_axis_arp_internal_write);

    ip_handler_rshiftWordByOctet_net_axis_512_512_1_U0 : component ip_handler_top_ip_handler_rshiftWordByOctet_net_axis_512_512_1_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ip_handler_rshiftWordByOctet_net_axis_512_512_1_U0_ap_start,
        ap_done => ip_handler_rshiftWordByOctet_net_axis_512_512_1_U0_ap_done,
        ap_continue => ip_handler_rshiftWordByOctet_net_axis_512_512_1_U0_ap_continue,
        ap_idle => ip_handler_rshiftWordByOctet_net_axis_512_512_1_U0_ap_idle,
        ap_ready => ip_handler_rshiftWordByOctet_net_axis_512_512_1_U0_ap_ready,
        ipv4ShiftFifo_dout => ipv4ShiftFifo_dout,
        ipv4ShiftFifo_empty_n => ipv4ShiftFifo_empty_n,
        ipv4ShiftFifo_read => ip_handler_rshiftWordByOctet_net_axis_512_512_1_U0_ipv4ShiftFifo_read,
        ipDataFifo_din => ip_handler_rshiftWordByOctet_net_axis_512_512_1_U0_ipDataFifo_din,
        ipDataFifo_full_n => ipDataFifo_full_n,
        ipDataFifo_write => ip_handler_rshiftWordByOctet_net_axis_512_512_1_U0_ipDataFifo_write);

    ip_handler_rshiftWordByOctet_net_axis_512_512_3_U0 : component ip_handler_top_ip_handler_rshiftWordByOctet_net_axis_512_512_3_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ip_handler_rshiftWordByOctet_net_axis_512_512_3_U0_ap_start,
        ap_done => ip_handler_rshiftWordByOctet_net_axis_512_512_3_U0_ap_done,
        ap_continue => ip_handler_rshiftWordByOctet_net_axis_512_512_3_U0_ap_continue,
        ap_idle => ip_handler_rshiftWordByOctet_net_axis_512_512_3_U0_ap_idle,
        ap_ready => ip_handler_rshiftWordByOctet_net_axis_512_512_3_U0_ap_ready,
        ipv6ShiftFifo_dout => ipv6ShiftFifo_dout,
        ipv6ShiftFifo_empty_n => ipv6ShiftFifo_empty_n,
        ipv6ShiftFifo_read => ip_handler_rshiftWordByOctet_net_axis_512_512_3_U0_ipv6ShiftFifo_read,
        ipv6DataFifo_din => ip_handler_rshiftWordByOctet_net_axis_512_512_3_U0_ipv6DataFifo_din,
        ipv6DataFifo_full_n => ipv6DataFifo_full_n,
        ipv6DataFifo_write => ip_handler_rshiftWordByOctet_net_axis_512_512_3_U0_ipv6DataFifo_write);

    extract_ip_meta_512_U0 : component ip_handler_top_extract_ip_meta_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => extract_ip_meta_512_U0_ap_start,
        ap_done => extract_ip_meta_512_U0_ap_done,
        ap_continue => extract_ip_meta_512_U0_ap_continue,
        ap_idle => extract_ip_meta_512_U0_ap_idle,
        ap_ready => extract_ip_meta_512_U0_ap_ready,
        ipDataFifo_dout => ipDataFifo_dout,
        ipDataFifo_empty_n => ipDataFifo_empty_n,
        ipDataFifo_read => extract_ip_meta_512_U0_ipDataFifo_read,
        myIpAddress_dout => myIpAddress_c_dout,
        myIpAddress_empty_n => myIpAddress_c_empty_n,
        myIpAddress_read => extract_ip_meta_512_U0_myIpAddress_read,
        ipDataMetaFifo_din => extract_ip_meta_512_U0_ipDataMetaFifo_din,
        ipDataMetaFifo_full_n => ipDataMetaFifo_full_n,
        ipDataMetaFifo_write => extract_ip_meta_512_U0_ipDataMetaFifo_write,
        validIpAddressFifo_din => extract_ip_meta_512_U0_validIpAddressFifo_din,
        validIpAddressFifo_full_n => validIpAddressFifo_full_n,
        validIpAddressFifo_write => extract_ip_meta_512_U0_validIpAddressFifo_write,
        ipv4ProtocolFifo_din => extract_ip_meta_512_U0_ipv4ProtocolFifo_din,
        ipv4ProtocolFifo_full_n => ipv4ProtocolFifo_full_n,
        ipv4ProtocolFifo_write => extract_ip_meta_512_U0_ipv4ProtocolFifo_write);

    ip_handler_compute_ipv4_checksum_U0 : component ip_handler_top_ip_handler_compute_ipv4_checksum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ip_handler_compute_ipv4_checksum_U0_ap_start,
        ap_done => ip_handler_compute_ipv4_checksum_U0_ap_done,
        ap_continue => ip_handler_compute_ipv4_checksum_U0_ap_continue,
        ap_idle => ip_handler_compute_ipv4_checksum_U0_ap_idle,
        ap_ready => ip_handler_compute_ipv4_checksum_U0_ap_ready,
        ipDataMetaFifo_dout => ipDataMetaFifo_dout,
        ipDataMetaFifo_empty_n => ipDataMetaFifo_empty_n,
        ipDataMetaFifo_read => ip_handler_compute_ipv4_checksum_U0_ipDataMetaFifo_read,
        ipDataCheckFifo_din => ip_handler_compute_ipv4_checksum_U0_ipDataCheckFifo_din,
        ipDataCheckFifo_full_n => ipDataCheckFifo_full_n,
        ipDataCheckFifo_write => ip_handler_compute_ipv4_checksum_U0_ipDataCheckFifo_write,
        iph_subSumsFifoOut_din => ip_handler_compute_ipv4_checksum_U0_iph_subSumsFifoOut_din,
        iph_subSumsFifoOut_full_n => iph_subSumsFifoOut_full_n,
        iph_subSumsFifoOut_write => ip_handler_compute_ipv4_checksum_U0_iph_subSumsFifoOut_write);

    ip_handler_check_ipv4_checksum_32_U0 : component ip_handler_top_ip_handler_check_ipv4_checksum_32_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ip_handler_check_ipv4_checksum_32_U0_ap_start,
        ap_done => ip_handler_check_ipv4_checksum_32_U0_ap_done,
        ap_continue => ip_handler_check_ipv4_checksum_32_U0_ap_continue,
        ap_idle => ip_handler_check_ipv4_checksum_32_U0_ap_idle,
        ap_ready => ip_handler_check_ipv4_checksum_32_U0_ap_ready,
        iph_subSumsFifoOut_dout => iph_subSumsFifoOut_dout,
        iph_subSumsFifoOut_empty_n => iph_subSumsFifoOut_empty_n,
        iph_subSumsFifoOut_read => ip_handler_check_ipv4_checksum_32_U0_iph_subSumsFifoOut_read,
        validChecksumFifo_din => ip_handler_check_ipv4_checksum_32_U0_validChecksumFifo_din,
        validChecksumFifo_full_n => validChecksumFifo_full_n,
        validChecksumFifo_write => ip_handler_check_ipv4_checksum_32_U0_validChecksumFifo_write);

    ip_invalid_dropper_512_U0 : component ip_handler_top_ip_invalid_dropper_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ip_invalid_dropper_512_U0_ap_start,
        ap_done => ip_invalid_dropper_512_U0_ap_done,
        ap_continue => ip_invalid_dropper_512_U0_ap_continue,
        ap_idle => ip_invalid_dropper_512_U0_ap_idle,
        ap_ready => ip_invalid_dropper_512_U0_ap_ready,
        ipDataCheckFifo_dout => ipDataCheckFifo_dout,
        ipDataCheckFifo_empty_n => ipDataCheckFifo_empty_n,
        ipDataCheckFifo_read => ip_invalid_dropper_512_U0_ipDataCheckFifo_read,
        validChecksumFifo_dout => validChecksumFifo_dout,
        validChecksumFifo_empty_n => validChecksumFifo_empty_n,
        validChecksumFifo_read => ip_invalid_dropper_512_U0_validChecksumFifo_read,
        validIpAddressFifo_dout => validIpAddressFifo_dout,
        validIpAddressFifo_empty_n => validIpAddressFifo_empty_n,
        validIpAddressFifo_read => ip_invalid_dropper_512_U0_validIpAddressFifo_read,
        ipDataDropFifo_din => ip_invalid_dropper_512_U0_ipDataDropFifo_din,
        ipDataDropFifo_full_n => ipDataDropFifo_full_n,
        ipDataDropFifo_write => ip_invalid_dropper_512_U0_ipDataDropFifo_write,
        ipv4ValidFifo_din => ip_invalid_dropper_512_U0_ipv4ValidFifo_din,
        ipv4ValidFifo_full_n => ipv4ValidFifo_full_n,
        ipv4ValidFifo_write => ip_invalid_dropper_512_U0_ipv4ValidFifo_write);

    cut_length_U0 : component ip_handler_top_cut_length
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => cut_length_U0_ap_start,
        ap_done => cut_length_U0_ap_done,
        ap_continue => cut_length_U0_ap_continue,
        ap_idle => cut_length_U0_ap_idle,
        ap_ready => cut_length_U0_ap_ready,
        ipDataDropFifo_dout => ipDataDropFifo_dout,
        ipDataDropFifo_empty_n => ipDataDropFifo_empty_n,
        ipDataDropFifo_read => cut_length_U0_ipDataDropFifo_read,
        ipDataCutFifo_din => cut_length_U0_ipDataCutFifo_din,
        ipDataCutFifo_full_n => ipDataCutFifo_full_n,
        ipDataCutFifo_write => cut_length_U0_ipDataCutFifo_write);

    detect_ipv4_protocol_512_U0 : component ip_handler_top_detect_ipv4_protocol_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => detect_ipv4_protocol_512_U0_ap_start,
        ap_done => detect_ipv4_protocol_512_U0_ap_done,
        ap_continue => detect_ipv4_protocol_512_U0_ap_continue,
        ap_idle => detect_ipv4_protocol_512_U0_ap_idle,
        ap_ready => detect_ipv4_protocol_512_U0_ap_ready,
        ipv4ProtocolFifo_dout => ipv4ProtocolFifo_dout,
        ipv4ProtocolFifo_empty_n => ipv4ProtocolFifo_empty_n,
        ipv4ProtocolFifo_read => detect_ipv4_protocol_512_U0_ipv4ProtocolFifo_read,
        ipv4ValidFifo_dout => ipv4ValidFifo_dout,
        ipv4ValidFifo_empty_n => ipv4ValidFifo_empty_n,
        ipv4ValidFifo_read => detect_ipv4_protocol_512_U0_ipv4ValidFifo_read,
        ipDataCutFifo_dout => ipDataCutFifo_dout,
        ipDataCutFifo_empty_n => ipDataCutFifo_empty_n,
        ipDataCutFifo_read => detect_ipv4_protocol_512_U0_ipDataCutFifo_read,
        m_axis_tcp_internal_din => detect_ipv4_protocol_512_U0_m_axis_tcp_internal_din,
        m_axis_tcp_internal_full_n => m_axis_tcp_internal_full_n,
        m_axis_tcp_internal_write => detect_ipv4_protocol_512_U0_m_axis_tcp_internal_write,
        udpDataFifo_din => detect_ipv4_protocol_512_U0_udpDataFifo_din,
        udpDataFifo_full_n => udpDataFifo_full_n,
        udpDataFifo_write => detect_ipv4_protocol_512_U0_udpDataFifo_write,
        m_axis_icmp_internal_din => detect_ipv4_protocol_512_U0_m_axis_icmp_internal_din,
        m_axis_icmp_internal_full_n => m_axis_icmp_internal_full_n,
        m_axis_icmp_internal_write => detect_ipv4_protocol_512_U0_m_axis_icmp_internal_write);

    detect_ipv6_protocol_512_U0 : component ip_handler_top_detect_ipv6_protocol_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => detect_ipv6_protocol_512_U0_ap_start,
        ap_done => detect_ipv6_protocol_512_U0_ap_done,
        ap_continue => detect_ipv6_protocol_512_U0_ap_continue,
        ap_idle => detect_ipv6_protocol_512_U0_ap_idle,
        ap_ready => detect_ipv6_protocol_512_U0_ap_ready,
        ipv6DataFifo_dout => ipv6DataFifo_dout,
        ipv6DataFifo_empty_n => ipv6DataFifo_empty_n,
        ipv6DataFifo_read => detect_ipv6_protocol_512_U0_ipv6DataFifo_read,
        m_axis_ipv6udp_internal_din => detect_ipv6_protocol_512_U0_m_axis_ipv6udp_internal_din,
        m_axis_ipv6udp_internal_full_n => m_axis_ipv6udp_internal_full_n,
        m_axis_ipv6udp_internal_write => detect_ipv6_protocol_512_U0_m_axis_ipv6udp_internal_write,
        m_axis_icmpv6_internal_din => detect_ipv6_protocol_512_U0_m_axis_icmpv6_internal_din,
        m_axis_icmpv6_internal_full_n => m_axis_icmpv6_internal_full_n,
        m_axis_icmpv6_internal_write => detect_ipv6_protocol_512_U0_m_axis_icmpv6_internal_write);

    ip_handler_duplicate_stream_net_axis_512_U0 : component ip_handler_top_ip_handler_duplicate_stream_net_axis_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ip_handler_duplicate_stream_net_axis_512_U0_ap_start,
        ap_done => ip_handler_duplicate_stream_net_axis_512_U0_ap_done,
        ap_continue => ip_handler_duplicate_stream_net_axis_512_U0_ap_continue,
        ap_idle => ip_handler_duplicate_stream_net_axis_512_U0_ap_idle,
        ap_ready => ip_handler_duplicate_stream_net_axis_512_U0_ap_ready,
        udpDataFifo_dout => udpDataFifo_dout,
        udpDataFifo_empty_n => udpDataFifo_empty_n,
        udpDataFifo_read => ip_handler_duplicate_stream_net_axis_512_U0_udpDataFifo_read,
        m_axis_udp_internal_din => ip_handler_duplicate_stream_net_axis_512_U0_m_axis_udp_internal_din,
        m_axis_udp_internal_full_n => m_axis_udp_internal_full_n,
        m_axis_udp_internal_write => ip_handler_duplicate_stream_net_axis_512_U0_m_axis_udp_internal_write,
        m_axis_roce_internal_din => ip_handler_duplicate_stream_net_axis_512_U0_m_axis_roce_internal_din,
        m_axis_roce_internal_full_n => m_axis_roce_internal_full_n,
        m_axis_roce_internal_write => ip_handler_duplicate_stream_net_axis_512_U0_m_axis_roce_internal_write);

    myIpAddress_c1_U : component ip_handler_top_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ip_handler_top_entry3_U0_myIpAddress_out_din,
        if_full_n => myIpAddress_c1_full_n,
        if_write => ip_handler_top_entry3_U0_myIpAddress_out_write,
        if_dout => myIpAddress_c1_dout,
        if_empty_n => myIpAddress_c1_empty_n,
        if_read => ip_handler_top_entry19_U0_myIpAddress_read);

    myIpAddress_c_U : component ip_handler_top_fifo_w32_d6_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ip_handler_top_entry19_U0_myIpAddress_out_din,
        if_full_n => myIpAddress_c_full_n,
        if_write => ip_handler_top_entry19_U0_myIpAddress_out_write,
        if_dout => myIpAddress_c_dout,
        if_empty_n => myIpAddress_c_empty_n,
        if_read => extract_ip_meta_512_U0_myIpAddress_read);

    s_axis_raw_internal_U : component ip_handler_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => convert_axis_to_net_axis_512_U0_s_axis_raw_internal_din,
        if_full_n => s_axis_raw_internal_full_n,
        if_write => convert_axis_to_net_axis_512_U0_s_axis_raw_internal_write,
        if_dout => s_axis_raw_internal_dout,
        if_empty_n => s_axis_raw_internal_empty_n,
        if_read => detect_eth_protocol_512_U0_s_axis_raw_internal_read);

    m_axis_arp_internal_U : component ip_handler_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => route_by_eth_protocol_512_U0_m_axis_arp_internal_din,
        if_full_n => m_axis_arp_internal_full_n,
        if_write => route_by_eth_protocol_512_U0_m_axis_arp_internal_write,
        if_dout => m_axis_arp_internal_dout,
        if_empty_n => m_axis_arp_internal_empty_n,
        if_read => convert_net_axis_to_axis_512_13_U0_m_axis_arp_internal_read);

    m_axis_icmpv6_internal_U : component ip_handler_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => detect_ipv6_protocol_512_U0_m_axis_icmpv6_internal_din,
        if_full_n => m_axis_icmpv6_internal_full_n,
        if_write => detect_ipv6_protocol_512_U0_m_axis_icmpv6_internal_write,
        if_dout => m_axis_icmpv6_internal_dout,
        if_empty_n => m_axis_icmpv6_internal_empty_n,
        if_read => convert_net_axis_to_axis_512_14_U0_m_axis_icmpv6_internal_read);

    m_axis_ipv6udp_internal_U : component ip_handler_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => detect_ipv6_protocol_512_U0_m_axis_ipv6udp_internal_din,
        if_full_n => m_axis_ipv6udp_internal_full_n,
        if_write => detect_ipv6_protocol_512_U0_m_axis_ipv6udp_internal_write,
        if_dout => m_axis_ipv6udp_internal_dout,
        if_empty_n => m_axis_ipv6udp_internal_empty_n,
        if_read => convert_net_axis_to_axis_512_15_U0_m_axis_ipv6udp_internal_read);

    m_axis_icmp_internal_U : component ip_handler_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => detect_ipv4_protocol_512_U0_m_axis_icmp_internal_din,
        if_full_n => m_axis_icmp_internal_full_n,
        if_write => detect_ipv4_protocol_512_U0_m_axis_icmp_internal_write,
        if_dout => m_axis_icmp_internal_dout,
        if_empty_n => m_axis_icmp_internal_empty_n,
        if_read => convert_net_axis_to_axis_512_16_U0_m_axis_icmp_internal_read);

    m_axis_udp_internal_U : component ip_handler_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ip_handler_duplicate_stream_net_axis_512_U0_m_axis_udp_internal_din,
        if_full_n => m_axis_udp_internal_full_n,
        if_write => ip_handler_duplicate_stream_net_axis_512_U0_m_axis_udp_internal_write,
        if_dout => m_axis_udp_internal_dout,
        if_empty_n => m_axis_udp_internal_empty_n,
        if_read => convert_net_axis_to_axis_512_17_U0_m_axis_udp_internal_read);

    m_axis_tcp_internal_U : component ip_handler_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => detect_ipv4_protocol_512_U0_m_axis_tcp_internal_din,
        if_full_n => m_axis_tcp_internal_full_n,
        if_write => detect_ipv4_protocol_512_U0_m_axis_tcp_internal_write,
        if_dout => m_axis_tcp_internal_dout,
        if_empty_n => m_axis_tcp_internal_empty_n,
        if_read => convert_net_axis_to_axis_512_18_U0_m_axis_tcp_internal_read);

    m_axis_roce_internal_U : component ip_handler_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ip_handler_duplicate_stream_net_axis_512_U0_m_axis_roce_internal_din,
        if_full_n => m_axis_roce_internal_full_n,
        if_write => ip_handler_duplicate_stream_net_axis_512_U0_m_axis_roce_internal_write,
        if_dout => m_axis_roce_internal_dout,
        if_empty_n => m_axis_roce_internal_empty_n,
        if_read => convert_net_axis_to_axis_512_U0_m_axis_roce_internal_read);

    etherTypeFifo_U : component ip_handler_top_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => detect_eth_protocol_512_U0_etherTypeFifo_din,
        if_full_n => etherTypeFifo_full_n,
        if_write => detect_eth_protocol_512_U0_etherTypeFifo_write,
        if_dout => etherTypeFifo_dout,
        if_empty_n => etherTypeFifo_empty_n,
        if_read => route_by_eth_protocol_512_U0_etherTypeFifo_read);

    ethDataFifo_U : component ip_handler_top_fifo_w1024_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => detect_eth_protocol_512_U0_ethDataFifo_din,
        if_full_n => ethDataFifo_full_n,
        if_write => detect_eth_protocol_512_U0_ethDataFifo_write,
        if_dout => ethDataFifo_dout,
        if_empty_n => ethDataFifo_empty_n,
        if_read => route_by_eth_protocol_512_U0_ethDataFifo_read);

    ipv4ShiftFifo_U : component ip_handler_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => route_by_eth_protocol_512_U0_ipv4ShiftFifo_din,
        if_full_n => ipv4ShiftFifo_full_n,
        if_write => route_by_eth_protocol_512_U0_ipv4ShiftFifo_write,
        if_dout => ipv4ShiftFifo_dout,
        if_empty_n => ipv4ShiftFifo_empty_n,
        if_read => ip_handler_rshiftWordByOctet_net_axis_512_512_1_U0_ipv4ShiftFifo_read);

    ipv6ShiftFifo_U : component ip_handler_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => route_by_eth_protocol_512_U0_ipv6ShiftFifo_din,
        if_full_n => ipv6ShiftFifo_full_n,
        if_write => route_by_eth_protocol_512_U0_ipv6ShiftFifo_write,
        if_dout => ipv6ShiftFifo_dout,
        if_empty_n => ipv6ShiftFifo_empty_n,
        if_read => ip_handler_rshiftWordByOctet_net_axis_512_512_3_U0_ipv6ShiftFifo_read);

    ipDataFifo_U : component ip_handler_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ip_handler_rshiftWordByOctet_net_axis_512_512_1_U0_ipDataFifo_din,
        if_full_n => ipDataFifo_full_n,
        if_write => ip_handler_rshiftWordByOctet_net_axis_512_512_1_U0_ipDataFifo_write,
        if_dout => ipDataFifo_dout,
        if_empty_n => ipDataFifo_empty_n,
        if_read => extract_ip_meta_512_U0_ipDataFifo_read);

    ipv6DataFifo_U : component ip_handler_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ip_handler_rshiftWordByOctet_net_axis_512_512_3_U0_ipv6DataFifo_din,
        if_full_n => ipv6DataFifo_full_n,
        if_write => ip_handler_rshiftWordByOctet_net_axis_512_512_3_U0_ipv6DataFifo_write,
        if_dout => ipv6DataFifo_dout,
        if_empty_n => ipv6DataFifo_empty_n,
        if_read => detect_ipv6_protocol_512_U0_ipv6DataFifo_read);

    ipDataMetaFifo_U : component ip_handler_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => extract_ip_meta_512_U0_ipDataMetaFifo_din,
        if_full_n => ipDataMetaFifo_full_n,
        if_write => extract_ip_meta_512_U0_ipDataMetaFifo_write,
        if_dout => ipDataMetaFifo_dout,
        if_empty_n => ipDataMetaFifo_empty_n,
        if_read => ip_handler_compute_ipv4_checksum_U0_ipDataMetaFifo_read);

    validIpAddressFifo_U : component ip_handler_top_fifo_w1_d32_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => extract_ip_meta_512_U0_validIpAddressFifo_din,
        if_full_n => validIpAddressFifo_full_n,
        if_write => extract_ip_meta_512_U0_validIpAddressFifo_write,
        if_dout => validIpAddressFifo_dout,
        if_empty_n => validIpAddressFifo_empty_n,
        if_read => ip_invalid_dropper_512_U0_validIpAddressFifo_read);

    ipv4ProtocolFifo_U : component ip_handler_top_fifo_w8_d32_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => extract_ip_meta_512_U0_ipv4ProtocolFifo_din,
        if_full_n => ipv4ProtocolFifo_full_n,
        if_write => extract_ip_meta_512_U0_ipv4ProtocolFifo_write,
        if_dout => ipv4ProtocolFifo_dout,
        if_empty_n => ipv4ProtocolFifo_empty_n,
        if_read => detect_ipv4_protocol_512_U0_ipv4ProtocolFifo_read);

    ipDataCheckFifo_U : component ip_handler_top_fifo_w1024_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ip_handler_compute_ipv4_checksum_U0_ipDataCheckFifo_din,
        if_full_n => ipDataCheckFifo_full_n,
        if_write => ip_handler_compute_ipv4_checksum_U0_ipDataCheckFifo_write,
        if_dout => ipDataCheckFifo_dout,
        if_empty_n => ipDataCheckFifo_empty_n,
        if_read => ip_invalid_dropper_512_U0_ipDataCheckFifo_read);

    iph_subSumsFifoOut_U : component ip_handler_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ip_handler_compute_ipv4_checksum_U0_iph_subSumsFifoOut_din,
        if_full_n => iph_subSumsFifoOut_full_n,
        if_write => ip_handler_compute_ipv4_checksum_U0_iph_subSumsFifoOut_write,
        if_dout => iph_subSumsFifoOut_dout,
        if_empty_n => iph_subSumsFifoOut_empty_n,
        if_read => ip_handler_check_ipv4_checksum_32_U0_iph_subSumsFifoOut_read);

    validChecksumFifo_U : component ip_handler_top_fifo_w1_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ip_handler_check_ipv4_checksum_32_U0_validChecksumFifo_din,
        if_full_n => validChecksumFifo_full_n,
        if_write => ip_handler_check_ipv4_checksum_32_U0_validChecksumFifo_write,
        if_dout => validChecksumFifo_dout,
        if_empty_n => validChecksumFifo_empty_n,
        if_read => ip_invalid_dropper_512_U0_validChecksumFifo_read);

    ipv4ValidFifo_U : component ip_handler_top_fifo_w1_d8_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ip_invalid_dropper_512_U0_ipv4ValidFifo_din,
        if_full_n => ipv4ValidFifo_full_n,
        if_write => ip_invalid_dropper_512_U0_ipv4ValidFifo_write,
        if_dout => ipv4ValidFifo_dout,
        if_empty_n => ipv4ValidFifo_empty_n,
        if_read => detect_ipv4_protocol_512_U0_ipv4ValidFifo_read);

    ipDataDropFifo_U : component ip_handler_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ip_invalid_dropper_512_U0_ipDataDropFifo_din,
        if_full_n => ipDataDropFifo_full_n,
        if_write => ip_invalid_dropper_512_U0_ipDataDropFifo_write,
        if_dout => ipDataDropFifo_dout,
        if_empty_n => ipDataDropFifo_empty_n,
        if_read => cut_length_U0_ipDataDropFifo_read);

    ipDataCutFifo_U : component ip_handler_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cut_length_U0_ipDataCutFifo_din,
        if_full_n => ipDataCutFifo_full_n,
        if_write => cut_length_U0_ipDataCutFifo_write,
        if_dout => ipDataCutFifo_dout,
        if_empty_n => ipDataCutFifo_empty_n,
        if_read => detect_ipv4_protocol_512_U0_ipDataCutFifo_read);

    udpDataFifo_U : component ip_handler_top_fifo_w1024_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => detect_ipv4_protocol_512_U0_udpDataFifo_din,
        if_full_n => udpDataFifo_full_n,
        if_write => detect_ipv4_protocol_512_U0_udpDataFifo_write,
        if_dout => udpDataFifo_dout,
        if_empty_n => udpDataFifo_empty_n,
        if_read => ip_handler_duplicate_stream_net_axis_512_U0_udpDataFifo_read);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    convert_axis_to_net_axis_512_U0_ap_continue <= ap_const_logic_1;
    convert_axis_to_net_axis_512_U0_ap_start <= ap_const_logic_1;
    convert_net_axis_to_axis_512_13_U0_ap_continue <= ap_const_logic_1;
    convert_net_axis_to_axis_512_13_U0_ap_start <= ap_const_logic_1;
    convert_net_axis_to_axis_512_14_U0_ap_continue <= ap_const_logic_1;
    convert_net_axis_to_axis_512_14_U0_ap_start <= ap_const_logic_1;
    convert_net_axis_to_axis_512_15_U0_ap_continue <= ap_const_logic_1;
    convert_net_axis_to_axis_512_15_U0_ap_start <= ap_const_logic_1;
    convert_net_axis_to_axis_512_16_U0_ap_continue <= ap_const_logic_1;
    convert_net_axis_to_axis_512_16_U0_ap_start <= ap_const_logic_1;
    convert_net_axis_to_axis_512_17_U0_ap_continue <= ap_const_logic_1;
    convert_net_axis_to_axis_512_17_U0_ap_start <= ap_const_logic_1;
    convert_net_axis_to_axis_512_18_U0_ap_continue <= ap_const_logic_1;
    convert_net_axis_to_axis_512_18_U0_ap_start <= ap_const_logic_1;
    convert_net_axis_to_axis_512_U0_ap_continue <= ap_const_logic_1;
    convert_net_axis_to_axis_512_U0_ap_start <= ap_const_logic_1;
    cut_length_U0_ap_continue <= ap_const_logic_1;
    cut_length_U0_ap_start <= ap_const_logic_1;
    detect_eth_protocol_512_U0_ap_continue <= ap_const_logic_1;
    detect_eth_protocol_512_U0_ap_start <= ap_const_logic_1;
    detect_ipv4_protocol_512_U0_ap_continue <= ap_const_logic_1;
    detect_ipv4_protocol_512_U0_ap_start <= ap_const_logic_1;
    detect_ipv6_protocol_512_U0_ap_continue <= ap_const_logic_1;
    detect_ipv6_protocol_512_U0_ap_start <= ap_const_logic_1;
    extract_ip_meta_512_U0_ap_continue <= ap_const_logic_1;
    extract_ip_meta_512_U0_ap_start <= ap_const_logic_1;
    ip_handler_check_ipv4_checksum_32_U0_ap_continue <= ap_const_logic_1;
    ip_handler_check_ipv4_checksum_32_U0_ap_start <= ap_const_logic_1;
    ip_handler_compute_ipv4_checksum_U0_ap_continue <= ap_const_logic_1;
    ip_handler_compute_ipv4_checksum_U0_ap_start <= ap_const_logic_1;
    ip_handler_duplicate_stream_net_axis_512_U0_ap_continue <= ap_const_logic_1;
    ip_handler_duplicate_stream_net_axis_512_U0_ap_start <= ap_const_logic_1;
    ip_handler_rshiftWordByOctet_net_axis_512_512_1_U0_ap_continue <= ap_const_logic_1;
    ip_handler_rshiftWordByOctet_net_axis_512_512_1_U0_ap_start <= ap_const_logic_1;
    ip_handler_rshiftWordByOctet_net_axis_512_512_3_U0_ap_continue <= ap_const_logic_1;
    ip_handler_rshiftWordByOctet_net_axis_512_512_3_U0_ap_start <= ap_const_logic_1;
    ip_handler_top_entry19_U0_ap_continue <= ap_const_logic_1;
    ip_handler_top_entry19_U0_ap_start <= ap_const_logic_1;
    ip_handler_top_entry3_U0_ap_continue <= ap_const_logic_1;
    ip_handler_top_entry3_U0_ap_start <= ap_const_logic_1;
    ip_invalid_dropper_512_U0_ap_continue <= ap_const_logic_1;
    ip_invalid_dropper_512_U0_ap_start <= ap_const_logic_1;
    m_axis_arp_TDATA <= convert_net_axis_to_axis_512_13_U0_m_axis_arp_TDATA;
    m_axis_arp_TKEEP <= convert_net_axis_to_axis_512_13_U0_m_axis_arp_TKEEP;
    m_axis_arp_TLAST <= convert_net_axis_to_axis_512_13_U0_m_axis_arp_TLAST;
    m_axis_arp_TSTRB <= convert_net_axis_to_axis_512_13_U0_m_axis_arp_TSTRB;
    m_axis_arp_TVALID <= convert_net_axis_to_axis_512_13_U0_m_axis_arp_TVALID;
    m_axis_icmp_TDATA <= convert_net_axis_to_axis_512_16_U0_m_axis_icmp_TDATA;
    m_axis_icmp_TKEEP <= convert_net_axis_to_axis_512_16_U0_m_axis_icmp_TKEEP;
    m_axis_icmp_TLAST <= convert_net_axis_to_axis_512_16_U0_m_axis_icmp_TLAST;
    m_axis_icmp_TSTRB <= convert_net_axis_to_axis_512_16_U0_m_axis_icmp_TSTRB;
    m_axis_icmp_TVALID <= convert_net_axis_to_axis_512_16_U0_m_axis_icmp_TVALID;
    m_axis_icmpv6_TDATA <= convert_net_axis_to_axis_512_14_U0_m_axis_icmpv6_TDATA;
    m_axis_icmpv6_TKEEP <= convert_net_axis_to_axis_512_14_U0_m_axis_icmpv6_TKEEP;
    m_axis_icmpv6_TLAST <= convert_net_axis_to_axis_512_14_U0_m_axis_icmpv6_TLAST;
    m_axis_icmpv6_TSTRB <= convert_net_axis_to_axis_512_14_U0_m_axis_icmpv6_TSTRB;
    m_axis_icmpv6_TVALID <= convert_net_axis_to_axis_512_14_U0_m_axis_icmpv6_TVALID;
    m_axis_ipv6udp_TDATA <= convert_net_axis_to_axis_512_15_U0_m_axis_ipv6udp_TDATA;
    m_axis_ipv6udp_TKEEP <= convert_net_axis_to_axis_512_15_U0_m_axis_ipv6udp_TKEEP;
    m_axis_ipv6udp_TLAST <= convert_net_axis_to_axis_512_15_U0_m_axis_ipv6udp_TLAST;
    m_axis_ipv6udp_TSTRB <= convert_net_axis_to_axis_512_15_U0_m_axis_ipv6udp_TSTRB;
    m_axis_ipv6udp_TVALID <= convert_net_axis_to_axis_512_15_U0_m_axis_ipv6udp_TVALID;
    m_axis_roce_TDATA <= convert_net_axis_to_axis_512_U0_m_axis_roce_TDATA;
    m_axis_roce_TKEEP <= convert_net_axis_to_axis_512_U0_m_axis_roce_TKEEP;
    m_axis_roce_TLAST <= convert_net_axis_to_axis_512_U0_m_axis_roce_TLAST;
    m_axis_roce_TSTRB <= convert_net_axis_to_axis_512_U0_m_axis_roce_TSTRB;
    m_axis_roce_TVALID <= convert_net_axis_to_axis_512_U0_m_axis_roce_TVALID;
    m_axis_tcp_TDATA <= convert_net_axis_to_axis_512_18_U0_m_axis_tcp_TDATA;
    m_axis_tcp_TKEEP <= convert_net_axis_to_axis_512_18_U0_m_axis_tcp_TKEEP;
    m_axis_tcp_TLAST <= convert_net_axis_to_axis_512_18_U0_m_axis_tcp_TLAST;
    m_axis_tcp_TSTRB <= convert_net_axis_to_axis_512_18_U0_m_axis_tcp_TSTRB;
    m_axis_tcp_TVALID <= convert_net_axis_to_axis_512_18_U0_m_axis_tcp_TVALID;
    m_axis_udp_TDATA <= convert_net_axis_to_axis_512_17_U0_m_axis_udp_TDATA;
    m_axis_udp_TKEEP <= convert_net_axis_to_axis_512_17_U0_m_axis_udp_TKEEP;
    m_axis_udp_TLAST <= convert_net_axis_to_axis_512_17_U0_m_axis_udp_TLAST;
    m_axis_udp_TSTRB <= convert_net_axis_to_axis_512_17_U0_m_axis_udp_TSTRB;
    m_axis_udp_TVALID <= convert_net_axis_to_axis_512_17_U0_m_axis_udp_TVALID;
    route_by_eth_protocol_512_U0_ap_continue <= ap_const_logic_1;
    route_by_eth_protocol_512_U0_ap_start <= ap_const_logic_1;
    s_axis_raw_TREADY <= convert_axis_to_net_axis_512_U0_s_axis_raw_TREADY;
end behav;
