#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("s_axis_raw_TDATA", 512, hls_in, 0, "axis", "in_data", 1),
	Port_Property("s_axis_raw_TKEEP", 64, hls_in, 1, "axis", "in_data", 1),
	Port_Property("s_axis_raw_TSTRB", 64, hls_in, 2, "axis", "in_data", 1),
	Port_Property("s_axis_raw_TLAST", 1, hls_in, 3, "axis", "in_data", 1),
	Port_Property("m_axis_arp_TDATA", 512, hls_out, 4, "axis", "out_data", 1),
	Port_Property("m_axis_arp_TKEEP", 64, hls_out, 5, "axis", "out_data", 1),
	Port_Property("m_axis_arp_TSTRB", 64, hls_out, 6, "axis", "out_data", 1),
	Port_Property("m_axis_arp_TLAST", 1, hls_out, 7, "axis", "out_data", 1),
	Port_Property("m_axis_icmpv6_TDATA", 512, hls_out, 8, "axis", "out_data", 1),
	Port_Property("m_axis_icmpv6_TKEEP", 64, hls_out, 9, "axis", "out_data", 1),
	Port_Property("m_axis_icmpv6_TSTRB", 64, hls_out, 10, "axis", "out_data", 1),
	Port_Property("m_axis_icmpv6_TLAST", 1, hls_out, 11, "axis", "out_data", 1),
	Port_Property("m_axis_ipv6udp_TDATA", 512, hls_out, 12, "axis", "out_data", 1),
	Port_Property("m_axis_ipv6udp_TKEEP", 64, hls_out, 13, "axis", "out_data", 1),
	Port_Property("m_axis_ipv6udp_TSTRB", 64, hls_out, 14, "axis", "out_data", 1),
	Port_Property("m_axis_ipv6udp_TLAST", 1, hls_out, 15, "axis", "out_data", 1),
	Port_Property("m_axis_icmp_TDATA", 512, hls_out, 16, "axis", "out_data", 1),
	Port_Property("m_axis_icmp_TKEEP", 64, hls_out, 17, "axis", "out_data", 1),
	Port_Property("m_axis_icmp_TSTRB", 64, hls_out, 18, "axis", "out_data", 1),
	Port_Property("m_axis_icmp_TLAST", 1, hls_out, 19, "axis", "out_data", 1),
	Port_Property("m_axis_udp_TDATA", 512, hls_out, 20, "axis", "out_data", 1),
	Port_Property("m_axis_udp_TKEEP", 64, hls_out, 21, "axis", "out_data", 1),
	Port_Property("m_axis_udp_TSTRB", 64, hls_out, 22, "axis", "out_data", 1),
	Port_Property("m_axis_udp_TLAST", 1, hls_out, 23, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_TDATA", 512, hls_out, 24, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_TKEEP", 64, hls_out, 25, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_TSTRB", 64, hls_out, 26, "axis", "out_data", 1),
	Port_Property("m_axis_tcp_TLAST", 1, hls_out, 27, "axis", "out_data", 1),
	Port_Property("m_axis_roce_TDATA", 512, hls_out, 28, "axis", "out_data", 1),
	Port_Property("m_axis_roce_TKEEP", 64, hls_out, 29, "axis", "out_data", 1),
	Port_Property("m_axis_roce_TSTRB", 64, hls_out, 30, "axis", "out_data", 1),
	Port_Property("m_axis_roce_TLAST", 1, hls_out, 31, "axis", "out_data", 1),
	Port_Property("myIpAddress", 32, hls_in, 32, "ap_none", "in_data", 1),
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axis_raw_TVALID", 1, hls_in, 3, "axis", "in_vld", 1),
	Port_Property("s_axis_raw_TREADY", 1, hls_out, 3, "axis", "in_acc", 1),
	Port_Property("m_axis_arp_TVALID", 1, hls_out, 7, "axis", "out_vld", 1),
	Port_Property("m_axis_arp_TREADY", 1, hls_in, 7, "axis", "out_acc", 1),
	Port_Property("m_axis_icmpv6_TVALID", 1, hls_out, 11, "axis", "out_vld", 1),
	Port_Property("m_axis_icmpv6_TREADY", 1, hls_in, 11, "axis", "out_acc", 1),
	Port_Property("m_axis_ipv6udp_TVALID", 1, hls_out, 15, "axis", "out_vld", 1),
	Port_Property("m_axis_ipv6udp_TREADY", 1, hls_in, 15, "axis", "out_acc", 1),
	Port_Property("m_axis_icmp_TVALID", 1, hls_out, 19, "axis", "out_vld", 1),
	Port_Property("m_axis_icmp_TREADY", 1, hls_in, 19, "axis", "out_acc", 1),
	Port_Property("m_axis_udp_TVALID", 1, hls_out, 23, "axis", "out_vld", 1),
	Port_Property("m_axis_udp_TREADY", 1, hls_in, 23, "axis", "out_acc", 1),
	Port_Property("m_axis_tcp_TVALID", 1, hls_out, 27, "axis", "out_vld", 1),
	Port_Property("m_axis_tcp_TREADY", 1, hls_in, 27, "axis", "out_acc", 1),
	Port_Property("m_axis_roce_TVALID", 1, hls_out, 31, "axis", "out_vld", 1),
	Port_Property("m_axis_roce_TREADY", 1, hls_in, 31, "axis", "out_acc", 1),
};
const char* HLS_Design_Meta::dut_name = "ip_handler_top";
